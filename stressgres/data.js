window.BENCHMARK_DATA = {
  "lastUpdate": 1754776507369,
  "repoUrl": "https://github.com/paradedb/paradedb",
  "entries": {
    "pg_search single-server.toml Performance - TPS": [
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "committer": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "id": "6603901ab5f5342e3de4b0bfc99065823a606d92",
          "message": "Fix mintlify check workflow",
          "timestamp": "2025-07-06T17:07:57Z",
          "url": "https://github.com/paradedb/paradedb/commit/6603901ab5f5342e3de4b0bfc99065823a606d92"
        },
        "date": 1752440985886,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 306.3111752901644,
            "unit": "median tps",
            "extra": "avg tps: 307.6931278290426, max tps: 520.3365980533484, count: 55107"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2536.7213297437415,
            "unit": "median tps",
            "extra": "avg tps: 2524.1791177870427, max tps: 2577.5381654331127, count: 55107"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 305.2038031331571,
            "unit": "median tps",
            "extra": "avg tps: 306.3767194694763, max tps: 484.06616612217107, count: 55107"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 267.7627374966694,
            "unit": "median tps",
            "extra": "avg tps: 267.2598482688497, max tps: 430.7737903441194, count: 55107"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 155.08945061007833,
            "unit": "median tps",
            "extra": "avg tps: 154.11631341151, max tps: 163.90287680657562, count: 110214"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 135.65325779836144,
            "unit": "median tps",
            "extra": "avg tps: 134.99656233652175, max tps: 147.78242179006236, count: 55107"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 5.390145064605325,
            "unit": "median tps",
            "extra": "avg tps: 8.90633164011802, max tps: 940.1747972983138, count: 55107"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "71ea95206a8e487805333d573e859dad68dab572",
          "message": "chore: Upgrade to `0.16.1` (#2748)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-30T19:38:06Z",
          "url": "https://github.com/paradedb/paradedb/commit/71ea95206a8e487805333d573e859dad68dab572"
        },
        "date": 1752440998308,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 285.03547980341597,
            "unit": "median tps",
            "extra": "avg tps: 284.5664475907636, max tps: 443.99798977665193, count: 55117"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2280.7349466269866,
            "unit": "median tps",
            "extra": "avg tps: 2266.1489210943914, max tps: 2296.1671773055514, count: 55117"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 237.356420152653,
            "unit": "median tps",
            "extra": "avg tps: 239.7133171667209, max tps: 446.9448088244301, count: 55117"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 233.32858450425005,
            "unit": "median tps",
            "extra": "avg tps: 233.01200561653596, max tps: 356.4562333234179, count: 55117"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 133.1109599699799,
            "unit": "median tps",
            "extra": "avg tps: 134.161937956422, max tps: 145.3352230343854, count: 110234"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 135.0507020088833,
            "unit": "median tps",
            "extra": "avg tps: 138.08492580934154, max tps: 157.536776469744, count: 55117"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 3.94053259686009,
            "unit": "median tps",
            "extra": "avg tps: 8.313916343810918, max tps: 1121.39052425007, count: 55117"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "c0442237441f33c1c51d6c11e29849eda05816a7",
          "message": "chore: Upgrade to `0.16.2` (#2760)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-01T21:30:02Z",
          "url": "https://github.com/paradedb/paradedb/commit/c0442237441f33c1c51d6c11e29849eda05816a7"
        },
        "date": 1752440998850,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 271.9593434748166,
            "unit": "median tps",
            "extra": "avg tps: 272.28677116029274, max tps: 475.5747474993365, count: 55130"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2019.6208111655794,
            "unit": "median tps",
            "extra": "avg tps: 2018.8954776980363, max tps: 2408.5971419167427, count: 55130"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 269.81723373540353,
            "unit": "median tps",
            "extra": "avg tps: 270.34188692359044, max tps: 443.5282070858116, count: 55130"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 224.698678800447,
            "unit": "median tps",
            "extra": "avg tps: 225.53739780980712, max tps: 362.169458800037, count: 55130"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 135.49123934417017,
            "unit": "median tps",
            "extra": "avg tps: 139.12872467955398, max tps: 153.29109269682283, count: 110260"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 130.71653115941604,
            "unit": "median tps",
            "extra": "avg tps: 133.08391895358787, max tps: 148.70270170304914, count: 55130"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.3696814096749925,
            "unit": "median tps",
            "extra": "avg tps: 8.5874659065905, max tps: 1163.9817487661794, count: 55130"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@paradedb.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "4fd1b2b6b6664d03946be0f4836732f0f40df0cc",
          "message": "chore: Rename datasets and add string paging queries (#2834)\n\n## What\n\nAdd a high-cardinality paging/top-n query to the benchmarks, and rename\ndatasets to match their content. Additionally, improve the generation\nscript for the `docs` dataset to avoid joins and allow for deterministic\nrelative-position queries.\n\n## Why\n\nWe don't currently have a high-cardinality string paging/top-n query in\nthe benchmark. We have top-n on a string column, but only for\nlow-cardinality values (`top_n-string.sql`). The top-n case represented\nan important gap that a user encountered, which #2828 addresses.\n\nThe names of the `benchmark` datasets don't currently describe their\nshape / schema, and for the `join` dataset in particular, that would\ndiscourage using it for other types of queries. We rename it to `docs`\nhere, and then use the `pages` table as the dataset for top-n.\n\n## Tests\n\nTested locally that the new query demonstrates a speedup for #2828.",
          "timestamp": "2025-07-13T18:04:27Z",
          "url": "https://github.com/paradedb/paradedb/commit/4fd1b2b6b6664d03946be0f4836732f0f40df0cc"
        },
        "date": 1752441065373,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 287.4410162524614,
            "unit": "median tps",
            "extra": "avg tps: 290.79458171237866, max tps: 532.1087582874854, count: 54617"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2309.093793540984,
            "unit": "median tps",
            "extra": "avg tps: 2307.4051934213358, max tps: 2514.506580333097, count: 54617"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 287.910233299443,
            "unit": "median tps",
            "extra": "avg tps: 291.8019135736587, max tps: 537.4094673147708, count: 54617"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 257.8723536897191,
            "unit": "median tps",
            "extra": "avg tps: 259.8010282477663, max tps: 447.463310357733, count: 54617"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 139.78571655359298,
            "unit": "median tps",
            "extra": "avg tps: 139.88588374700302, max tps: 159.86662399337084, count: 109234"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 152.4945316017401,
            "unit": "median tps",
            "extra": "avg tps: 150.75898831967797, max tps: 153.2469948209186, count: 54617"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.815295851075635,
            "unit": "median tps",
            "extra": "avg tps: 9.03018688698432, max tps: 1067.3486312854827, count: 54617"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr",
            "email": "eebbrr@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "e350be5d171ddb28a700c02d8adc32a1a9f4b084",
          "message": "feat: custom fsm (#2765)\n\nA custom FSM implementation that allows us to internally track\nfree/reusable blocks without generating full read+write cycles on every\npage that is returned to the FSM.\n\nThere's a new UDF called `paradedb.fsm_info()` that returns a table of\nFSM block numbers in use and the free block numbers they contain.\n\n## Why\n\nTo reduce I/O during segment merging and garbage collection, with an aim of reducing WAL traffic for enterprise.",
          "timestamp": "2025-07-09T15:42:21Z",
          "url": "https://github.com/paradedb/paradedb/commit/e350be5d171ddb28a700c02d8adc32a1a9f4b084"
        },
        "date": 1752441066775,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 318.8854337388586,
            "unit": "median tps",
            "extra": "avg tps: 318.32041794923697, max tps: 515.6490259342258, count: 55224"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2234.454466260472,
            "unit": "median tps",
            "extra": "avg tps: 2234.9747233696885, max tps: 2473.4211331042775, count: 55224"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 288.76413822570146,
            "unit": "median tps",
            "extra": "avg tps: 289.73811805418615, max tps: 535.3061366046683, count: 55224"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 255.28983754468982,
            "unit": "median tps",
            "extra": "avg tps: 257.15995840263514, max tps: 448.30273704511563, count: 55224"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 145.41953728256377,
            "unit": "median tps",
            "extra": "avg tps: 154.36036451251746, max tps: 166.76116958026768, count: 110448"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 128.80537515210105,
            "unit": "median tps",
            "extra": "avg tps: 128.6905406449407, max tps: 135.49748103407882, count: 55224"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.275111938382058,
            "unit": "median tps",
            "extra": "avg tps: 8.695642606860186, max tps: 1225.4661673300523, count: 55224"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Kaihong.Wang",
            "username": "wangkhc",
            "email": "wangkhc@163.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "7f560910072d570e0dca4d19a9fe02b47f6917e5",
          "message": "fix: Add missing stopword filters to Jieba tokenizer (#2790)\n\n### What\n\nThis PR fixes a bug where the Jieba tokenizer was missing stopword\nfiltering capabilities that are available in other tokenizers. The fix\nadds both custom stopword lists and language-based stopword filtering\nsupport to the Jieba tokenizer. (Fix #2789 )\n\n### Why\n\nThe Jieba tokenizer implementation was inconsistent with other\ntokenizers in the codebase - it lacked the\n`.filter(filters.stopwords_language())` and\n`.filter(filters.stopwords())` calls that are present in all other\ntokenizer variants (ICU, Chinese Lindera, etc.). This meant users\ncouldn't filter out common Chinese stop words like \"的\", \"了\", \"在\" or\nEnglish stop words when using mixed-language content, reducing search\nquality and relevance.\n\nThis inconsistency was discovered when comparing the Jieba tokenizer\nimplementation against other tokenizer variants in\n`tokenizers/src/manager.rs`.\n\n### How\n\n1. **Bug Fix:** Modified `tokenizers/src/manager.rs` in the\n`SearchTokenizer::Jieba` case within `to_tantivy_tokenizer()` method:\n- Added `.filter(filters.stopwords_language())` to support\nlanguage-based stopwords (e.g., English, Spanish, etc.)\n- Added `.filter(filters.stopwords())` to support custom stopword lists\n- This brings Jieba tokenizer in line with all other tokenizer\nimplementations\n\n2. **Code Changes:**\n   ```rust\n   // Before (missing stopword filters)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .build(),\n   ),\n\n   // After (with stopword filters added)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .filter(filters.stopwords_language())  // ← Added\n           .filter(filters.stopwords())           // ← Added\n           .build(),\n   ),\n   ```\n\n### Tests\n\nAdded comprehensive test coverage in `tokenizers/src/manager.rs`:\n\n1. **`test_jieba_tokenizer_with_stopwords`**: \n   - Tests custom stopword filtering with Chinese stopwords\n- Verifies stopwords are filtered out while content words are preserved\n\n2. **`test_jieba_tokenizer_with_language_stopwords`**:\n   - Tests language-based stopword filtering with English stopwords\n   - Tests the `stopwords_language: \"English\"` configuration option\n\nBoth tests use natural, conversational sentences instead of artificial\ntest data, making them more representative of real-world usage and\nsuitable for open-source community review.\n\n**All existing tests continue to pass** (12/12), ensuring no regressions\nwere introduced.\n\n### Ticket(s) Closed\n\nFix #2789\n\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-09T12:38:14Z",
          "url": "https://github.com/paradedb/paradedb/commit/7f560910072d570e0dca4d19a9fe02b47f6917e5"
        },
        "date": 1752441100600,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 316.80640254613456,
            "unit": "median tps",
            "extra": "avg tps: 317.9973664370396, max tps: 542.0596433937652, count: 54990"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2349.9317704166933,
            "unit": "median tps",
            "extra": "avg tps: 2351.8042800405537, max tps: 2597.4815900786593, count: 54990"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 310.5760512857851,
            "unit": "median tps",
            "extra": "avg tps: 312.72894358990874, max tps: 515.8315746887479, count: 54990"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 275.23553296850116,
            "unit": "median tps",
            "extra": "avg tps: 277.10509750780125, max tps: 448.7479371618263, count: 54990"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 152.6247417026238,
            "unit": "median tps",
            "extra": "avg tps: 154.75131838636202, max tps: 160.09704709826937, count: 109980"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 133.64550229646755,
            "unit": "median tps",
            "extra": "avg tps: 133.29140476702466, max tps: 140.69086106635774, count: 54990"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.692168069075153,
            "unit": "median tps",
            "extra": "avg tps: 9.25591832582167, max tps: 1144.4777233133545, count: 54990"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "47bbe518381e1429f228328336dad78e99636ad9",
          "message": "chore: Upgrade to `0.16.0` (#2720)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-23T23:04:37Z",
          "url": "https://github.com/paradedb/paradedb/commit/47bbe518381e1429f228328336dad78e99636ad9"
        },
        "date": 1752441102327,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 131.5665344788818,
            "unit": "median tps",
            "extra": "avg tps: 131.66352032989778, max tps: 260.5206026623101, count: 55093"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 828.4482148821078,
            "unit": "median tps",
            "extra": "avg tps: 828.7021117439185, max tps: 1376.3662611014565, count: 55093"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 129.60446593374806,
            "unit": "median tps",
            "extra": "avg tps: 130.0377860181478, max tps: 260.5918005043881, count: 55093"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 105.46496219117446,
            "unit": "median tps",
            "extra": "avg tps: 105.95759092764341, max tps: 213.0519320689028, count: 55093"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 131.7245998775656,
            "unit": "median tps",
            "extra": "avg tps: 134.33373631853283, max tps: 143.81621734699058, count: 110186"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 116.81072348268977,
            "unit": "median tps",
            "extra": "avg tps: 115.23857962531804, max tps: 121.9170023545966, count: 55093"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 2.8368780156117754,
            "unit": "median tps",
            "extra": "avg tps: 6.900378916766535, max tps: 1112.3792234258165, count: 55093"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b96e41e25c3fd2126f54aa5cb66d4deffb482047",
          "message": "perf: Lazily load fast fields dictionaries. (#2842)\n\n## What\n\nLazily load fast field dictionaries from buffers: see\nhttps://github.com/paradedb/tantivy/pull/55\n\n## Why\n\nA customer reported slower-than-expected paging on a string/uuid column.\n85% of the time for that query was being spent in _opening_ a fast\nfields string/bytes column, with a large fraction of that time spent\nfully consuming the column's `Dictionary`.\n\n## Tests\n\nSee the attached benchmark results:\n* [`docs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014379545)\n    * No regressions.\n    * 2x faster for `top_n-score`\n    * 1.4x faster for `highlighting` \n* [`logs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014350211)\n    * No regressions.\n    * 4.5x faster for `paging-string-max`\n    * 1.7x faster for `paging-string-median`\n    * 1.6x faster for `paging-string-min`\n\nThe `paging-string-*` benchmarks were added in #2834 to highlight this\nparticular issue.",
          "timestamp": "2025-07-14T08:28:09-07:00",
          "tree_id": "d144335dcb7c7f138a112c01e5b9ff5e0168fe37",
          "url": "https://github.com/paradedb/paradedb/commit/b96e41e25c3fd2126f54aa5cb66d4deffb482047"
        },
        "date": 1752507918468,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 320.34033261446194,
            "unit": "median tps",
            "extra": "avg tps: 320.0366677774066, max tps: 505.1612771787176, count: 54984"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2186.9465033112137,
            "unit": "median tps",
            "extra": "avg tps: 2193.2580398231044, max tps: 2565.4430057568543, count: 54984"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 320.6164037390294,
            "unit": "median tps",
            "extra": "avg tps: 321.20580390459014, max tps: 534.9963127705213, count: 54984"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 289.3068538659048,
            "unit": "median tps",
            "extra": "avg tps: 289.06498789477143, max tps: 434.09221334069554, count: 54984"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 149.44506617730954,
            "unit": "median tps",
            "extra": "avg tps: 149.26738588429603, max tps: 159.83780103582333, count: 109968"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 134.36034939221275,
            "unit": "median tps",
            "extra": "avg tps: 134.31913067408195, max tps: 144.850989381662, count: 54984"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 5.864855221310597,
            "unit": "median tps",
            "extra": "avg tps: 9.952981181211312, max tps: 1062.695868132195, count: 54984"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8",
          "message": "fix: orphaned delete entries get GCed too early (#2845)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nWhen running a new stressgres suite (coming in a future PR), I hit a\nmysterious bug where it looked like vacuum could cause corruption of\nsome pages.\n\nTurns out it's caused by scenarios where:\n\n1. A `DeleteEntry` already exists for a `SegmentMetaEntry`, and a new\none is created\n2. A new, \"fake\" `SegmentMetaEntry` gets created for the purpose of\nstoring the old `DeleteEntry`, so its blocks can get garbage collected\n3. Because this \"fake\" entry is invisible to all readers besides the\ngarbage collector, it doesn't get pinned and can get garbage collected\ntoo early (i.e. while a reader is still pinning the old `DeleteEntry`)\n\nThe solution is to copy all of the contents of the old\n`SegmentMetaEntry` to the fake one, so that the \"pintest blockno\" of the\nfake entry is that same as that of the entry with the new `DeleteEntry`.\nThat way, the `DeleteEntry` doesn't get garbage collected until the pin\nis released.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-14T15:46:29-04:00",
          "tree_id": "3dc55f49de121cf04534f48e3584a2a3ae333407",
          "url": "https://github.com/paradedb/paradedb/commit/ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8"
        },
        "date": 1752523325508,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 301.9666978664777,
            "unit": "median tps",
            "extra": "avg tps: 302.06048906291755, max tps: 531.7082304256362, count: 55164"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2313.7055097403972,
            "unit": "median tps",
            "extra": "avg tps: 2304.1777467335255, max tps: 2665.074111076118, count: 55164"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 303.562357343436,
            "unit": "median tps",
            "extra": "avg tps: 304.21293647018865, max tps: 504.7387284589783, count: 55164"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 247.90344007713242,
            "unit": "median tps",
            "extra": "avg tps: 248.78827685846798, max tps: 416.59428340992423, count: 55164"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 155.6409323961807,
            "unit": "median tps",
            "extra": "avg tps: 155.7193212636969, max tps: 160.05364832848377, count: 110328"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 139.16054140037977,
            "unit": "median tps",
            "extra": "avg tps: 138.58103916617492, max tps: 140.3050881236465, count: 55164"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.961278230928719,
            "unit": "median tps",
            "extra": "avg tps: 9.438792350180849, max tps: 1254.4832093694843, count: 55164"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "eb3bc1d570c85d60804f6aab2f2d2cf998bd7597",
          "message": "ci: benchmark workflow cleanups (#2851)\n\nThis is an attempt to cleanup the benchmark workflows a little bit.  \n\n- Centralizes checking out the latest benchmark code/suites/actions into\na composite action.\n- figures out the PR #/title being tested\n- Changes the slack notification messages to be reactive to the\nenvironment to hopefully avoid conflicts with -enterprise",
          "timestamp": "2025-07-15T12:15:54-04:00",
          "tree_id": "223c726790d68868f538b7f5aab9cf9904494f44",
          "url": "https://github.com/paradedb/paradedb/commit/eb3bc1d570c85d60804f6aab2f2d2cf998bd7597"
        },
        "date": 1752597089068,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 305.4751239219894,
            "unit": "median tps",
            "extra": "avg tps: 306.23446307359137, max tps: 528.2094493721808, count: 54712"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2498.87633454221,
            "unit": "median tps",
            "extra": "avg tps: 2471.2933767677114, max tps: 2624.154564729526, count: 54712"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 306.4802582445157,
            "unit": "median tps",
            "extra": "avg tps: 307.4277099132346, max tps: 516.6447994389714, count: 54712"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 242.84460041715704,
            "unit": "median tps",
            "extra": "avg tps: 245.16532482624004, max tps: 435.8525509076869, count: 54712"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 153.651459454252,
            "unit": "median tps",
            "extra": "avg tps: 152.73316934924685, max tps: 157.1763490858229, count: 109424"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 137.07902744223273,
            "unit": "median tps",
            "extra": "avg tps: 136.50087448419276, max tps: 142.10078604826063, count: 54712"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.981613165249287,
            "unit": "median tps",
            "extra": "avg tps: 9.659748879884381, max tps: 1248.7730804484593, count: 54712"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c7bdeebed6249725c87b87c276d2e09dfaffd152",
          "message": "ci: publish stressgres benchmark graphs (#2852)\n\nThis will publish every stressgres benchmark graph to the new\n`paradedb/benchmark-data` repo.\n\nIt also ensures that when one of our \"[benchmark]\" labels are applied,\nthat it does *not* pull the benchmarks from main, but instead from the\nPR branch itself.",
          "timestamp": "2025-07-15T18:13:26-04:00",
          "tree_id": "f18bf519521a03613c5b12c861092f24314476ad",
          "url": "https://github.com/paradedb/paradedb/commit/c7bdeebed6249725c87b87c276d2e09dfaffd152"
        },
        "date": 1752618537950,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 325.0219765492938,
            "unit": "median tps",
            "extra": "avg tps: 324.0733157615584, max tps: 519.9401336408907, count: 55161"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2127.3484985872155,
            "unit": "median tps",
            "extra": "avg tps: 2126.8694309698953, max tps: 2568.5770449329925, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 277.81309281998165,
            "unit": "median tps",
            "extra": "avg tps: 279.98713002297825, max tps: 484.64899614168775, count: 55161"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 292.6490681643571,
            "unit": "median tps",
            "extra": "avg tps: 292.0705978891881, max tps: 448.55441900338474, count: 55161"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 141.08016889491398,
            "unit": "median tps",
            "extra": "avg tps: 140.7201466343214, max tps: 159.68848153523228, count: 110322"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 126.12401338176589,
            "unit": "median tps",
            "extra": "avg tps: 125.70250727258181, max tps: 145.37493662885853, count: 55161"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.267097069170552,
            "unit": "median tps",
            "extra": "avg tps: 8.382422137054183, max tps: 1124.984672083843, count: 55161"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "21990816+philippemnoel@users.noreply.github.com"
          },
          "committer": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@gmail.com"
          },
          "id": "8c164d666c4af2049b439690afa7823ab5be2c88",
          "message": "ci: Post \"One-branch Release Model\" Improvements (#2792)\n\n# Ticket(s) Closed\n\n- Closes #N/A\n\n## What\n- Don't make Docker Scout post on PRs that don't modify the Dockerfile,\nnot necessary.\n- Make sure the SchemaBot workflow errors when community contributors\nmake a PR, so we can catch needed changes to the SQL upgrade script.\n- Rename it to SchemaBot\n\n## Why\nQoL\n\n## How\n^\n\n## Tests\nCI",
          "timestamp": "2025-07-08T15:49:16Z",
          "url": "https://github.com/paradedb/paradedb/commit/8c164d666c4af2049b439690afa7823ab5be2c88"
        },
        "date": 1752668513520,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 315.8428380993767,
            "unit": "median tps",
            "extra": "avg tps: 316.6870899892203, max tps: 522.5800943866939, count: 55077"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2320.926556132953,
            "unit": "median tps",
            "extra": "avg tps: 2326.3086373013957, max tps: 2591.1336883581325, count: 55077"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 301.3644541628425,
            "unit": "median tps",
            "extra": "avg tps: 302.7329004447359, max tps: 525.3100041333333, count: 55077"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 275.69848964891816,
            "unit": "median tps",
            "extra": "avg tps: 275.54867864964064, max tps: 447.0924638183717, count: 55077"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 155.54810824512654,
            "unit": "median tps",
            "extra": "avg tps: 162.95433038112125, max tps: 173.331819532512, count: 110154"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 137.51159221897996,
            "unit": "median tps",
            "extra": "avg tps: 137.32489841228025, max tps: 145.5387283399039, count: 55077"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 4.968872895106366,
            "unit": "median tps",
            "extra": "avg tps: 9.338879413398578, max tps: 1134.758211394107, count: 55077"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f7c13c858851200e8ab5395779f821ca484cda0d",
          "message": "feat: Add a custom scan for aggregates (#2763)\n\n## What\n\nAdd a new `CustomScan` (installed with `create_upper_paths_hook`) which\nreplaces simple aggregate plans on `bm25`-indexed tables with aggregate\nimplementations using [Tantivy\naggregates](https://docs.rs/tantivy/latest/tantivy/aggregation/index.html).\n\n## Why\n\nTantivy aggregates can be significantly faster (in benchmarks, we've\nmeasured between 4-10x for bucketing/faceting queries). They have been\nexposed via `paradedb.aggregate` for a while now, but that function\nrequires learning a new API, and does not feel \"Postgres native\".\n\n## How\n\n* Adjust `CustomPathBuilder` and `CustomPathMethods` to allow multiple\n`CustomScan` implementations.\n* Remove the `CustomScan::PrivateData: Default` bound, as it requires\nthe `PrivateData` to start in an illegal state.\n* Move `qual_inspect` to a reusable location.\n* Split out a module to be used by both the `aggregate` API method and\nby the aggregate custom scan.\n* Implement the \"ParadeDB Aggregate Scan\" `CustomScan` type\n    * Add the new `CustomScan` type, hidden behind a GUC\n    * Filter Paths to those which represent `count(*)` queries\n    * Extract `quals` during `CustomPath` generation\n* Replace `Aggrefs` in target lists with `FuncExprs` while producing a\n`CustomPlan`\n* Execute a `count(*)` aggregate by pushing down a `value_count`\naggregate on the `ctid`\n\n## Tests\n\nAdded tests to validate that:\n* the GUC properly controls usage\n* the scan does not trigger for unsupported aggregates, tables without a\n`bm25` index, or group-bys (for now)",
          "timestamp": "2025-07-16T09:12:24-07:00",
          "tree_id": "69b043a9363fcf6ce2de468c97d14e41f593f017",
          "url": "https://github.com/paradedb/paradedb/commit/f7c13c858851200e8ab5395779f821ca484cda0d"
        },
        "date": 1752683373932,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 330.9111602214654,
            "unit": "median tps",
            "extra": "avg tps: 329.92167490019744, max tps: 537.8537178898554, count: 54969"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2172.65116421297,
            "unit": "median tps",
            "extra": "avg tps: 2177.7799334667047, max tps: 2557.0574311107525, count: 54969"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 297.67917720904876,
            "unit": "median tps",
            "extra": "avg tps: 298.6746436727678, max tps: 521.0461764487536, count: 54969"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 300.5033144677903,
            "unit": "median tps",
            "extra": "avg tps: 298.9508004809313, max tps: 445.0016062332977, count: 54969"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 142.3523680439219,
            "unit": "median tps",
            "extra": "avg tps: 142.28634535921998, max tps: 160.0348674824421, count: 109938"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 128.57636426402675,
            "unit": "median tps",
            "extra": "avg tps: 128.79681433520523, max tps: 142.46938263004637, count: 54969"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 5.080037678584389,
            "unit": "median tps",
            "extra": "avg tps: 8.826804752925225, max tps: 1010.3071535808316, count: 54969"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c779dbb72178c1aa0e14ad94c72eeb9937251acd",
          "message": "feat: a background merger for large layers (#2743)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nLaunches Postgres [dynamic background\nworkers](https://docs.rs/pgrx/latest/pgrx/bgworkers/struct.DynamicBackgroundWorker.html)\nto merge large layers in the background.\n\nThis is configured by a new index setting, `background_layer_sizes`. Any\nlayers specified here will be merged in the background.\n\n## Why\n\nWrite throughput, and create more balanced indexes with fewer segments.\n\n## How\n\n1. The default (foreground) `layer_sizes` is now `10kb`, `100kb`, `1mb`\n2. The default `background_layer_sizes` is `10mb`, `100mb`, `1gb`,\n`10gb`, `100gb`, `1tb`\n3. After `aminsert` merges in the foreground, it checks to see if there\nare enough candidates for a background merge. If so, it spawns a dynamic\nbackground worker process to do the merge.\n4. `amvacuumcleanup` can also spawn a background worker, allowing the\nuser to rebalance their index with a `VACUUM`.\n\nAdditionally, I've tweaked merge policy to make it smarter:\n\n1. Terminate a merge early if we predict that, after the merge, we will\nend up with fewer than `target_segment_count` segments.\n2. Set the max layer size as byte size of index divided by\n`target_segment_count`. Discard all layer sizes above that, which avoids\nthe problem of merging too many segments into one giant segment.\n\nThis has allowed us to delete some code:\n\n1. `force_merge` is deprecated\n2. No longer need to store the segments created by an index build and\navoid merging them, since we just do expensive merges in the background\n\n## Tests\n\nAdded a new stressgres `.toml` file that configures the layer\nsizes/threshold, which triggers background merging.\n\n---------\n\nSigned-off-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>\nCo-authored-by: Philippe Noël <21990816+philippemnoel@users.noreply.github.com>\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-16T12:44:23-04:00",
          "tree_id": "153c406e456a638a6b68ca9123210bbd498d66a5",
          "url": "https://github.com/paradedb/paradedb/commit/c779dbb72178c1aa0e14ad94c72eeb9937251acd"
        },
        "date": 1752685298473,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1208.0354635097945,
            "unit": "median tps",
            "extra": "avg tps: 1206.4410751573776, max tps: 1246.9093546096562, count: 55119"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2728.6415683566192,
            "unit": "median tps",
            "extra": "avg tps: 2720.6510578172797, max tps: 2767.966283109858, count: 55119"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1201.7330530861334,
            "unit": "median tps",
            "extra": "avg tps: 1198.897374649925, max tps: 1207.797083605834, count: 55119"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1042.902855021601,
            "unit": "median tps",
            "extra": "avg tps: 1039.4849084799466, max tps: 1050.2722969022095, count: 55119"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 168.85197205251944,
            "unit": "median tps",
            "extra": "avg tps: 173.53358419604928, max tps: 183.05003792102082, count: 110238"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 149.79281249322253,
            "unit": "median tps",
            "extra": "avg tps: 150.34212698643736, max tps: 154.83215221855724, count: 55119"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 42.310029001092055,
            "unit": "median tps",
            "extra": "avg tps: 48.50842428049031, max tps: 779.5635847140054, count: 55119"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "d197630155f55d13eea0a81841951645a367a5f7",
          "message": "test: Make GUCs a tested property, and add proptests for the aggregate custom scan (#2788)\n\n## What\n\nMove the GUCs that are in use into a test property, which reduces\nruntime while allowing for testing arbitrary combinations of GUCs.\n\nAdditionally, added proptests for the aggregate custom scan by:\n* Adding its GUC to the generated set\n* Expanding the `generated_single_relation` test to use `COUNT(*)` in\nits target list.\n\n## Why\n\nTo add additional test coverage for #2763.",
          "timestamp": "2025-07-16T10:57:16-07:00",
          "tree_id": "6a92b62b640f7a0b2dc7e6507966b75f3bd00594",
          "url": "https://github.com/paradedb/paradedb/commit/d197630155f55d13eea0a81841951645a367a5f7"
        },
        "date": 1752689572238,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1232.79691495007,
            "unit": "median tps",
            "extra": "avg tps: 1228.3090654304374, max tps: 1238.4637743778426, count: 55128"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2776.989134830413,
            "unit": "median tps",
            "extra": "avg tps: 2763.7941970742245, max tps: 2796.2593347019438, count: 55128"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1226.3711804743555,
            "unit": "median tps",
            "extra": "avg tps: 1222.8106965527497, max tps: 1231.0797813540948, count: 55128"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1021.2117073605026,
            "unit": "median tps",
            "extra": "avg tps: 1009.4873950060686, max tps: 1034.5354264583887, count: 55128"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 171.89605644805638,
            "unit": "median tps",
            "extra": "avg tps: 173.15487975133402, max tps: 180.4668051232225, count: 110256"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 152.39942396934728,
            "unit": "median tps",
            "extra": "avg tps: 151.03715323983516, max tps: 154.02371908111525, count: 55128"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 49.87543201351079,
            "unit": "median tps",
            "extra": "avg tps: 50.88819643787881, max tps: 748.9722228671704, count: 55128"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "58f6742b2cde46fe2c15077e59a0d5b091ba6000",
          "message": "chore: Upgrade to `0.17.0` (#2870)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-16T19:49:53-04:00",
          "tree_id": "b77118d365b31a4f3478b7c0571cf1f7e9f8a5b2",
          "url": "https://github.com/paradedb/paradedb/commit/58f6742b2cde46fe2c15077e59a0d5b091ba6000"
        },
        "date": 1752710829344,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1258.3634672686396,
            "unit": "median tps",
            "extra": "avg tps: 1252.4765769847932, max tps: 1260.555691246181, count: 55161"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2637.4363518177065,
            "unit": "median tps",
            "extra": "avg tps: 2636.9434755766333, max tps: 2683.8522153066915, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1247.7712730589403,
            "unit": "median tps",
            "extra": "avg tps: 1241.723333001524, max tps: 1250.4847908825875, count: 55161"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1061.0642151901386,
            "unit": "median tps",
            "extra": "avg tps: 1054.4104553841385, max tps: 1069.3335397045223, count: 55161"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 173.26323740486797,
            "unit": "median tps",
            "extra": "avg tps: 172.4132669004323, max tps: 177.05807720913137, count: 110322"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 155.023010459012,
            "unit": "median tps",
            "extra": "avg tps: 153.44878294108676, max tps: 155.45973538018717, count: 55161"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 28.836449623973515,
            "unit": "median tps",
            "extra": "avg tps: 30.66624333407178, max tps: 784.8541976357053, count: 55161"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "86bc2b092d2857a997cd05af4b554ac96ba225fd",
          "message": "fix: Fix `rescan` for top-n (#2868)\n\n## What\n\nComments in both `Normal` and `TopN` scans claimed that their search\nresults would be reset by `PdbScanState`, but this was incorrect: they\nwere local variables in the struct, and needed to be reset locally.\n\n## Why\n\nFixes issue detected by the prop tests and repro'd by @eeeebbbbrrrr in\n#2751.\n\n## Tests\n\nNew regression test from #2751: thanks @eeeebbbbrrrr!\n\n---------\n\nCo-authored-by: Eric B. Ridge <eebbrr@paradedb.com>",
          "timestamp": "2025-07-17T08:59:32-07:00",
          "tree_id": "ccc9162bb96008badcb3046612d16394604ed6f7",
          "url": "https://github.com/paradedb/paradedb/commit/86bc2b092d2857a997cd05af4b554ac96ba225fd"
        },
        "date": 1752768913065,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1246.9269240074839,
            "unit": "median tps",
            "extra": "avg tps: 1241.4896151905957, max tps: 1251.2348455074155, count: 54877"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2790.053911501425,
            "unit": "median tps",
            "extra": "avg tps: 2779.329643640563, max tps: 2805.869410750366, count: 54877"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1242.8435857271666,
            "unit": "median tps",
            "extra": "avg tps: 1236.9044241867246, max tps: 1245.088001655496, count: 54877"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 980.8910714797896,
            "unit": "median tps",
            "extra": "avg tps: 974.6635948777052, max tps: 1014.4512526021379, count: 54877"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 170.60048264847552,
            "unit": "median tps",
            "extra": "avg tps: 179.00815440145536, max tps: 192.70584414080597, count: 109754"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 149.3005028495966,
            "unit": "median tps",
            "extra": "avg tps: 148.05838627043275, max tps: 162.39627008246873, count: 54877"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 37.71610939171841,
            "unit": "median tps",
            "extra": "avg tps: 40.15324910471507, max tps: 760.5169994562303, count: 54877"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5772be0d3dea751c3609729efcc66cc69d9d30ee",
          "message": "chore: Remove debug output in aggregate scan (#2876)\n\n## What\n\nRemove a stray `println`.\n\n## Why\n\nIt's not doing anyone any good.",
          "timestamp": "2025-07-17T09:46:08-07:00",
          "tree_id": "06a002186c2a701283d73854f64c4225a08aa1a8",
          "url": "https://github.com/paradedb/paradedb/commit/5772be0d3dea751c3609729efcc66cc69d9d30ee"
        },
        "date": 1752771706812,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1275.7235229655867,
            "unit": "median tps",
            "extra": "avg tps: 1267.4639562878053, max tps: 1285.8281186229488, count: 55255"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2691.76666892226,
            "unit": "median tps",
            "extra": "avg tps: 2693.1131080980194, max tps: 2731.4857478558024, count: 55255"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1183.8335245747842,
            "unit": "median tps",
            "extra": "avg tps: 1183.3916865068961, max tps: 1201.9999424528216, count: 55255"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1016.9156509271561,
            "unit": "median tps",
            "extra": "avg tps: 1014.4520531017663, max tps: 1026.7108755749962, count: 55255"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 161.6289975713852,
            "unit": "median tps",
            "extra": "avg tps: 172.57261080966006, max tps: 188.67077346504232, count: 110510"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 140.41029090970167,
            "unit": "median tps",
            "extra": "avg tps: 139.28778265321444, max tps: 140.9882793596449, count: 55255"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 34.127194813166504,
            "unit": "median tps",
            "extra": "avg tps: 37.059012597733066, max tps: 737.9545523309401, count: 55255"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "16307a200509cd31b42c1338f3c5b6e097a77fbf",
          "message": "fix: issue #2844 - Use `paradedb.with_index()` when necessary (#2879)\n\n# Ticket(s) Closed\n\n- Closes #2844\n\n## What\n\nWhen the right-hand-side of the `@@@` operator is a complex expression\nthat can't be evaluated to a `T_Const` during planning, we need to\nrewrite it to be a call to our `paradedb.with_index(<indexrelid>,\n<rhs>)` so that it can be properly used in Filter contexts during\nexecution.\n\nThis seems to come up, at least, during RLS rule evaluation if those\nrules use our `@@@` operator.\n\n## Why\n\nSo long as the right-hand-side of `@@@` is a `SearchQueryInput`, we need\nto be able to execute it when Postgres wants us to, whether that's\nduring a scan or, as in this case, a filter being run as part of RLS\nevaluation.\n\n## How\n\nWrapping Postgres expression nodes!\n\n## Tests\n\nI used the re-create the OP from #2844 put together as a regression\ntest. I seem to be lacking the creative energy today to reduce the test\ndown to its simplest form that doesn't require a complicated RLS\nconfiguration.",
          "timestamp": "2025-07-18T13:21:25-04:00",
          "tree_id": "f2e8c7ca2ce45eefd03b85ff45d56f0481ebae1a",
          "url": "https://github.com/paradedb/paradedb/commit/16307a200509cd31b42c1338f3c5b6e097a77fbf"
        },
        "date": 1752860221374,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1219.8935673009012,
            "unit": "median tps",
            "extra": "avg tps: 1215.2523246262278, max tps: 1224.0012521428505, count: 55078"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2923.7198640999736,
            "unit": "median tps",
            "extra": "avg tps: 2907.378868072173, max tps: 2944.1100398541594, count: 55078"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1239.869549404189,
            "unit": "median tps",
            "extra": "avg tps: 1233.2906111684024, max tps: 1242.2240863168583, count: 55078"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1033.4249411391309,
            "unit": "median tps",
            "extra": "avg tps: 1025.7617725178384, max tps: 1052.9816156688282, count: 55078"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 163.87020591205558,
            "unit": "median tps",
            "extra": "avg tps: 166.47466553054034, max tps: 172.15221781836465, count: 110156"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 157.93152964244683,
            "unit": "median tps",
            "extra": "avg tps: 156.43678479197553, max tps: 158.516816002322, count: 55078"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 34.58616595823601,
            "unit": "median tps",
            "extra": "avg tps: 41.78505249654763, max tps: 707.6835324165057, count: 55078"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "8b45b24d47a7cac36696bae2d8505c750a7ee801",
          "message": "test: added more join regression tests + improved when to use Join quals (#2808)\n\n# Ticket(s) Closed\n\n- Closes #2807\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-18T10:40:03-07:00",
          "tree_id": "fb63bd81696cd27d03b6d5724551c3ff8fd59613",
          "url": "https://github.com/paradedb/paradedb/commit/8b45b24d47a7cac36696bae2d8505c750a7ee801"
        },
        "date": 1752861339896,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1205.4208568896743,
            "unit": "median tps",
            "extra": "avg tps: 1207.1144608225204, max tps: 1253.3580580706457, count: 55215"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2699.2008447227113,
            "unit": "median tps",
            "extra": "avg tps: 2711.853278873035, max tps: 2849.940958762393, count: 55215"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1219.1244938605862,
            "unit": "median tps",
            "extra": "avg tps: 1217.2018261189007, max tps: 1255.3973832199456, count: 55215"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1007.9035544867553,
            "unit": "median tps",
            "extra": "avg tps: 994.4996902478134, max tps: 1018.646029954793, count: 55215"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 164.7726173113627,
            "unit": "median tps",
            "extra": "avg tps: 175.0111704805521, max tps: 191.37880673840797, count: 110430"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 143.50312481472966,
            "unit": "median tps",
            "extra": "avg tps: 144.42915709607087, max tps: 152.85131249629617, count: 55215"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 21.796006548150203,
            "unit": "median tps",
            "extra": "avg tps: 26.411693402303865, max tps: 767.2247715396436, count: 55215"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "77c6cd1aeb5f5c03bba892a38cd792a113cfbd39",
          "message": "chore: move code around (#2889)\n\n## What\n\nThis relocates the `src/boostrap/create_bm25.rs` source to\n`src/api/admin.rs`, which I believe is a more sensibile location and\nname.\n\nAdditionally it moves the `#[pg_extern] schema()` function from\n`src/api/builder_fns.rs` to this new(ly renamed) `admin.rs`, as it's an\nadministrative function, not a query builder function.\n\n## Why\n\nTrying to better organize things\n\n## How\n\n## Tests\n\nNo functional changes here.",
          "timestamp": "2025-07-22T12:39:21-04:00",
          "tree_id": "1ab036752fc8adf7ad2757741d4e274ab0e73c64",
          "url": "https://github.com/paradedb/paradedb/commit/77c6cd1aeb5f5c03bba892a38cd792a113cfbd39"
        },
        "date": 1753203295706,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1223.7565385311345,
            "unit": "median tps",
            "extra": "avg tps: 1218.0213060236151, max tps: 1227.936233405042, count: 55046"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2700.78007463258,
            "unit": "median tps",
            "extra": "avg tps: 2699.6694861410824, max tps: 2741.4607643979557, count: 55046"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1236.1452401072272,
            "unit": "median tps",
            "extra": "avg tps: 1229.496712311209, max tps: 1239.6467823315336, count: 55046"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1014.8156984151757,
            "unit": "median tps",
            "extra": "avg tps: 1008.5281916773866, max tps: 1024.4658788644676, count: 55046"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 173.05159585579165,
            "unit": "median tps",
            "extra": "avg tps: 177.87356913818854, max tps: 186.77714521969176, count: 110092"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 145.05097473742177,
            "unit": "median tps",
            "extra": "avg tps: 144.79626064904642, max tps: 150.4990918608882, count: 55046"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 41.61645133167983,
            "unit": "median tps",
            "extra": "avg tps: 50.94915649313984, max tps: 810.5356668114823, count: 55046"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "1e26a38533fa872a935955128b2ecd08b3febf66",
          "message": "perf: Skip computing scores if not requested for top-n field queries (#2892)\n\n## What\n\n`SearchIndexReader::{top_by_field_in_segments,\ntop_by_string_field_in_segments}` were not using\n`SearchIndexReader::need_scores`, and were instead universally enabling\nscores.\n\nUse the `enable_scoring` helper and `self.need_scores` to skip computing\nscores where possible.\n\n## Why\n\nComputing scores requires field norms, which ([if they have not been\ndisabled](https://docs.paradedb.com/documentation/indexing/record)) can\ntake time to load and use.",
          "timestamp": "2025-07-22T15:58:56-07:00",
          "tree_id": "2a41c9e06be04ef92fed2b265dc3f90340fb0e37",
          "url": "https://github.com/paradedb/paradedb/commit/1e26a38533fa872a935955128b2ecd08b3febf66"
        },
        "date": 1753226071223,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1230.540494198395,
            "unit": "median tps",
            "extra": "avg tps: 1228.5048266499005, max tps: 1237.4384718998551, count: 55159"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2852.4112867588165,
            "unit": "median tps",
            "extra": "avg tps: 2830.4466073086696, max tps: 2859.4945005732516, count: 55159"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1263.1318840772733,
            "unit": "median tps",
            "extra": "avg tps: 1256.104347610509, max tps: 1265.4076108560569, count: 55159"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1059.6132992501766,
            "unit": "median tps",
            "extra": "avg tps: 1046.5864871514912, max tps: 1065.0338273218633, count: 55159"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 177.22306197677597,
            "unit": "median tps",
            "extra": "avg tps: 182.39038309700967, max tps: 192.61772313668288, count: 110318"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 153.03500347603702,
            "unit": "median tps",
            "extra": "avg tps: 152.66859364683089, max tps: 154.5240866737964, count: 55159"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 41.89032597054898,
            "unit": "median tps",
            "extra": "avg tps: 52.69106112926876, max tps: 705.1122045051028, count: 55159"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753281702768,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1238.1554277707633,
            "unit": "median tps",
            "extra": "avg tps: 1227.86208954594, max tps: 1241.154754241053, count: 55205"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2775.393228591363,
            "unit": "median tps",
            "extra": "avg tps: 2754.786799935381, max tps: 2791.255540404496, count: 55205"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1245.2597555285251,
            "unit": "median tps",
            "extra": "avg tps: 1240.5476385436898, max tps: 1249.3464526845712, count: 55205"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1046.0873249629806,
            "unit": "median tps",
            "extra": "avg tps: 1041.083569661939, max tps: 1061.436176848277, count: 55205"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 180.18424545496453,
            "unit": "median tps",
            "extra": "avg tps: 180.73226397279493, max tps: 185.17380010463705, count: 110410"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 158.37373785019372,
            "unit": "median tps",
            "extra": "avg tps: 156.96237973840113, max tps: 158.9642442931985, count: 55205"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 42.96335750849179,
            "unit": "median tps",
            "extra": "avg tps: 49.423641971005026, max tps: 901.1282125220777, count: 55205"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753288159284,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1238.629942194621,
            "unit": "median tps",
            "extra": "avg tps: 1236.555006221168, max tps: 1245.9307340737812, count: 55213"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2634.2268220939786,
            "unit": "median tps",
            "extra": "avg tps: 2638.332278912309, max tps: 2673.94474843985, count: 55213"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1205.51400474282,
            "unit": "median tps",
            "extra": "avg tps: 1204.2073079390982, max tps: 1228.886654891459, count: 55213"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1049.680852658833,
            "unit": "median tps",
            "extra": "avg tps: 1043.8969711508491, max tps: 1066.1527017486392, count: 55213"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 177.31748109191562,
            "unit": "median tps",
            "extra": "avg tps: 177.40880578103796, max tps: 181.18959983070656, count: 110426"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 155.18906055263136,
            "unit": "median tps",
            "extra": "avg tps: 153.63754183082375, max tps: 156.11638100409218, count: 55213"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 68.86646114848666,
            "unit": "median tps",
            "extra": "avg tps: 66.84238445452274, max tps: 875.1915575521593, count: 55213"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753290611811,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1200.6728036966936,
            "unit": "median tps",
            "extra": "avg tps: 1198.0763767473193, max tps: 1204.6454556245822, count: 55136"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2629.8727002868527,
            "unit": "median tps",
            "extra": "avg tps: 2635.5311296086184, max tps: 2685.437524923138, count: 55136"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1210.4335810192874,
            "unit": "median tps",
            "extra": "avg tps: 1206.0801244842166, max tps: 1212.945869241844, count: 55136"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1002.3911259206418,
            "unit": "median tps",
            "extra": "avg tps: 995.3448686130946, max tps: 1012.7575803111628, count: 55136"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 172.10123218915396,
            "unit": "median tps",
            "extra": "avg tps: 184.24843853060412, max tps: 200.49867705043948, count: 110272"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 148.6824499344657,
            "unit": "median tps",
            "extra": "avg tps: 148.5645478048296, max tps: 158.62843959215155, count: 55136"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 56.09449838219721,
            "unit": "median tps",
            "extra": "avg tps: 59.27040622953118, max tps: 724.8220380691031, count: 55136"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753302209330,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1252.5169226073353,
            "unit": "median tps",
            "extra": "avg tps: 1246.330029620314, max tps: 1255.089833959128, count: 55108"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2737.556275276938,
            "unit": "median tps",
            "extra": "avg tps: 2727.047491850745, max tps: 2755.61710933603, count: 55108"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1223.3168372780028,
            "unit": "median tps",
            "extra": "avg tps: 1219.4318917505884, max tps: 1229.5913374441122, count: 55108"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1015.3853129226604,
            "unit": "median tps",
            "extra": "avg tps: 1012.696617236245, max tps: 1024.4406600463392, count: 55108"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 164.33112185338678,
            "unit": "median tps",
            "extra": "avg tps: 173.6365213224056, max tps: 187.061028555413, count: 110216"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 147.42163227863546,
            "unit": "median tps",
            "extra": "avg tps: 147.3451486976374, max tps: 148.45725528950152, count: 55108"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 27.115828160118358,
            "unit": "median tps",
            "extra": "avg tps: 30.03439819317569, max tps: 511.4085008366643, count: 55108"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753309902992,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1252.2567279984255,
            "unit": "median tps",
            "extra": "avg tps: 1249.269506224045, max tps: 1263.206345071596, count: 55229"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2861.7697504274424,
            "unit": "median tps",
            "extra": "avg tps: 2854.1541001673713, max tps: 2912.1637752705883, count: 55229"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1142.7027765750634,
            "unit": "median tps",
            "extra": "avg tps: 1143.6835745818566, max tps: 1225.951330533985, count: 55229"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1113.4110259110475,
            "unit": "median tps",
            "extra": "avg tps: 1103.666734927372, max tps: 1122.0492349805327, count: 55229"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 156.7159521443844,
            "unit": "median tps",
            "extra": "avg tps: 154.86970133847717, max tps: 160.02920620301865, count: 110458"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 139.69198310988406,
            "unit": "median tps",
            "extra": "avg tps: 139.12655046601074, max tps: 140.81101743345263, count: 55229"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 58.462333354397636,
            "unit": "median tps",
            "extra": "avg tps: 63.11709465803476, max tps: 740.605237412118, count: 55229"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753373358934,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1244.5195147714953,
            "unit": "median tps",
            "extra": "avg tps: 1237.359347446745, max tps: 1259.6831022487077, count: 55200"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2668.240362712437,
            "unit": "median tps",
            "extra": "avg tps: 2667.2172797030516, max tps: 2700.135534466933, count: 55200"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1215.998651188154,
            "unit": "median tps",
            "extra": "avg tps: 1211.8661383615563, max tps: 1221.6790962411592, count: 55200"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 983.2384299970998,
            "unit": "median tps",
            "extra": "avg tps: 980.053529610189, max tps: 1004.293977384428, count: 55200"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 177.3890745195235,
            "unit": "median tps",
            "extra": "avg tps: 178.79647164323808, max tps: 183.37459048487014, count: 110400"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 160.38955893384625,
            "unit": "median tps",
            "extra": "avg tps: 159.17565403604735, max tps: 161.28985050433002, count: 55200"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 25.514029519310483,
            "unit": "median tps",
            "extra": "avg tps: 30.845609913349453, max tps: 685.7948568128918, count: 55200"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753387536346,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1240.5658768194517,
            "unit": "median tps",
            "extra": "avg tps: 1233.4148417659956, max tps: 1243.476850638039, count: 55161"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2798.616239714703,
            "unit": "median tps",
            "extra": "avg tps: 2792.142250744209, max tps: 2833.2984072588993, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1226.755335397775,
            "unit": "median tps",
            "extra": "avg tps: 1221.206671864781, max tps: 1228.6533468321475, count: 55161"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 964.1148463868361,
            "unit": "median tps",
            "extra": "avg tps: 961.622425232449, max tps: 1005.2328232307295, count: 55161"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 180.63642155705824,
            "unit": "median tps",
            "extra": "avg tps: 180.41291733877486, max tps: 184.29735092654414, count: 110322"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 158.53164235163686,
            "unit": "median tps",
            "extra": "avg tps: 157.74593586641126, max tps: 159.198790683043, count: 55161"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 26.566678139286207,
            "unit": "median tps",
            "extra": "avg tps: 28.386643336014828, max tps: 839.6030692529799, count: 55161"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753472973308,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1234.4100534183406,
            "unit": "median tps",
            "extra": "avg tps: 1230.8500595782682, max tps: 1238.0153682746184, count: 55107"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2829.0254851645254,
            "unit": "median tps",
            "extra": "avg tps: 2814.8638304958454, max tps: 2851.618999770379, count: 55107"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1192.754252482914,
            "unit": "median tps",
            "extra": "avg tps: 1189.1415569692738, max tps: 1198.9740542245322, count: 55107"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1056.9409621156656,
            "unit": "median tps",
            "extra": "avg tps: 1048.6374987448025, max tps: 1063.1850928737374, count: 55107"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 170.1818900147396,
            "unit": "median tps",
            "extra": "avg tps: 169.72540248979723, max tps: 174.51143281810874, count: 110214"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 159.47310371960867,
            "unit": "median tps",
            "extra": "avg tps: 158.71738791870166, max tps: 160.45342108666296, count: 55107"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 32.890227071108846,
            "unit": "median tps",
            "extra": "avg tps: 44.365017018379675, max tps: 860.5437259478028, count: 55107"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753474720747,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1183.0820018228355,
            "unit": "median tps",
            "extra": "avg tps: 1182.78902693599, max tps: 1204.182739065711, count: 55112"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2898.2327354805866,
            "unit": "median tps",
            "extra": "avg tps: 2882.7265718714116, max tps: 2911.16496714643, count: 55112"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1245.5124026399365,
            "unit": "median tps",
            "extra": "avg tps: 1241.0059310440374, max tps: 1248.3289517692967, count: 55112"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1026.3484377843288,
            "unit": "median tps",
            "extra": "avg tps: 1019.6983226212092, max tps: 1036.650023797327, count: 55112"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 167.66235198412568,
            "unit": "median tps",
            "extra": "avg tps: 171.65946184927435, max tps: 178.26891895868187, count: 110224"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 166.89626050887705,
            "unit": "median tps",
            "extra": "avg tps: 165.42062648555873, max tps: 167.6168015029024, count: 55112"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 38.30419649634657,
            "unit": "median tps",
            "extra": "avg tps: 46.04197472147255, max tps: 728.5454299073727, count: 55112"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753505873715,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1262.4352724990931,
            "unit": "median tps",
            "extra": "avg tps: 1256.9180093133273, max tps: 1265.8394460695488, count: 55066"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2857.589053398331,
            "unit": "median tps",
            "extra": "avg tps: 2841.518659360359, max tps: 2890.139889902185, count: 55066"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1159.7146184978524,
            "unit": "median tps",
            "extra": "avg tps: 1159.0900635596356, max tps: 1195.2169874892768, count: 55066"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1001.8609731465967,
            "unit": "median tps",
            "extra": "avg tps: 991.7827774809571, max tps: 1011.0682415841151, count: 55066"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 173.07482488747087,
            "unit": "median tps",
            "extra": "avg tps: 172.38069422971336, max tps: 175.055272776385, count: 110132"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 162.31999904129196,
            "unit": "median tps",
            "extra": "avg tps: 161.0498124524514, max tps: 164.93309340182114, count: 55066"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 41.41554673900646,
            "unit": "median tps",
            "extra": "avg tps: 44.62989377196943, max tps: 797.4182785812652, count: 55066"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753710256335,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1205.6687834671427,
            "unit": "median tps",
            "extra": "avg tps: 1200.2197387295819, max tps: 1211.7128835147346, count: 55027"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2684.207080380837,
            "unit": "median tps",
            "extra": "avg tps: 2682.255487575513, max tps: 2723.242152934909, count: 55027"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1149.2470996538636,
            "unit": "median tps",
            "extra": "avg tps: 1146.2647132885122, max tps: 1152.2018716634914, count: 55027"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 976.4771829241769,
            "unit": "median tps",
            "extra": "avg tps: 966.469595592069, max tps: 984.1878426743787, count: 55027"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 164.0261793131912,
            "unit": "median tps",
            "extra": "avg tps: 174.10896361968844, max tps: 188.44663618975315, count: 110054"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 140.9371377365625,
            "unit": "median tps",
            "extra": "avg tps: 140.73834315171092, max tps: 147.80820061303706, count: 55027"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 38.142171263215296,
            "unit": "median tps",
            "extra": "avg tps: 47.141362329482334, max tps: 686.3606413353833, count: 55027"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753727833529,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1195.548530586214,
            "unit": "median tps",
            "extra": "avg tps: 1192.0313469796174, max tps: 1208.2612689393445, count: 54788"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2843.6677409247313,
            "unit": "median tps",
            "extra": "avg tps: 2826.3203963345127, max tps: 2875.091288971094, count: 54788"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1191.7276910890562,
            "unit": "median tps",
            "extra": "avg tps: 1184.1378507883137, max tps: 1198.3971826484694, count: 54788"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1039.8604501225275,
            "unit": "median tps",
            "extra": "avg tps: 1033.98625261147, max tps: 1044.277277745703, count: 54788"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 172.70983432047333,
            "unit": "median tps",
            "extra": "avg tps: 171.39048742991992, max tps: 174.54151816124912, count: 109576"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 147.68917183427695,
            "unit": "median tps",
            "extra": "avg tps: 147.44573261590511, max tps: 149.6666101425769, count: 54788"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 42.18274618924642,
            "unit": "median tps",
            "extra": "avg tps: 46.74853584464373, max tps: 712.6151407913734, count: 54788"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753805209206,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1197.125121655356,
            "unit": "median tps",
            "extra": "avg tps: 1193.7666752400346, max tps: 1206.1235095392735, count: 55028"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2817.0853427709276,
            "unit": "median tps",
            "extra": "avg tps: 2810.434741181833, max tps: 2857.3190497664236, count: 55028"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1201.7194336683326,
            "unit": "median tps",
            "extra": "avg tps: 1197.7695370995657, max tps: 1206.0295571567904, count: 55028"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1025.6183129126846,
            "unit": "median tps",
            "extra": "avg tps: 1019.9626951578614, max tps: 1032.7679944425233, count: 55028"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 175.70418824145534,
            "unit": "median tps",
            "extra": "avg tps: 174.93725450645425, max tps: 177.4740070136991, count: 110056"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 152.53223596814516,
            "unit": "median tps",
            "extra": "avg tps: 151.92118561447242, max tps: 152.7733591318786, count: 55028"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 35.36242464553997,
            "unit": "median tps",
            "extra": "avg tps: 38.64614378435226, max tps: 795.945770622756, count: 55028"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753812442520,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1214.4949836703936,
            "unit": "median tps",
            "extra": "avg tps: 1209.602177928485, max tps: 1218.050186199778, count: 55131"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2644.069156570637,
            "unit": "median tps",
            "extra": "avg tps: 2639.3128504588744, max tps: 2678.251951543827, count: 55131"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1151.9088210501207,
            "unit": "median tps",
            "extra": "avg tps: 1149.4039224742817, max tps: 1155.466979818265, count: 55131"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 977.6633037015969,
            "unit": "median tps",
            "extra": "avg tps: 975.8326991406595, max tps: 990.2949535387471, count: 55131"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 174.4713240770292,
            "unit": "median tps",
            "extra": "avg tps: 177.94532151929957, max tps: 185.69075026828233, count: 110262"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 150.95789928970035,
            "unit": "median tps",
            "extra": "avg tps: 150.19040404981467, max tps: 151.27345778600704, count: 55131"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 42.97410039197835,
            "unit": "median tps",
            "extra": "avg tps: 47.36188808647127, max tps: 632.7067638251174, count: 55131"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753830576275,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1157.8279574946623,
            "unit": "median tps",
            "extra": "avg tps: 1155.2060681058524, max tps: 1205.44611048237, count: 55156"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2860.017032200313,
            "unit": "median tps",
            "extra": "avg tps: 2848.897073335419, max tps: 2896.994012714605, count: 55156"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1215.1677920125094,
            "unit": "median tps",
            "extra": "avg tps: 1210.1000249942097, max tps: 1221.9218704027346, count: 55156"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 991.8055036260553,
            "unit": "median tps",
            "extra": "avg tps: 987.7711751251272, max tps: 996.2624715249506, count: 55156"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 162.54882238205022,
            "unit": "median tps",
            "extra": "avg tps: 161.94906477821, max tps: 167.7227323426112, count: 110312"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 164.4344261520084,
            "unit": "median tps",
            "extra": "avg tps: 162.24432312432683, max tps: 165.40538997725375, count: 55156"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 29.267993410710854,
            "unit": "median tps",
            "extra": "avg tps: 34.41086426151163, max tps: 732.5282847483949, count: 55156"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753899757287,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1224.3183231568667,
            "unit": "median tps",
            "extra": "avg tps: 1219.1148298074527, max tps: 1230.4728671794244, count: 55113"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2750.3435928116896,
            "unit": "median tps",
            "extra": "avg tps: 2743.830346521798, max tps: 2780.1489849082723, count: 55113"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1196.2735803258995,
            "unit": "median tps",
            "extra": "avg tps: 1191.9035632094171, max tps: 1198.3372168877518, count: 55113"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 993.703583249636,
            "unit": "median tps",
            "extra": "avg tps: 985.9929441082623, max tps: 1007.1682764279903, count: 55113"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 174.3792715384788,
            "unit": "median tps",
            "extra": "avg tps: 180.12396716730476, max tps: 192.81633984080537, count: 110226"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 151.84381659041836,
            "unit": "median tps",
            "extra": "avg tps: 151.72074621518726, max tps: 153.69448169766207, count: 55113"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 28.980884227547413,
            "unit": "median tps",
            "extra": "avg tps: 35.58226158459883, max tps: 850.7090660065164, count: 55113"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753909949933,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1140.0872410681377,
            "unit": "median tps",
            "extra": "avg tps: 1136.7722364102333, max tps: 1159.7422105227379, count: 55038"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2715.8907504572862,
            "unit": "median tps",
            "extra": "avg tps: 2713.629148588916, max tps: 2752.764208007478, count: 55038"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1205.0543995872865,
            "unit": "median tps",
            "extra": "avg tps: 1197.0535786522455, max tps: 1209.8892122025402, count: 55038"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 996.49091040519,
            "unit": "median tps",
            "extra": "avg tps: 991.4913068321672, max tps: 1012.2445315323272, count: 55038"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 167.5351959746311,
            "unit": "median tps",
            "extra": "avg tps: 167.50884165576053, max tps: 171.7458391246598, count: 110076"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 168.24056023936464,
            "unit": "median tps",
            "extra": "avg tps: 166.2083902279929, max tps: 169.93373015943885, count: 55038"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 32.50873243503115,
            "unit": "median tps",
            "extra": "avg tps: 41.09825739701851, max tps: 763.3313919271599, count: 55038"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753985484386,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1129.0548230661,
            "unit": "median tps",
            "extra": "avg tps: 1127.6332282719657, max tps: 1133.8254259239743, count: 55399"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2856.8604317116506,
            "unit": "median tps",
            "extra": "avg tps: 2844.568466056407, max tps: 2871.3081885321467, count: 55399"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1211.3925504863,
            "unit": "median tps",
            "extra": "avg tps: 1200.2764751156978, max tps: 1214.1692289206874, count: 55399"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1028.8823400894692,
            "unit": "median tps",
            "extra": "avg tps: 1015.7441581826694, max tps: 1035.240930330601, count: 55399"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 164.03311537172132,
            "unit": "median tps",
            "extra": "avg tps: 163.06074219788866, max tps: 168.28674997862043, count: 110798"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 160.72913221767894,
            "unit": "median tps",
            "extra": "avg tps: 159.39708644031847, max tps: 163.6570397369099, count: 55399"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 37.90242491473256,
            "unit": "median tps",
            "extra": "avg tps: 48.286956174563905, max tps: 845.5751475317239, count: 55399"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753992664399,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1170.9467534803023,
            "unit": "median tps",
            "extra": "avg tps: 1164.5365378296779, max tps: 1174.4040618723277, count: 55247"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2730.8253920072784,
            "unit": "median tps",
            "extra": "avg tps: 2722.4544848510345, max tps: 2771.7210451647024, count: 55247"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1160.7941764571358,
            "unit": "median tps",
            "extra": "avg tps: 1156.9486822310096, max tps: 1163.1190779973692, count: 55247"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 910.040485512809,
            "unit": "median tps",
            "extra": "avg tps: 910.3914678216827, max tps: 972.5544576311096, count: 55247"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 168.97298491072962,
            "unit": "median tps",
            "extra": "avg tps: 170.36406450294723, max tps: 175.0403453873774, count: 110494"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 153.97812524110438,
            "unit": "median tps",
            "extra": "avg tps: 153.01017957769324, max tps: 154.49709374428488, count: 55247"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 29.16283289193372,
            "unit": "median tps",
            "extra": "avg tps: 34.81457123395719, max tps: 731.2010049626613, count: 55247"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754063511717,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1200.7420484464737,
            "unit": "median tps",
            "extra": "avg tps: 1194.9501169120078, max tps: 1207.5472527404354, count: 55126"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2515.9039668456408,
            "unit": "median tps",
            "extra": "avg tps: 2515.17636086229, max tps: 2582.183302241843, count: 55126"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1200.4243360697592,
            "unit": "median tps",
            "extra": "avg tps: 1192.9789525180543, max tps: 1202.958540707285, count: 55126"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 906.33341390175,
            "unit": "median tps",
            "extra": "avg tps: 908.2033101091313, max tps: 983.1457517991166, count: 55126"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 155.97822398513622,
            "unit": "median tps",
            "extra": "avg tps: 158.03964073840555, max tps: 164.73151347529145, count: 110252"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 135.8144382370714,
            "unit": "median tps",
            "extra": "avg tps: 135.90901206609274, max tps: 151.865700379834, count: 55126"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 27.372582458831594,
            "unit": "median tps",
            "extra": "avg tps: 35.060969952678626, max tps: 828.8904803586113, count: 55126"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "309944e7eb5d08d60af4a4b78822d7da10f12323",
          "message": "chore: Upgrade to `0.16.5` (#2928)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-08-03T18:49:51Z",
          "url": "https://github.com/paradedb/paradedb/commit/309944e7eb5d08d60af4a4b78822d7da10f12323"
        },
        "date": 1754321875026,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 297.7921051666905,
            "unit": "median tps",
            "extra": "avg tps: 297.7875106512311, max tps: 523.5799253818055, count: 55230"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2315.791746091252,
            "unit": "median tps",
            "extra": "avg tps: 2314.9690714493677, max tps: 2642.770074070385, count: 55230"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 310.6728776224387,
            "unit": "median tps",
            "extra": "avg tps: 310.6506784634607, max tps: 525.3740481362483, count: 55230"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 261.13294064606345,
            "unit": "median tps",
            "extra": "avg tps: 261.0913595476352, max tps: 409.19478690751816, count: 55230"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 151.90402104217156,
            "unit": "median tps",
            "extra": "avg tps: 151.7341014794404, max tps: 160.9687406294224, count: 110460"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 141.1937669997561,
            "unit": "median tps",
            "extra": "avg tps: 141.57465304461394, max tps: 147.48296265942426, count: 55230"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 5.346686419198777,
            "unit": "median tps",
            "extra": "avg tps: 10.08922061991454, max tps: 1198.0208695235472, count: 55230"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754413617297,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1228.923352039015,
            "unit": "median tps",
            "extra": "avg tps: 1217.5230226920003, max tps: 1235.228483884275, count: 55242"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2748.3517463265807,
            "unit": "median tps",
            "extra": "avg tps: 2721.938916830247, max tps: 2762.158244017144, count: 55242"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1152.6002272150968,
            "unit": "median tps",
            "extra": "avg tps: 1148.5946308964483, max tps: 1154.8447720740355, count: 55242"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1025.4331249689826,
            "unit": "median tps",
            "extra": "avg tps: 1014.4573239380517, max tps: 1030.6193100505102, count: 55242"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 165.86234039332692,
            "unit": "median tps",
            "extra": "avg tps: 164.9726150565454, max tps: 167.14204554060527, count: 110484"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 165.91766133549515,
            "unit": "median tps",
            "extra": "avg tps: 164.33345750073318, max tps: 166.62219265969904, count: 55242"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 112.83746943588223,
            "unit": "median tps",
            "extra": "avg tps: 122.04251599041726, max tps: 823.4315687194816, count: 55242"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754416000535,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1182.5334983921239,
            "unit": "median tps",
            "extra": "avg tps: 1177.968220840375, max tps: 1186.3524131580534, count: 55280"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2768.2409779298678,
            "unit": "median tps",
            "extra": "avg tps: 2734.6239434872714, max tps: 2778.188113649464, count: 55280"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1212.164595853967,
            "unit": "median tps",
            "extra": "avg tps: 1204.6818322325264, max tps: 1216.3495405362355, count: 55280"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 963.3295615892972,
            "unit": "median tps",
            "extra": "avg tps: 961.2629793695482, max tps: 977.0319150764367, count: 55280"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 167.88874018212604,
            "unit": "median tps",
            "extra": "avg tps: 172.33553629412881, max tps: 183.90329309183412, count: 110560"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 145.34350060736833,
            "unit": "median tps",
            "extra": "avg tps: 144.40114857170568, max tps: 152.04145683995364, count: 55280"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 67.26376289306955,
            "unit": "median tps",
            "extra": "avg tps: 83.00421238597282, max tps: 753.0256570901884, count: 55280"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754422438851,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1216.9721577985404,
            "unit": "median tps",
            "extra": "avg tps: 1210.597932732387, max tps: 1227.0169205968205, count: 55311"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2471.8538740898957,
            "unit": "median tps",
            "extra": "avg tps: 2460.5201425342243, max tps: 2503.8909044923857, count: 55311"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1215.6834337890368,
            "unit": "median tps",
            "extra": "avg tps: 1207.5033529909633, max tps: 1219.6293194253333, count: 55311"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1008.169527029661,
            "unit": "median tps",
            "extra": "avg tps: 996.5270255968593, max tps: 1017.5073679794674, count: 55311"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 165.45181220366362,
            "unit": "median tps",
            "extra": "avg tps: 164.94345693089738, max tps: 166.7568367961497, count: 110622"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 160.99473180106423,
            "unit": "median tps",
            "extra": "avg tps: 158.92542431589038, max tps: 161.96485743872253, count: 55311"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 147.3788485753722,
            "unit": "median tps",
            "extra": "avg tps: 177.00776996432475, max tps: 671.4252814446924, count: 55311"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754538524067,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1150.1633958466844,
            "unit": "median tps",
            "extra": "avg tps: 1147.2171076253908, max tps: 1153.6282547105588, count: 55301"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2753.527753812824,
            "unit": "median tps",
            "extra": "avg tps: 2723.5429561919796, max tps: 2772.1441682445297, count: 55301"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1198.8009792050004,
            "unit": "median tps",
            "extra": "avg tps: 1193.1106505825276, max tps: 1200.8051836433565, count: 55301"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 1003.5797474635184,
            "unit": "median tps",
            "extra": "avg tps: 995.3051577990483, max tps: 1009.6945083586147, count: 55301"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 177.56094981934388,
            "unit": "median tps",
            "extra": "avg tps: 176.40149435545226, max tps: 178.45987329558258, count: 110602"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 163.77500963780167,
            "unit": "median tps",
            "extra": "avg tps: 162.94888685012424, max tps: 164.39112823502185, count: 55301"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 56.58089237047706,
            "unit": "median tps",
            "extra": "avg tps: 89.97787965009742, max tps: 753.1651766548922, count: 55301"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0e385c88549677dc0e47d2509ea746cb7170bd8d",
          "message": "perf: Use Arrow for fast field execution (#2924)\n\n## What\n\nSwitches `Mixed` fast fields execution to fetching data into Arrow\narrays. A followup change will remove `Numeric`.\n\n## Why\n\nThis change is necessary for `Mixed`'s performance to match `Numeric`\nexecution. The:\n1. creation and destruction of `TantivyValue` and `OwnedValue`\n2. allocation and encoding/decoding of Strings\n\n...represented the largest remaining bottlenecks in (`Mixed`) fast\nfields execution.\n\nArrow removes those overheads for data held in memory, similar to how\nour `FFType` wrapper allows us to avoid `OwnedValue` overheads when\nfetching individual rows. String overhead is reduced by directly copying\nfrom the term dictionary into a `StringViewArray`, which has a single\ncontiguous buffer for the string data, and then a separate series of\nviews into that buffer (similar to allocating strings in an arena).\n\nFuture work could:\n* Push arrow arrays further down into Tantivy (e.g. as a `first_vals`\nvariant), removing additional overheads involved in fetching batches of\nrows.\n* Feed the arrow outputs of `Mixed` execution direct directly into a\nvectorized join implementation (e.g. DataFusion).\n\n## Tests\n\nGives a 1.6x speedup for `bucket-string-nofilter` and\n`bucket-string-filter`, with other changes being ~ in the noise.",
          "timestamp": "2025-08-09T14:16:01-07:00",
          "tree_id": "1fcdcb6500bb2e854ecfc613581ee13bc002b050",
          "url": "https://github.com/paradedb/paradedb/commit/0e385c88549677dc0e47d2509ea746cb7170bd8d"
        },
        "date": 1754775206367,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - tps",
            "value": 1139.5116525711908,
            "unit": "median tps",
            "extra": "avg tps: 1138.098038502163, max tps: 1144.2075363484275, count: 55278"
          },
          {
            "name": "Delete values - Primary - tps",
            "value": 2818.993668072453,
            "unit": "median tps",
            "extra": "avg tps: 2780.235864936096, max tps: 2836.914040869434, count: 55278"
          },
          {
            "name": "Index Only Scan - Primary - tps",
            "value": 1196.2977413603146,
            "unit": "median tps",
            "extra": "avg tps: 1190.7779064302997, max tps: 1199.9772264479616, count: 55278"
          },
          {
            "name": "Index Scan - Primary - tps",
            "value": 978.1167009218459,
            "unit": "median tps",
            "extra": "avg tps: 975.4588827191957, max tps: 987.4338250669308, count: 55278"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 164.65945145534164,
            "unit": "median tps",
            "extra": "avg tps: 163.9976100789016, max tps: 169.41781873281232, count: 110556"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 165.90306751742168,
            "unit": "median tps",
            "extra": "avg tps: 163.94732596777408, max tps: 166.69100895981973, count: 55278"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 66.2927866586812,
            "unit": "median tps",
            "extra": "avg tps: 64.01507907597292, max tps: 721.8387253483053, count: 55278"
          }
        ]
      }
    ],
    "pg_search single-server.toml Performance - Other Metrics": [
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "committer": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "id": "6603901ab5f5342e3de4b0bfc99065823a606d92",
          "message": "Fix mintlify check workflow",
          "timestamp": "2025-07-06T17:07:57Z",
          "url": "https://github.com/paradedb/paradedb/commit/6603901ab5f5342e3de4b0bfc99065823a606d92"
        },
        "date": 1752440987843,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 9.160305,
            "unit": "median cpu",
            "extra": "avg cpu: 7.4726942799140685, max cpu: 23.506365, count: 55107"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 103.12890625,
            "unit": "median mem",
            "extra": "avg mem: 100.72339756349012, max mem: 105.32421875, count: 55107"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.587054184366673, max cpu: 9.221902, count: 55107"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 86.71484375,
            "unit": "median mem",
            "extra": "avg mem: 84.90314311816103, max mem: 86.71484375, count: 55107"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.142857,
            "unit": "median cpu",
            "extra": "avg cpu: 7.3917408358814, max cpu: 23.210833, count: 55107"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 102.515625,
            "unit": "median mem",
            "extra": "avg mem: 101.6168992114205, max mem: 106.18359375, count: 55107"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.5210036859302285, max cpu: 9.230769, count: 55107"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 99.08984375,
            "unit": "median mem",
            "extra": "avg mem: 98.27602266953382, max mem: 101.33984375, count: 55107"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.6169880760372815, max cpu: 24.048098, count: 110214"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 112.9609375,
            "unit": "median mem",
            "extra": "avg mem: 112.4219112221451, max mem: 119.33203125, count: 110214"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8535,
            "unit": "median block_count",
            "extra": "avg block_count: 8463.170559094126, max block_count: 8535.0, count: 55107"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 119,
            "unit": "median segment_count",
            "extra": "avg segment_count: 118.37008002613098, max segment_count: 270.0, count: 55107"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.235926841931639, max cpu: 19.238478, count: 55107"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 112.75390625,
            "unit": "median mem",
            "extra": "avg mem: 112.79075827764622, max mem: 118.375, count: 55107"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 17.207486968736323, max cpu: 28.402367, count: 55107"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 97.140625,
            "unit": "median mem",
            "extra": "avg mem: 94.69297365522982, max mem: 99.703125, count: 55107"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "71ea95206a8e487805333d573e859dad68dab572",
          "message": "chore: Upgrade to `0.16.1` (#2748)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-30T19:38:06Z",
          "url": "https://github.com/paradedb/paradedb/commit/71ea95206a8e487805333d573e859dad68dab572"
        },
        "date": 1752441000636,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 9.142857,
            "unit": "median cpu",
            "extra": "avg cpu: 7.372498752266969, max cpu: 23.143684, count: 55117"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 99.9921875,
            "unit": "median mem",
            "extra": "avg mem: 106.5030090109449, max mem: 139.4140625, count: 55117"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.698644794060423, max cpu: 9.402546, count: 55117"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 86.29296875,
            "unit": "median mem",
            "extra": "avg mem: 87.64859908807627, max mem: 99.79296875, count: 55117"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.213051,
            "unit": "median cpu",
            "extra": "avg cpu: 8.294642715711806, max cpu: 24.0, count: 55117"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 104.26953125,
            "unit": "median mem",
            "extra": "avg mem: 110.44533921873015, max mem: 143.88671875, count: 55117"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.561810237250614, max cpu: 9.257474, count: 55117"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 99.41796875,
            "unit": "median mem",
            "extra": "avg mem: 105.16435548469619, max mem: 132.04296875, count: 55117"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.221902,
            "unit": "median cpu",
            "extra": "avg cpu: 8.626394826952847, max cpu: 28.8, count: 110234"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 112.3984375,
            "unit": "median mem",
            "extra": "avg mem: 117.72671944596269, max mem: 162.28515625, count: 110234"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8125,
            "unit": "median block_count",
            "extra": "avg block_count: 9345.314549050203, max block_count: 14412.0, count: 55117"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 120,
            "unit": "median segment_count",
            "extra": "avg segment_count: 119.52584502059256, max segment_count: 429.0, count: 55117"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 5.995498716428834, max cpu: 23.099133, count: 55117"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 117.640625,
            "unit": "median mem",
            "extra": "avg mem: 122.2538302043834, max mem: 152.56640625, count: 55117"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.426102,
            "unit": "median cpu",
            "extra": "avg cpu: 15.938639467034454, max cpu: 28.180038, count: 55117"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 94.78515625,
            "unit": "median mem",
            "extra": "avg mem: 93.84444029292233, max mem: 98.8125, count: 55117"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "c0442237441f33c1c51d6c11e29849eda05816a7",
          "message": "chore: Upgrade to `0.16.2` (#2760)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-01T21:30:02Z",
          "url": "https://github.com/paradedb/paradedb/commit/c0442237441f33c1c51d6c11e29849eda05816a7"
        },
        "date": 1752441002300,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.806153008008782, max cpu: 36.994217, count: 55130"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 103.1875,
            "unit": "median mem",
            "extra": "avg mem: 102.25979814756032, max mem: 106.32421875, count: 55130"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.608452600735903, max cpu: 9.275363, count: 55130"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 87.04296875,
            "unit": "median mem",
            "extra": "avg mem: 85.86739042943951, max mem: 87.41796875, count: 55130"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.76685727779277, max cpu: 32.36994, count: 55130"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 103.84765625,
            "unit": "median mem",
            "extra": "avg mem: 102.48738776528207, max mem: 106.01171875, count: 55130"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.628196297955122, max cpu: 9.239654, count: 55130"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 101.66796875,
            "unit": "median mem",
            "extra": "avg mem: 101.02651956171776, max mem: 104.8125, count: 55130"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.204219,
            "unit": "median cpu",
            "extra": "avg cpu: 8.278521581700955, max cpu: 28.374382, count: 110260"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 114.189453125,
            "unit": "median mem",
            "extra": "avg mem: 113.88865171668103, max mem: 124.03515625, count: 110260"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8535,
            "unit": "median block_count",
            "extra": "avg block_count: 8517.909341556322, max block_count: 8535.0, count: 55130"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 120,
            "unit": "median segment_count",
            "extra": "avg segment_count: 119.3121349537457, max segment_count: 355.0, count: 55130"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 6.113521859631946, max cpu: 18.497108, count: 55130"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 112.36328125,
            "unit": "median mem",
            "extra": "avg mem: 113.4691090944132, max mem: 122.44140625, count: 55130"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 17.34055356965306, max cpu: 32.40116, count: 55130"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 95.3984375,
            "unit": "median mem",
            "extra": "avg mem: 94.00955872766643, max mem: 96.5625, count: 55130"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@paradedb.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "4fd1b2b6b6664d03946be0f4836732f0f40df0cc",
          "message": "chore: Rename datasets and add string paging queries (#2834)\n\n## What\n\nAdd a high-cardinality paging/top-n query to the benchmarks, and rename\ndatasets to match their content. Additionally, improve the generation\nscript for the `docs` dataset to avoid joins and allow for deterministic\nrelative-position queries.\n\n## Why\n\nWe don't currently have a high-cardinality string paging/top-n query in\nthe benchmark. We have top-n on a string column, but only for\nlow-cardinality values (`top_n-string.sql`). The top-n case represented\nan important gap that a user encountered, which #2828 addresses.\n\nThe names of the `benchmark` datasets don't currently describe their\nshape / schema, and for the `join` dataset in particular, that would\ndiscourage using it for other types of queries. We rename it to `docs`\nhere, and then use the `pages` table as the dataset for top-n.\n\n## Tests\n\nTested locally that the new query demonstrates a speedup for #2828.",
          "timestamp": "2025-07-13T18:04:27Z",
          "url": "https://github.com/paradedb/paradedb/commit/4fd1b2b6b6664d03946be0f4836732f0f40df0cc"
        },
        "date": 1752441067389,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.58274748325849, max cpu: 23.233301, count: 54617"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 104.80859375,
            "unit": "median mem",
            "extra": "avg mem: 100.76107005659868, max mem: 107.1640625, count: 54617"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.642421419043236, max cpu: 9.402546, count: 54617"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 94.56640625,
            "unit": "median mem",
            "extra": "avg mem: 89.85905358565098, max mem: 94.94140625, count: 54617"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.613237327175098, max cpu: 23.645319, count: 54617"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 105.96484375,
            "unit": "median mem",
            "extra": "avg mem: 101.25729168573888, max mem: 108.0625, count: 54617"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.652455109774368, max cpu: 9.248554, count: 54617"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 105.44140625,
            "unit": "median mem",
            "extra": "avg mem: 100.85321727609993, max mem: 106.12109375, count: 54617"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.221902,
            "unit": "median cpu",
            "extra": "avg cpu: 8.387311715820049, max cpu: 28.20764, count: 109234"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 108.30859375,
            "unit": "median mem",
            "extra": "avg mem: 105.49320359560667, max mem: 114.00390625, count: 109234"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 9337,
            "unit": "median block_count",
            "extra": "avg block_count: 8813.086749546845, max block_count: 9337.0, count: 54617"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 119,
            "unit": "median segment_count",
            "extra": "avg segment_count: 118.4046542285369, max segment_count: 324.0, count: 54617"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 5.929190891395205, max cpu: 15.094339, count: 54617"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 111.78515625,
            "unit": "median mem",
            "extra": "avg mem: 109.0478350233215, max mem: 118.140625, count: 54617"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 17.5414371612892, max cpu: 28.430405, count: 54617"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 105.03515625,
            "unit": "median mem",
            "extra": "avg mem: 98.37930111618178, max mem: 107.33984375, count: 54617"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr",
            "email": "eebbrr@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "e350be5d171ddb28a700c02d8adc32a1a9f4b084",
          "message": "feat: custom fsm (#2765)\n\nA custom FSM implementation that allows us to internally track\nfree/reusable blocks without generating full read+write cycles on every\npage that is returned to the FSM.\n\nThere's a new UDF called `paradedb.fsm_info()` that returns a table of\nFSM block numbers in use and the free block numbers they contain.\n\n## Why\n\nTo reduce I/O during segment merging and garbage collection, with an aim of reducing WAL traffic for enterprise.",
          "timestamp": "2025-07-09T15:42:21Z",
          "url": "https://github.com/paradedb/paradedb/commit/e350be5d171ddb28a700c02d8adc32a1a9f4b084"
        },
        "date": 1752441071536,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 6.875928976852056, max cpu: 23.645319, count: 55224"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 96.421875,
            "unit": "median mem",
            "extra": "avg mem: 103.10111064709184, max mem: 121.37109375, count: 55224"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.755382149344175, max cpu: 9.4395275, count: 55224"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 85.1796875,
            "unit": "median mem",
            "extra": "avg mem: 91.70267979614842, max mem: 108.8046875, count: 55224"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.530496356781523, max cpu: 23.59882, count: 55224"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 96.22265625,
            "unit": "median mem",
            "extra": "avg mem: 102.68009217290037, max mem: 119.4296875, count: 55224"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.576214288189471, max cpu: 4.733728, count: 55224"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 96.0546875,
            "unit": "median mem",
            "extra": "avg mem: 102.43293832278539, max mem: 118.25, count: 55224"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.7245861701493475, max cpu: 23.66864, count: 110448"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 108.46484375,
            "unit": "median mem",
            "extra": "avg mem: 112.28974625643968, max mem: 137.36328125, count: 110448"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8120,
            "unit": "median block_count",
            "extra": "avg block_count: 9028.35490004346, max block_count: 10979.0, count: 55224"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 120,
            "unit": "median segment_count",
            "extra": "avg segment_count: 119.71336737650297, max segment_count: 432.0, count: 55224"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.2657325796473735, max cpu: 18.568666, count: 55224"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 109.5703125,
            "unit": "median mem",
            "extra": "avg mem: 112.68041543022508, max mem: 131.83984375, count: 55224"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.408438,
            "unit": "median cpu",
            "extra": "avg cpu: 16.639432010082693, max cpu: 28.486649, count: 55224"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 95.55078125,
            "unit": "median mem",
            "extra": "avg mem: 99.67783460599105, max mem: 118.5625, count: 55224"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Kaihong.Wang",
            "username": "wangkhc",
            "email": "wangkhc@163.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "7f560910072d570e0dca4d19a9fe02b47f6917e5",
          "message": "fix: Add missing stopword filters to Jieba tokenizer (#2790)\n\n### What\n\nThis PR fixes a bug where the Jieba tokenizer was missing stopword\nfiltering capabilities that are available in other tokenizers. The fix\nadds both custom stopword lists and language-based stopword filtering\nsupport to the Jieba tokenizer. (Fix #2789 )\n\n### Why\n\nThe Jieba tokenizer implementation was inconsistent with other\ntokenizers in the codebase - it lacked the\n`.filter(filters.stopwords_language())` and\n`.filter(filters.stopwords())` calls that are present in all other\ntokenizer variants (ICU, Chinese Lindera, etc.). This meant users\ncouldn't filter out common Chinese stop words like \"的\", \"了\", \"在\" or\nEnglish stop words when using mixed-language content, reducing search\nquality and relevance.\n\nThis inconsistency was discovered when comparing the Jieba tokenizer\nimplementation against other tokenizer variants in\n`tokenizers/src/manager.rs`.\n\n### How\n\n1. **Bug Fix:** Modified `tokenizers/src/manager.rs` in the\n`SearchTokenizer::Jieba` case within `to_tantivy_tokenizer()` method:\n- Added `.filter(filters.stopwords_language())` to support\nlanguage-based stopwords (e.g., English, Spanish, etc.)\n- Added `.filter(filters.stopwords())` to support custom stopword lists\n- This brings Jieba tokenizer in line with all other tokenizer\nimplementations\n\n2. **Code Changes:**\n   ```rust\n   // Before (missing stopword filters)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .build(),\n   ),\n\n   // After (with stopword filters added)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .filter(filters.stopwords_language())  // ← Added\n           .filter(filters.stopwords())           // ← Added\n           .build(),\n   ),\n   ```\n\n### Tests\n\nAdded comprehensive test coverage in `tokenizers/src/manager.rs`:\n\n1. **`test_jieba_tokenizer_with_stopwords`**: \n   - Tests custom stopword filtering with Chinese stopwords\n- Verifies stopwords are filtered out while content words are preserved\n\n2. **`test_jieba_tokenizer_with_language_stopwords`**:\n   - Tests language-based stopword filtering with English stopwords\n   - Tests the `stopwords_language: \"English\"` configuration option\n\nBoth tests use natural, conversational sentences instead of artificial\ntest data, making them more representative of real-world usage and\nsuitable for open-source community review.\n\n**All existing tests continue to pass** (12/12), ensuring no regressions\nwere introduced.\n\n### Ticket(s) Closed\n\nFix #2789\n\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-09T12:38:14Z",
          "url": "https://github.com/paradedb/paradedb/commit/7f560910072d570e0dca4d19a9fe02b47f6917e5"
        },
        "date": 1752441102616,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.673807,
            "unit": "median cpu",
            "extra": "avg cpu: 7.07636040830243, max cpu: 27.612656, count: 54990"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 113.0390625,
            "unit": "median mem",
            "extra": "avg mem: 106.26956222154028, max mem: 114.40625, count: 54990"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6021094,
            "unit": "median cpu",
            "extra": "avg cpu: 4.660013624948625, max cpu: 9.402546, count: 54990"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 92.72265625,
            "unit": "median mem",
            "extra": "avg mem: 88.06516056896709, max mem: 92.72265625, count: 54990"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.669261,
            "unit": "median cpu",
            "extra": "avg cpu: 7.023318065170739, max cpu: 23.483368, count: 54990"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 114.0625,
            "unit": "median mem",
            "extra": "avg mem: 107.97806916598472, max mem: 116.82421875, count: 54990"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.597701,
            "unit": "median cpu",
            "extra": "avg cpu: 4.5864949920132885, max cpu: 4.6875, count: 54990"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 112.59765625,
            "unit": "median mem",
            "extra": "avg mem: 106.11153093176031, max mem: 112.59765625, count: 54990"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.160305,
            "unit": "median cpu",
            "extra": "avg cpu: 7.682333996918835, max cpu: 23.952095, count: 109980"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 118.6328125,
            "unit": "median mem",
            "extra": "avg mem: 114.58749623511093, max mem: 124.57421875, count: 109980"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 10646,
            "unit": "median block_count",
            "extra": "avg block_count: 9764.458865248227, max block_count: 10646.0, count: 54990"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 119,
            "unit": "median segment_count",
            "extra": "avg segment_count: 118.93229678123295, max segment_count: 382.0, count: 54990"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 6.150257976547244, max cpu: 18.443804, count: 54990"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 130.265625,
            "unit": "median mem",
            "extra": "avg mem: 125.15317316216584, max mem: 136.1328125, count: 54990"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.390804,
            "unit": "median cpu",
            "extra": "avg cpu: 16.58427548365091, max cpu: 32.24568, count: 54990"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 113.07421875,
            "unit": "median mem",
            "extra": "avg mem: 104.92958691352973, max mem: 113.82421875, count: 54990"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "47bbe518381e1429f228328336dad78e99636ad9",
          "message": "chore: Upgrade to `0.16.0` (#2720)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-23T23:04:37Z",
          "url": "https://github.com/paradedb/paradedb/commit/47bbe518381e1429f228328336dad78e99636ad9"
        },
        "date": 1752441104551,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 13.753581,
            "unit": "median cpu",
            "extra": "avg cpu: 11.77143013102557, max cpu: 32.876713, count: 55093"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 105.15625,
            "unit": "median mem",
            "extra": "avg mem: 104.50623519548763, max mem: 109.7890625, count: 55093"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.856029980569178, max cpu: 9.430255, count: 55093"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 87.875,
            "unit": "median mem",
            "extra": "avg mem: 86.45992458207031, max mem: 87.875, count: 55093"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 13.753581,
            "unit": "median cpu",
            "extra": "avg cpu: 11.864516733718906, max cpu: 32.876713, count: 55093"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 106.9453125,
            "unit": "median mem",
            "extra": "avg mem: 106.53049807541339, max mem: 113.203125, count: 55093"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 5.369551076710137, max cpu: 13.93998, count: 55093"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 109.94140625,
            "unit": "median mem",
            "extra": "avg mem: 109.70710817957817, max mem: 114.59375, count: 55093"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 8.233382989828433, max cpu: 23.483368, count: 110186"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 126.6328125,
            "unit": "median mem",
            "extra": "avg mem: 126.10799455721462, max mem: 128.328125, count: 110186"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8279,
            "unit": "median block_count",
            "extra": "avg block_count: 8242.162289220047, max block_count: 8279.0, count: 55093"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 122,
            "unit": "median segment_count",
            "extra": "avg segment_count: 120.28219556023451, max segment_count: 339.0, count: 55093"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 6.097631639339264, max cpu: 22.944551, count: 55093"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 128.43359375,
            "unit": "median mem",
            "extra": "avg mem: 126.46983658597735, max mem: 128.43359375, count: 55093"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.443804,
            "unit": "median cpu",
            "extra": "avg cpu: 16.77400349986527, max cpu: 28.263002, count: 55093"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 96.546875,
            "unit": "median mem",
            "extra": "avg mem: 95.33485474277585, max mem: 97.671875, count: 55093"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b96e41e25c3fd2126f54aa5cb66d4deffb482047",
          "message": "perf: Lazily load fast fields dictionaries. (#2842)\n\n## What\n\nLazily load fast field dictionaries from buffers: see\nhttps://github.com/paradedb/tantivy/pull/55\n\n## Why\n\nA customer reported slower-than-expected paging on a string/uuid column.\n85% of the time for that query was being spent in _opening_ a fast\nfields string/bytes column, with a large fraction of that time spent\nfully consuming the column's `Dictionary`.\n\n## Tests\n\nSee the attached benchmark results:\n* [`docs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014379545)\n    * No regressions.\n    * 2x faster for `top_n-score`\n    * 1.4x faster for `highlighting` \n* [`logs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014350211)\n    * No regressions.\n    * 4.5x faster for `paging-string-max`\n    * 1.7x faster for `paging-string-median`\n    * 1.6x faster for `paging-string-min`\n\nThe `paging-string-*` benchmarks were added in #2834 to highlight this\nparticular issue.",
          "timestamp": "2025-07-14T08:28:09-07:00",
          "tree_id": "d144335dcb7c7f138a112c01e5b9ff5e0168fe37",
          "url": "https://github.com/paradedb/paradedb/commit/b96e41e25c3fd2126f54aa5cb66d4deffb482047"
        },
        "date": 1752507920354,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.678363,
            "unit": "median cpu",
            "extra": "avg cpu: 6.979654476088491, max cpu: 23.506365, count: 54984"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 96.609375,
            "unit": "median mem",
            "extra": "avg mem: 95.47897108420177, max mem: 101.33984375, count: 54984"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.607765417650276, max cpu: 9.239654, count: 54984"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 85.93359375,
            "unit": "median mem",
            "extra": "avg mem: 84.5554340950322, max mem: 88.55859375, count: 54984"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.692082,
            "unit": "median cpu",
            "extra": "avg cpu: 6.9990201618881835, max cpu: 23.529411, count: 54984"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 96.8046875,
            "unit": "median mem",
            "extra": "avg mem: 95.5972280004183, max mem: 102.02734375, count: 54984"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.378226419366776, max cpu: 4.7197638, count: 54984"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 96.80859375,
            "unit": "median mem",
            "extra": "avg mem: 95.96765280581624, max mem: 101.30859375, count: 54984"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.966471162119436, max cpu: 27.988338, count: 109968"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 100.9765625,
            "unit": "median mem",
            "extra": "avg mem: 101.13206341844901, max mem: 112.375, count: 109968"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8203,
            "unit": "median block_count",
            "extra": "avg block_count: 8138.0711297832095, max block_count: 8596.0, count: 54984"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 120,
            "unit": "median segment_count",
            "extra": "avg segment_count: 118.94698457733159, max segment_count: 303.0, count: 54984"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.44646407151505, max cpu: 23.121387, count: 54984"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 102.4140625,
            "unit": "median mem",
            "extra": "avg mem: 101.9646891595737, max mem: 110.18359375, count: 54984"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.426102,
            "unit": "median cpu",
            "extra": "avg cpu: 16.738145131213006, max cpu: 32.24568, count: 54984"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 95.70703125,
            "unit": "median mem",
            "extra": "avg mem: 93.75278319602066, max mem: 99.36328125, count: 54984"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8",
          "message": "fix: orphaned delete entries get GCed too early (#2845)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nWhen running a new stressgres suite (coming in a future PR), I hit a\nmysterious bug where it looked like vacuum could cause corruption of\nsome pages.\n\nTurns out it's caused by scenarios where:\n\n1. A `DeleteEntry` already exists for a `SegmentMetaEntry`, and a new\none is created\n2. A new, \"fake\" `SegmentMetaEntry` gets created for the purpose of\nstoring the old `DeleteEntry`, so its blocks can get garbage collected\n3. Because this \"fake\" entry is invisible to all readers besides the\ngarbage collector, it doesn't get pinned and can get garbage collected\ntoo early (i.e. while a reader is still pinning the old `DeleteEntry`)\n\nThe solution is to copy all of the contents of the old\n`SegmentMetaEntry` to the fake one, so that the \"pintest blockno\" of the\nfake entry is that same as that of the entry with the new `DeleteEntry`.\nThat way, the `DeleteEntry` doesn't get garbage collected until the pin\nis released.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-14T15:46:29-04:00",
          "tree_id": "3dc55f49de121cf04534f48e3584a2a3ae333407",
          "url": "https://github.com/paradedb/paradedb/commit/ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8"
        },
        "date": 1752523327858,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 7.470817,
            "unit": "median cpu",
            "extra": "avg cpu: 7.274012821663131, max cpu: 23.622047, count: 55164"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 111.72265625,
            "unit": "median mem",
            "extra": "avg mem: 106.07697643617215, max mem: 115.23046875, count: 55164"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.666822819955045, max cpu: 9.266409, count: 55164"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 99.47265625,
            "unit": "median mem",
            "extra": "avg mem: 93.34382994627384, max mem: 100.97265625, count: 55164"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.116809,
            "unit": "median cpu",
            "extra": "avg cpu: 7.281864593742709, max cpu: 23.622047, count: 55164"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 110.62890625,
            "unit": "median mem",
            "extra": "avg mem: 104.44843805233032, max mem: 112.62890625, count: 55164"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.578298620432221, max cpu: 9.195402, count: 55164"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 110.34765625,
            "unit": "median mem",
            "extra": "avg mem: 104.26415969597473, max mem: 110.34765625, count: 55164"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.703995005384538, max cpu: 24.0, count: 110328"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 111.24609375,
            "unit": "median mem",
            "extra": "avg mem: 110.46807520104824, max mem: 124.49609375, count: 110328"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 9829,
            "unit": "median block_count",
            "extra": "avg block_count: 9131.244326009717, max block_count: 9829.0, count: 55164"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 120,
            "unit": "median segment_count",
            "extra": "avg segment_count: 119.26651439344501, max segment_count: 341.0, count: 55164"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 6.107539509745548, max cpu: 18.916256, count: 55164"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 115.09765625,
            "unit": "median mem",
            "extra": "avg mem: 110.78700110409416, max mem: 120.984375, count: 55164"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.390804,
            "unit": "median cpu",
            "extra": "avg cpu: 16.420937973394224, max cpu: 32.36994, count: 55164"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 109.36328125,
            "unit": "median mem",
            "extra": "avg mem: 102.61008927640762, max mem: 110.92578125, count: 55164"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "eb3bc1d570c85d60804f6aab2f2d2cf998bd7597",
          "message": "ci: benchmark workflow cleanups (#2851)\n\nThis is an attempt to cleanup the benchmark workflows a little bit.  \n\n- Centralizes checking out the latest benchmark code/suites/actions into\na composite action.\n- figures out the PR #/title being tested\n- Changes the slack notification messages to be reactive to the\nenvironment to hopefully avoid conflicts with -enterprise",
          "timestamp": "2025-07-15T12:15:54-04:00",
          "tree_id": "223c726790d68868f538b7f5aab9cf9904494f44",
          "url": "https://github.com/paradedb/paradedb/commit/eb3bc1d570c85d60804f6aab2f2d2cf998bd7597"
        },
        "date": 1752597090889,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 9.116809,
            "unit": "median cpu",
            "extra": "avg cpu: 7.3532065107184446, max cpu: 28.68526, count: 54712"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 99.41796875,
            "unit": "median mem",
            "extra": "avg mem: 97.64304648660257, max mem: 102.953125, count: 54712"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.622928866823426, max cpu: 9.248554, count: 54712"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 85.1953125,
            "unit": "median mem",
            "extra": "avg mem: 84.20635940812802, max mem: 86.6953125, count: 54712"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.142857,
            "unit": "median cpu",
            "extra": "avg cpu: 7.394481106352058, max cpu: 27.745665, count: 54712"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 96.01171875,
            "unit": "median mem",
            "extra": "avg mem: 94.80663184321995, max mem: 98.89453125, count: 54712"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.555122618497994, max cpu: 9.125476, count: 54712"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 95.28515625,
            "unit": "median mem",
            "extra": "avg mem: 94.39945711464121, max mem: 97.109375, count: 54712"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.740311294842536, max cpu: 24.0, count: 109424"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 103.46484375,
            "unit": "median mem",
            "extra": "avg mem: 103.57474665635509, max mem: 115.60546875, count: 109424"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8097,
            "unit": "median block_count",
            "extra": "avg block_count: 8040.143423746162, max block_count: 8218.0, count: 54712"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 120,
            "unit": "median segment_count",
            "extra": "avg segment_count: 119.07881269191402, max segment_count: 317.0, count: 54712"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.415463429926581, max cpu: 28.20764, count: 54712"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 107.84375,
            "unit": "median mem",
            "extra": "avg mem: 107.91947386142436, max mem: 114.921875, count: 54712"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 17.05850979773692, max cpu: 33.07087, count: 54712"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 95.47265625,
            "unit": "median mem",
            "extra": "avg mem: 92.990129065036, max mem: 97.7109375, count: 54712"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c7bdeebed6249725c87b87c276d2e09dfaffd152",
          "message": "ci: publish stressgres benchmark graphs (#2852)\n\nThis will publish every stressgres benchmark graph to the new\n`paradedb/benchmark-data` repo.\n\nIt also ensures that when one of our \"[benchmark]\" labels are applied,\nthat it does *not* pull the benchmarks from main, but instead from the\nPR branch itself.",
          "timestamp": "2025-07-15T18:13:26-04:00",
          "tree_id": "f18bf519521a03613c5b12c861092f24314476ad",
          "url": "https://github.com/paradedb/paradedb/commit/c7bdeebed6249725c87b87c276d2e09dfaffd152"
        },
        "date": 1752618540322,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.794347817478516, max cpu: 23.762377, count: 55161"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 116.05078125,
            "unit": "median mem",
            "extra": "avg mem: 112.0491904521537, max mem: 131.81640625, count: 55161"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.676702435962727, max cpu: 9.4395275, count: 55161"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 106.57421875,
            "unit": "median mem",
            "extra": "avg mem: 102.07561119382353, max mem: 118.94921875, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.707024462918296, max cpu: 23.904383, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 117.984375,
            "unit": "median mem",
            "extra": "avg mem: 114.09775362121789, max mem: 132.4765625, count: 55161"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.487988651532281, max cpu: 9.275363, count: 55161"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 116.69921875,
            "unit": "median mem",
            "extra": "avg mem: 112.57466637434057, max mem: 129.78125, count: 55161"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.213051,
            "unit": "median cpu",
            "extra": "avg cpu: 8.204901996500626, max cpu: 27.745665, count: 110322"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 129.17578125,
            "unit": "median mem",
            "extra": "avg mem: 125.50078612210167, max mem: 148.921875, count: 110322"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 10882,
            "unit": "median block_count",
            "extra": "avg block_count: 10389.186979931474, max block_count: 12517.0, count: 55161"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 119,
            "unit": "median segment_count",
            "extra": "avg segment_count: 119.76118997117528, max segment_count: 487.0, count: 55161"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.194028010823544, max cpu: 18.786694, count: 55161"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 130.37109375,
            "unit": "median mem",
            "extra": "avg mem: 127.40700276803358, max mem: 148.26171875, count: 55161"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.285713,
            "unit": "median cpu",
            "extra": "avg cpu: 16.006508718621102, max cpu: 32.463768, count: 55161"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 115.17578125,
            "unit": "median mem",
            "extra": "avg mem: 109.97686417373689, max mem: 130.921875, count: 55161"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "21990816+philippemnoel@users.noreply.github.com"
          },
          "committer": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@gmail.com"
          },
          "id": "8c164d666c4af2049b439690afa7823ab5be2c88",
          "message": "ci: Post \"One-branch Release Model\" Improvements (#2792)\n\n# Ticket(s) Closed\n\n- Closes #N/A\n\n## What\n- Don't make Docker Scout post on PRs that don't modify the Dockerfile,\nnot necessary.\n- Make sure the SchemaBot workflow errors when community contributors\nmake a PR, so we can catch needed changes to the SQL upgrade script.\n- Rename it to SchemaBot\n\n## Why\nQoL\n\n## How\n^\n\n## Tests\nCI",
          "timestamp": "2025-07-08T15:49:16Z",
          "url": "https://github.com/paradedb/paradedb/commit/8c164d666c4af2049b439690afa7823ab5be2c88"
        },
        "date": 1752668515825,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 6.970152331474589, max cpu: 23.552504, count: 55077"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 97.0234375,
            "unit": "median mem",
            "extra": "avg mem: 98.52426829711132, max mem: 125.77734375, count: 55077"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.629864980548322, max cpu: 9.213051, count: 55077"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 84.09765625,
            "unit": "median mem",
            "extra": "avg mem: 83.45504730876773, max mem: 95.34765625, count: 55077"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.151573,
            "unit": "median cpu",
            "extra": "avg cpu: 7.3212605744362715, max cpu: 23.143684, count: 55077"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 97.91015625,
            "unit": "median mem",
            "extra": "avg mem: 99.62358968750567, max mem: 125.09765625, count: 55077"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.564069200672729, max cpu: 9.257474, count: 55077"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 96.09765625,
            "unit": "median mem",
            "extra": "avg mem: 98.15665426357644, max mem: 122.89453125, count: 55077"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.49939632128954, max cpu: 24.072216, count: 110154"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 100.7109375,
            "unit": "median mem",
            "extra": "avg mem: 102.49071970406204, max mem: 133.578125, count: 110154"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8209,
            "unit": "median block_count",
            "extra": "avg block_count: 8547.47500771647, max block_count: 12193.0, count: 55077"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 120,
            "unit": "median segment_count",
            "extra": "avg segment_count: 119.26615465620858, max segment_count: 448.0, count: 55077"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 6.183837131784775, max cpu: 14.117648, count: 55077"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 106.09765625,
            "unit": "median mem",
            "extra": "avg mem: 107.73512083083683, max mem: 139.65234375, count: 55077"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 17.356566977081453, max cpu: 32.214767, count: 55077"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 95.671875,
            "unit": "median mem",
            "extra": "avg mem: 96.78512823524339, max mem: 125.95703125, count: 55077"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f7c13c858851200e8ab5395779f821ca484cda0d",
          "message": "feat: Add a custom scan for aggregates (#2763)\n\n## What\n\nAdd a new `CustomScan` (installed with `create_upper_paths_hook`) which\nreplaces simple aggregate plans on `bm25`-indexed tables with aggregate\nimplementations using [Tantivy\naggregates](https://docs.rs/tantivy/latest/tantivy/aggregation/index.html).\n\n## Why\n\nTantivy aggregates can be significantly faster (in benchmarks, we've\nmeasured between 4-10x for bucketing/faceting queries). They have been\nexposed via `paradedb.aggregate` for a while now, but that function\nrequires learning a new API, and does not feel \"Postgres native\".\n\n## How\n\n* Adjust `CustomPathBuilder` and `CustomPathMethods` to allow multiple\n`CustomScan` implementations.\n* Remove the `CustomScan::PrivateData: Default` bound, as it requires\nthe `PrivateData` to start in an illegal state.\n* Move `qual_inspect` to a reusable location.\n* Split out a module to be used by both the `aggregate` API method and\nby the aggregate custom scan.\n* Implement the \"ParadeDB Aggregate Scan\" `CustomScan` type\n    * Add the new `CustomScan` type, hidden behind a GUC\n    * Filter Paths to those which represent `count(*)` queries\n    * Extract `quals` during `CustomPath` generation\n* Replace `Aggrefs` in target lists with `FuncExprs` while producing a\n`CustomPlan`\n* Execute a `count(*)` aggregate by pushing down a `value_count`\naggregate on the `ctid`\n\n## Tests\n\nAdded tests to validate that:\n* the GUC properly controls usage\n* the scan does not trigger for unsupported aggregates, tables without a\n`bm25` index, or group-bys (for now)",
          "timestamp": "2025-07-16T09:12:24-07:00",
          "tree_id": "69b043a9363fcf6ce2de468c97d14e41f593f017",
          "url": "https://github.com/paradedb/paradedb/commit/f7c13c858851200e8ab5395779f821ca484cda0d"
        },
        "date": 1752683375722,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.824514352499456, max cpu: 19.257774, count: 54969"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 90.375,
            "unit": "median mem",
            "extra": "avg mem: 89.77890528354618, max mem: 95.48828125, count: 54969"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.631264794249504, max cpu: 9.213051, count: 54969"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 83.6796875,
            "unit": "median mem",
            "extra": "avg mem: 82.53111640197201, max mem: 87.0546875, count: 54969"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 9.142857,
            "unit": "median cpu",
            "extra": "avg cpu: 7.305128389502062, max cpu: 23.575638, count: 54969"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 89.7734375,
            "unit": "median mem",
            "extra": "avg mem: 89.0264992399125, max mem: 95.6328125, count: 54969"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.584491629761695, max cpu: 9.204219, count: 54969"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 91.1796875,
            "unit": "median mem",
            "extra": "avg mem: 90.5710431675126, max mem: 94.5546875, count: 54969"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.204219,
            "unit": "median cpu",
            "extra": "avg cpu: 8.132321590552975, max cpu: 23.645319, count: 109938"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 105.73046875,
            "unit": "median mem",
            "extra": "avg mem: 105.3538991508282, max mem: 117.3515625, count: 109938"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 7790,
            "unit": "median block_count",
            "extra": "avg block_count: 7734.265476905165, max block_count: 8482.0, count: 54969"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 119,
            "unit": "median segment_count",
            "extra": "avg segment_count: 117.9896669031636, max segment_count: 322.0, count: 54969"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 6.169691655339136, max cpu: 27.665707, count: 54969"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 104.4765625,
            "unit": "median mem",
            "extra": "avg mem: 104.99349363391184, max mem: 113.5625, count: 54969"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.872832,
            "unit": "median cpu",
            "extra": "avg cpu: 15.562644612493461, max cpu: 28.263002, count: 54969"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 91.76953125,
            "unit": "median mem",
            "extra": "avg mem: 90.14222327300388, max mem: 98.03515625, count: 54969"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c779dbb72178c1aa0e14ad94c72eeb9937251acd",
          "message": "feat: a background merger for large layers (#2743)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nLaunches Postgres [dynamic background\nworkers](https://docs.rs/pgrx/latest/pgrx/bgworkers/struct.DynamicBackgroundWorker.html)\nto merge large layers in the background.\n\nThis is configured by a new index setting, `background_layer_sizes`. Any\nlayers specified here will be merged in the background.\n\n## Why\n\nWrite throughput, and create more balanced indexes with fewer segments.\n\n## How\n\n1. The default (foreground) `layer_sizes` is now `10kb`, `100kb`, `1mb`\n2. The default `background_layer_sizes` is `10mb`, `100mb`, `1gb`,\n`10gb`, `100gb`, `1tb`\n3. After `aminsert` merges in the foreground, it checks to see if there\nare enough candidates for a background merge. If so, it spawns a dynamic\nbackground worker process to do the merge.\n4. `amvacuumcleanup` can also spawn a background worker, allowing the\nuser to rebalance their index with a `VACUUM`.\n\nAdditionally, I've tweaked merge policy to make it smarter:\n\n1. Terminate a merge early if we predict that, after the merge, we will\nend up with fewer than `target_segment_count` segments.\n2. Set the max layer size as byte size of index divided by\n`target_segment_count`. Discard all layer sizes above that, which avoids\nthe problem of merging too many segments into one giant segment.\n\nThis has allowed us to delete some code:\n\n1. `force_merge` is deprecated\n2. No longer need to store the segments created by an index build and\navoid merging them, since we just do expensive merges in the background\n\n## Tests\n\nAdded a new stressgres `.toml` file that configures the layer\nsizes/threshold, which triggers background merging.\n\n---------\n\nSigned-off-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>\nCo-authored-by: Philippe Noël <21990816+philippemnoel@users.noreply.github.com>\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-16T12:44:23-04:00",
          "tree_id": "153c406e456a638a6b68ca9123210bbd498d66a5",
          "url": "https://github.com/paradedb/paradedb/commit/c779dbb72178c1aa0e14ad94c72eeb9937251acd"
        },
        "date": 1752685300450,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.74353993511877, max cpu: 9.571285, count: 55119"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.9453125,
            "unit": "median mem",
            "extra": "avg mem: 58.97769570157296, max mem: 83.3203125, count: 55119"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.5965984828445965, max cpu: 9.320388, count: 55119"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53.3203125,
            "unit": "median mem",
            "extra": "avg mem: 53.00785587206771, max mem: 76.9453125, count: 55119"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.771042490419082, max cpu: 9.448819, count: 55119"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.6953125,
            "unit": "median mem",
            "extra": "avg mem: 60.03921260137158, max mem: 83.6953125, count: 55119"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.597701,
            "unit": "median cpu",
            "extra": "avg cpu: 4.432769750103771, max cpu: 4.6966734, count: 55119"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.5703125,
            "unit": "median mem",
            "extra": "avg mem: 58.35947917800577, max mem: 81.4453125, count: 55119"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.151573,
            "unit": "median cpu",
            "extra": "avg cpu: 7.449142992295745, max cpu: 23.529411, count: 110238"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 75.01953125,
            "unit": "median mem",
            "extra": "avg mem: 75.00406418243936, max mem: 103.51953125, count: 110238"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3662,
            "unit": "median block_count",
            "extra": "avg block_count: 3696.1490955931713, max block_count: 6682.0, count: 55119"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.907182641194506, max segment_count: 28.0, count: 55119"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 6.050266210385479, max cpu: 14.159292, count: 55119"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 78.0703125,
            "unit": "median mem",
            "extra": "avg mem: 78.37628351555271, max mem: 106.58984375, count: 55119"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.597701,
            "unit": "median cpu",
            "extra": "avg cpu: 4.171832329408024, max cpu: 4.6966734, count: 55119"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.73828125,
            "unit": "median mem",
            "extra": "avg mem: 57.87885926359331, max mem: 83.7265625, count: 55119"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "d197630155f55d13eea0a81841951645a367a5f7",
          "message": "test: Make GUCs a tested property, and add proptests for the aggregate custom scan (#2788)\n\n## What\n\nMove the GUCs that are in use into a test property, which reduces\nruntime while allowing for testing arbitrary combinations of GUCs.\n\nAdditionally, added proptests for the aggregate custom scan by:\n* Adding its GUC to the generated set\n* Expanding the `generated_single_relation` test to use `COUNT(*)` in\nits target list.\n\n## Why\n\nTo add additional test coverage for #2763.",
          "timestamp": "2025-07-16T10:57:16-07:00",
          "tree_id": "6a92b62b640f7a0b2dc7e6507966b75f3bd00594",
          "url": "https://github.com/paradedb/paradedb/commit/d197630155f55d13eea0a81841951645a367a5f7"
        },
        "date": 1752689574219,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.68898471577226, max cpu: 9.448819, count: 55128"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.21875,
            "unit": "median mem",
            "extra": "avg mem: 58.395410453852854, max mem: 81.46875, count: 55128"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.673888574374334, max cpu: 9.284333, count: 55128"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 54.09375,
            "unit": "median mem",
            "extra": "avg mem: 52.845797507618634, max mem: 76.96875, count: 55128"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.730189762706926, max cpu: 9.458128, count: 55128"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.09375,
            "unit": "median mem",
            "extra": "avg mem: 59.739345817914675, max mem: 83.34375, count: 55128"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.276940094603659, max cpu: 4.701273, count: 55128"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.21875,
            "unit": "median mem",
            "extra": "avg mem: 58.4714131203744, max mem: 82.59375, count: 55128"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.423783469092818, max cpu: 23.575638, count: 110256"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 75.57421875,
            "unit": "median mem",
            "extra": "avg mem: 75.69435464396496, max mem: 105.7734375, count: 110256"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3699,
            "unit": "median block_count",
            "extra": "avg block_count: 3698.9790124800465, max block_count: 6676.0, count: 55128"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.929944855608765, max segment_count: 27.0, count: 55128"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.1935063847833725, max cpu: 14.215202, count: 55128"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 78.203125,
            "unit": "median mem",
            "extra": "avg mem: 77.87373922677678, max mem: 105.58203125, count: 55128"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.184462204130538, max cpu: 4.7058825, count: 55128"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.15625,
            "unit": "median mem",
            "extra": "avg mem: 57.32826572363409, max mem: 81.98828125, count: 55128"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "58f6742b2cde46fe2c15077e59a0d5b091ba6000",
          "message": "chore: Upgrade to `0.17.0` (#2870)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-16T19:49:53-04:00",
          "tree_id": "b77118d365b31a4f3478b7c0571cf1f7e9f8a5b2",
          "url": "https://github.com/paradedb/paradedb/commit/58f6742b2cde46fe2c15077e59a0d5b091ba6000"
        },
        "date": 1752710831881,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.717540500029253, max cpu: 9.599999, count: 55161"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 60.109375,
            "unit": "median mem",
            "extra": "avg mem: 59.832754629629626, max mem: 83.734375, count: 55161"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.65095285858455, max cpu: 9.275363, count: 55161"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 54.109375,
            "unit": "median mem",
            "extra": "avg mem: 52.797050055745906, max mem: 76.984375, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.74604281157357, max cpu: 9.4395275, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.109375,
            "unit": "median mem",
            "extra": "avg mem: 59.768524467014736, max mem: 82.984375, count: 55161"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.437008036622552, max cpu: 4.7244096, count: 55161"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.109375,
            "unit": "median mem",
            "extra": "avg mem: 59.946429259349905, max mem: 82.984375, count: 55161"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.476386611309005, max cpu: 23.414635, count: 110322"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.50390625,
            "unit": "median mem",
            "extra": "avg mem: 64.26616549877858, max mem: 92.4296875, count: 110322"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3677,
            "unit": "median block_count",
            "extra": "avg block_count: 3699.369735864107, max block_count: 6657.0, count: 55161"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.916716520730226, max segment_count: 27.0, count: 55161"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.204782471533129, max cpu: 14.173229, count: 55161"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 69.2890625,
            "unit": "median mem",
            "extra": "avg mem: 69.83178941530248, max mem: 96.53515625, count: 55161"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.4038150416563075, max cpu: 4.729064, count: 55161"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.46484375,
            "unit": "median mem",
            "extra": "avg mem: 57.81151148739599, max mem: 82.33984375, count: 55161"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "86bc2b092d2857a997cd05af4b554ac96ba225fd",
          "message": "fix: Fix `rescan` for top-n (#2868)\n\n## What\n\nComments in both `Normal` and `TopN` scans claimed that their search\nresults would be reset by `PdbScanState`, but this was incorrect: they\nwere local variables in the struct, and needed to be reset locally.\n\n## Why\n\nFixes issue detected by the prop tests and repro'd by @eeeebbbbrrrr in\n#2751.\n\n## Tests\n\nNew regression test from #2751: thanks @eeeebbbbrrrr!\n\n---------\n\nCo-authored-by: Eric B. Ridge <eebbrr@paradedb.com>",
          "timestamp": "2025-07-17T08:59:32-07:00",
          "tree_id": "ccc9162bb96008badcb3046612d16394604ed6f7",
          "url": "https://github.com/paradedb/paradedb/commit/86bc2b092d2857a997cd05af4b554ac96ba225fd"
        },
        "date": 1752768915241,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.7229969805054015, max cpu: 9.60961, count: 54877"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.625,
            "unit": "median mem",
            "extra": "avg mem: 58.90388049638282, max mem: 82.625, count: 54877"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.675521636550232, max cpu: 9.4395275, count: 54877"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.25,
            "unit": "median mem",
            "extra": "avg mem: 51.91981157862128, max mem: 75.125, count: 54877"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.696334845591201, max cpu: 9.495549, count: 54877"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.5,
            "unit": "median mem",
            "extra": "avg mem: 60.79483663465568, max mem: 85.25, count: 54877"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.4488339840171465, max cpu: 4.6966734, count: 54877"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.375,
            "unit": "median mem",
            "extra": "avg mem: 59.27695801519762, max mem: 83.375, count: 54877"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.4059308116246605, max cpu: 23.856857, count: 109754"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 69.71484375,
            "unit": "median mem",
            "extra": "avg mem: 70.19956871588963, max mem: 103.953125, count: 109754"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3727,
            "unit": "median block_count",
            "extra": "avg block_count: 3723.8177560726717, max block_count: 6696.0, count: 54877"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.874428266851321, max segment_count: 28.0, count: 54877"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.223512085067533, max cpu: 14.414414, count: 54877"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 65.47265625,
            "unit": "median mem",
            "extra": "avg mem: 65.66019041731964, max mem: 93.22265625, count: 54877"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 5.221618857648629, max cpu: 9.430255, count: 54877"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.84375,
            "unit": "median mem",
            "extra": "avg mem: 58.32079205256756, max mem: 83.08203125, count: 54877"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5772be0d3dea751c3609729efcc66cc69d9d30ee",
          "message": "chore: Remove debug output in aggregate scan (#2876)\n\n## What\n\nRemove a stray `println`.\n\n## Why\n\nIt's not doing anyone any good.",
          "timestamp": "2025-07-17T09:46:08-07:00",
          "tree_id": "06a002186c2a701283d73854f64c4225a08aa1a8",
          "url": "https://github.com/paradedb/paradedb/commit/5772be0d3dea751c3609729efcc66cc69d9d30ee"
        },
        "date": 1752771709335,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.7811712952202425, max cpu: 9.4395275, count: 55255"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.93359375,
            "unit": "median mem",
            "extra": "avg mem: 59.28518000350647, max mem: 81.80859375, count: 55255"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.652742042975775, max cpu: 9.302325, count: 55255"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.55859375,
            "unit": "median mem",
            "extra": "avg mem: 52.954281569541216, max mem: 76.55859375, count: 55255"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.781764045611883, max cpu: 9.628887, count: 55255"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.68359375,
            "unit": "median mem",
            "extra": "avg mem: 59.78342528391096, max mem: 82.93359375, count: 55255"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.325312489519427, max cpu: 4.7151275, count: 55255"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.55859375,
            "unit": "median mem",
            "extra": "avg mem: 59.43515964335807, max mem: 83.68359375, count: 55255"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.481974793784744, max cpu: 24.072216, count: 110510"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 70.02734375,
            "unit": "median mem",
            "extra": "avg mem: 69.51437864785993, max mem: 105.33984375, count: 110510"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3656,
            "unit": "median block_count",
            "extra": "avg block_count: 3695.4555786806623, max block_count: 6623.0, count: 55255"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.944385123518234, max segment_count: 28.0, count: 55255"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.29554876550422, max cpu: 19.257774, count: 55255"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 66.875,
            "unit": "median mem",
            "extra": "avg mem: 66.69264496708443, max mem: 94.1640625, count: 55255"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.732411741734988, max cpu: 9.4395275, count: 55255"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 56.89453125,
            "unit": "median mem",
            "extra": "avg mem: 57.70776463951226, max mem: 82.6953125, count: 55255"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "16307a200509cd31b42c1338f3c5b6e097a77fbf",
          "message": "fix: issue #2844 - Use `paradedb.with_index()` when necessary (#2879)\n\n# Ticket(s) Closed\n\n- Closes #2844\n\n## What\n\nWhen the right-hand-side of the `@@@` operator is a complex expression\nthat can't be evaluated to a `T_Const` during planning, we need to\nrewrite it to be a call to our `paradedb.with_index(<indexrelid>,\n<rhs>)` so that it can be properly used in Filter contexts during\nexecution.\n\nThis seems to come up, at least, during RLS rule evaluation if those\nrules use our `@@@` operator.\n\n## Why\n\nSo long as the right-hand-side of `@@@` is a `SearchQueryInput`, we need\nto be able to execute it when Postgres wants us to, whether that's\nduring a scan or, as in this case, a filter being run as part of RLS\nevaluation.\n\n## How\n\nWrapping Postgres expression nodes!\n\n## Tests\n\nI used the re-create the OP from #2844 put together as a regression\ntest. I seem to be lacking the creative energy today to reduce the test\ndown to its simplest form that doesn't require a complicated RLS\nconfiguration.",
          "timestamp": "2025-07-18T13:21:25-04:00",
          "tree_id": "f2e8c7ca2ce45eefd03b85ff45d56f0481ebae1a",
          "url": "https://github.com/paradedb/paradedb/commit/16307a200509cd31b42c1338f3c5b6e097a77fbf"
        },
        "date": 1752860223415,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.771444477648214, max cpu: 13.93998, count: 55078"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.328125,
            "unit": "median mem",
            "extra": "avg mem: 58.848353982079956, max mem: 82.578125, count: 55078"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.586453739221171, max cpu: 9.134158, count: 55078"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.203125,
            "unit": "median mem",
            "extra": "avg mem: 52.286323770380186, max mem: 75.828125, count: 55078"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.707664054390533, max cpu: 9.421001, count: 55078"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.703125,
            "unit": "median mem",
            "extra": "avg mem: 59.1321265409964, max mem: 82.953125, count: 55078"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.171505248691127, max cpu: 4.7197638, count: 55078"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.953125,
            "unit": "median mem",
            "extra": "avg mem: 58.93119246795454, max mem: 82.203125, count: 55078"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.577457112667741, max cpu: 23.575638, count: 110156"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.9921875,
            "unit": "median mem",
            "extra": "avg mem: 64.83417962367007, max mem: 92.30859375, count: 110156"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3711,
            "unit": "median block_count",
            "extra": "avg block_count: 3690.3445114201677, max block_count: 6643.0, count: 55078"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.860888194923563, max segment_count: 28.0, count: 55078"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 6.064215335209124, max cpu: 14.131501, count: 55078"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 67.75,
            "unit": "median mem",
            "extra": "avg mem: 67.81306922115, max mem: 93.9609375, count: 55078"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.500789835529026, max cpu: 4.7058825, count: 55078"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.83984375,
            "unit": "median mem",
            "extra": "avg mem: 57.77359707483024, max mem: 81.33203125, count: 55078"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "8b45b24d47a7cac36696bae2d8505c750a7ee801",
          "message": "test: added more join regression tests + improved when to use Join quals (#2808)\n\n# Ticket(s) Closed\n\n- Closes #2807\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-18T10:40:03-07:00",
          "tree_id": "fb63bd81696cd27d03b6d5724551c3ff8fd59613",
          "url": "https://github.com/paradedb/paradedb/commit/8b45b24d47a7cac36696bae2d8505c750a7ee801"
        },
        "date": 1752861342363,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.774436167341388, max cpu: 9.458128, count: 55215"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.94140625,
            "unit": "median mem",
            "extra": "avg mem: 58.6716353827085, max mem: 81.81640625, count: 55215"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.662948127028246, max cpu: 9.421001, count: 55215"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.94140625,
            "unit": "median mem",
            "extra": "avg mem: 53.31329447953455, max mem: 76.94140625, count: 55215"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.723780941904499, max cpu: 9.542743, count: 55215"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.06640625,
            "unit": "median mem",
            "extra": "avg mem: 59.63092633625374, max mem: 83.31640625, count: 55215"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.2141208736682065, max cpu: 4.729064, count: 55215"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 61.19140625,
            "unit": "median mem",
            "extra": "avg mem: 59.66707296194422, max mem: 83.31640625, count: 55215"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.204219,
            "unit": "median cpu",
            "extra": "avg cpu: 7.481829664227786, max cpu: 23.59882, count: 110430"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 63.46484375,
            "unit": "median mem",
            "extra": "avg mem: 63.814107671432126, max mem: 93.14453125, count: 110430"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3721,
            "unit": "median block_count",
            "extra": "avg block_count: 3701.3529475685955, max block_count: 6647.0, count: 55215"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.89269220320565, max segment_count: 28.0, count: 55215"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.3180191332501705, max cpu: 18.550726, count: 55215"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 77.203125,
            "unit": "median mem",
            "extra": "avg mem: 77.36818785090102, max mem: 103.84765625, count: 55215"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.8270527941345565, max cpu: 9.248554, count: 55215"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.5546875,
            "unit": "median mem",
            "extra": "avg mem: 58.685225369012045, max mem: 83.47265625, count: 55215"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "77c6cd1aeb5f5c03bba892a38cd792a113cfbd39",
          "message": "chore: move code around (#2889)\n\n## What\n\nThis relocates the `src/boostrap/create_bm25.rs` source to\n`src/api/admin.rs`, which I believe is a more sensibile location and\nname.\n\nAdditionally it moves the `#[pg_extern] schema()` function from\n`src/api/builder_fns.rs` to this new(ly renamed) `admin.rs`, as it's an\nadministrative function, not a query builder function.\n\n## Why\n\nTrying to better organize things\n\n## How\n\n## Tests\n\nNo functional changes here.",
          "timestamp": "2025-07-22T12:39:21-04:00",
          "tree_id": "1ab036752fc8adf7ad2757741d4e274ab0e73c64",
          "url": "https://github.com/paradedb/paradedb/commit/77c6cd1aeb5f5c03bba892a38cd792a113cfbd39"
        },
        "date": 1753203297751,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.728058499733118, max cpu: 9.4395275, count: 55046"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.609375,
            "unit": "median mem",
            "extra": "avg mem: 59.06565276087272, max mem: 81.859375, count: 55046"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.577862812576371, max cpu: 9.266409, count: 55046"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 54.859375,
            "unit": "median mem",
            "extra": "avg mem: 53.741005250154416, max mem: 76.984375, count: 55046"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.737606933187179, max cpu: 9.402546, count: 55046"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.734375,
            "unit": "median mem",
            "extra": "avg mem: 59.31283012162555, max mem: 81.859375, count: 55046"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6021094,
            "unit": "median cpu",
            "extra": "avg cpu: 4.291801104196035, max cpu: 4.692082, count: 55046"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.359375,
            "unit": "median mem",
            "extra": "avg mem: 59.885491225520475, max mem: 82.984375, count: 55046"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.160305,
            "unit": "median cpu",
            "extra": "avg cpu: 7.3716793049992475, max cpu: 23.346306, count: 110092"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.05859375,
            "unit": "median mem",
            "extra": "avg mem: 63.92471190288577, max mem: 92.41015625, count: 110092"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3695,
            "unit": "median block_count",
            "extra": "avg block_count: 3714.4300403299058, max block_count: 6672.0, count: 55046"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.936543981397376, max segment_count: 27.0, count: 55046"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 6.209776214579861, max cpu: 14.173229, count: 55046"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 68.296875,
            "unit": "median mem",
            "extra": "avg mem: 68.15582216180557, max mem: 96.20703125, count: 55046"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.375605597686752, max cpu: 4.7058825, count: 55046"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.8046875,
            "unit": "median mem",
            "extra": "avg mem: 56.487118373156086, max mem: 80.828125, count: 55046"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "1e26a38533fa872a935955128b2ecd08b3febf66",
          "message": "perf: Skip computing scores if not requested for top-n field queries (#2892)\n\n## What\n\n`SearchIndexReader::{top_by_field_in_segments,\ntop_by_string_field_in_segments}` were not using\n`SearchIndexReader::need_scores`, and were instead universally enabling\nscores.\n\nUse the `enable_scoring` helper and `self.need_scores` to skip computing\nscores where possible.\n\n## Why\n\nComputing scores requires field norms, which ([if they have not been\ndisabled](https://docs.paradedb.com/documentation/indexing/record)) can\ntake time to load and use.",
          "timestamp": "2025-07-22T15:58:56-07:00",
          "tree_id": "2a41c9e06be04ef92fed2b265dc3f90340fb0e37",
          "url": "https://github.com/paradedb/paradedb/commit/1e26a38533fa872a935955128b2ecd08b3febf66"
        },
        "date": 1753226073332,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.7000672420128735, max cpu: 9.421001, count: 55159"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 60.0859375,
            "unit": "median mem",
            "extra": "avg mem: 59.99806496899871, max mem: 83.7109375, count: 55159"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.689766112496035, max cpu: 9.476802, count: 55159"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.5859375,
            "unit": "median mem",
            "extra": "avg mem: 53.02815879434906, max mem: 77.7109375, count: 55159"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.782111730917777, max cpu: 9.4395275, count: 55159"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 58.9609375,
            "unit": "median mem",
            "extra": "avg mem: 58.82779357176526, max mem: 83.3359375, count: 55159"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.4425078554270545, max cpu: 4.7197638, count: 55159"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.5859375,
            "unit": "median mem",
            "extra": "avg mem: 59.49116573791222, max mem: 83.7109375, count: 55159"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.30794938479934, max cpu: 23.809525, count: 110318"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 72.85546875,
            "unit": "median mem",
            "extra": "avg mem: 73.30897889368688, max mem: 104.1328125, count: 110318"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3714,
            "unit": "median block_count",
            "extra": "avg block_count: 3748.4774742109175, max block_count: 6738.0, count: 55159"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.89356224732138, max segment_count: 28.0, count: 55159"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 6.24182648101196, max cpu: 14.285715, count: 55159"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 78.265625,
            "unit": "median mem",
            "extra": "avg mem: 78.94608193755779, max mem: 106.18359375, count: 55159"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.1252370982549325, max cpu: 4.6829267, count: 55159"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.4375,
            "unit": "median mem",
            "extra": "avg mem: 58.24563201664733, max mem: 83.02734375, count: 55159"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753281704910,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.723666786486285, max cpu: 9.448819, count: 55205"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.734375,
            "unit": "median mem",
            "extra": "avg mem: 58.97496179014582, max mem: 81.859375, count: 55205"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.629144149309058, max cpu: 9.467456, count: 55205"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.609375,
            "unit": "median mem",
            "extra": "avg mem: 52.35062975500408, max mem: 75.484375, count: 55205"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.723927866162107, max cpu: 9.4395275, count: 55205"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.109375,
            "unit": "median mem",
            "extra": "avg mem: 60.04589371433747, max mem: 83.734375, count: 55205"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.447449667408074, max cpu: 4.655674, count: 55205"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.984375,
            "unit": "median mem",
            "extra": "avg mem: 59.27575032832171, max mem: 82.984375, count: 55205"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.289432838702109, max cpu: 23.59882, count: 110410"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.091796875,
            "unit": "median mem",
            "extra": "avg mem: 64.30166853234535, max mem: 92.87890625, count: 110410"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3725,
            "unit": "median block_count",
            "extra": "avg block_count: 3735.9671587718503, max block_count: 6715.0, count: 55205"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.93315822842134, max segment_count: 28.0, count: 55205"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.108100578514883, max cpu: 14.201183, count: 55205"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 77.05078125,
            "unit": "median mem",
            "extra": "avg mem: 77.60639979678018, max mem: 106.796875, count: 55205"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.523926904960996, max cpu: 4.6966734, count: 55205"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.953125,
            "unit": "median mem",
            "extra": "avg mem: 58.66057662915497, max mem: 83.8671875, count: 55205"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753288161443,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.714484220361027, max cpu: 9.628887, count: 55213"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.58203125,
            "unit": "median mem",
            "extra": "avg mem: 58.5160194949559, max mem: 81.83203125, count: 55213"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.579826378348073, max cpu: 4.738401, count: 55213"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.20703125,
            "unit": "median mem",
            "extra": "avg mem: 52.535016379747525, max mem: 75.83203125, count: 55213"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.722597005653521, max cpu: 13.806328, count: 55213"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.33203125,
            "unit": "median mem",
            "extra": "avg mem: 59.588097175936824, max mem: 82.95703125, count: 55213"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.589408137404227, max cpu: 4.7058825, count: 55213"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.95703125,
            "unit": "median mem",
            "extra": "avg mem: 58.784488240427976, max mem: 82.20703125, count: 55213"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.436629582476354, max cpu: 28.944725, count: 110426"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 70,
            "unit": "median mem",
            "extra": "avg mem: 70.20937313930823, max mem: 103.37890625, count: 110426"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3729,
            "unit": "median block_count",
            "extra": "avg block_count: 3725.3542825059317, max block_count: 6690.0, count: 55213"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.874685309619112, max segment_count: 27.0, count: 55213"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 6.202789853575317, max cpu: 14.385615, count: 55213"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 81.0078125,
            "unit": "median mem",
            "extra": "avg mem: 79.49597934929274, max mem: 107.27734375, count: 55213"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.5845275,
            "unit": "median cpu",
            "extra": "avg cpu: 4.046897783479429, max cpu: 4.701273, count: 55213"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.26171875,
            "unit": "median mem",
            "extra": "avg mem: 57.153220326847844, max mem: 82.2578125, count: 55213"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753290614438,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.7245441940530215, max cpu: 9.571285, count: 55136"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 60.09375,
            "unit": "median mem",
            "extra": "avg mem: 59.435088916497385, max mem: 84.46875, count: 55136"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.6196473698442775, max cpu: 9.421001, count: 55136"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53.71875,
            "unit": "median mem",
            "extra": "avg mem: 53.47295040898868, max mem: 77.34375, count: 55136"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.718309111691525, max cpu: 9.421001, count: 55136"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.34375,
            "unit": "median mem",
            "extra": "avg mem: 59.45411233132617, max mem: 82.59375, count: 55136"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.062548633201506, max cpu: 4.701273, count: 55136"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.71875,
            "unit": "median mem",
            "extra": "avg mem: 59.179602482951246, max mem: 82.59375, count: 55136"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.142857,
            "unit": "median cpu",
            "extra": "avg cpu: 7.289649350438846, max cpu: 23.928215, count: 110272"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.39453125,
            "unit": "median mem",
            "extra": "avg mem: 64.26194680823328, max mem: 93.17578125, count: 110272"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3746,
            "unit": "median block_count",
            "extra": "avg block_count: 3756.412688624492, max block_count: 6761.0, count: 55136"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.873784822983168, max segment_count: 28.0, count: 55136"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 6.235979681372493, max cpu: 14.0625, count: 55136"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 71.109375,
            "unit": "median mem",
            "extra": "avg mem: 70.6088753831435, max mem: 96.94921875, count: 55136"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.58891,
            "unit": "median cpu",
            "extra": "avg cpu: 4.099237585153095, max cpu: 9.134158, count: 55136"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.67578125,
            "unit": "median mem",
            "extra": "avg mem: 56.864297841360454, max mem: 81.921875, count: 55136"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753302211831,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.763969559109568, max cpu: 9.430255, count: 55108"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 60.4453125,
            "unit": "median mem",
            "extra": "avg mem: 60.02412691328845, max mem: 82.9453125, count: 55108"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.621426496074359, max cpu: 9.266409, count: 55108"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.1953125,
            "unit": "median mem",
            "extra": "avg mem: 51.78555220544204, max mem: 75.4453125, count: 55108"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.705202901298985, max cpu: 9.4395275, count: 55108"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.4453125,
            "unit": "median mem",
            "extra": "avg mem: 59.999445832501635, max mem: 83.6953125, count: 55108"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.115633463698556, max cpu: 4.6421666, count: 55108"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.4453125,
            "unit": "median mem",
            "extra": "avg mem: 59.424099608949696, max mem: 82.9453125, count: 55108"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.449726308303104, max cpu: 23.121387, count: 110216"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.5,
            "unit": "median mem",
            "extra": "avg mem: 64.46534291187305, max mem: 92.94921875, count: 110216"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3692,
            "unit": "median block_count",
            "extra": "avg block_count: 3696.9956630616243, max block_count: 6656.0, count: 55108"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.955269652319082, max segment_count: 28.0, count: 55108"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 6.23667083521531, max cpu: 14.173229, count: 55108"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 68.19921875,
            "unit": "median mem",
            "extra": "avg mem: 68.41318233911139, max mem: 96.0078125, count: 55108"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 5.118873565300126, max cpu: 9.239654, count: 55108"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.5859375,
            "unit": "median mem",
            "extra": "avg mem: 57.58825425754881, max mem: 83.70703125, count: 55108"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753309905119,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.76515919932957, max cpu: 9.542743, count: 55229"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 60.0625,
            "unit": "median mem",
            "extra": "avg mem: 59.45992141809557, max mem: 82.5625, count: 55229"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.5892375311670826, max cpu: 9.29332, count: 55229"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 51.8125,
            "unit": "median mem",
            "extra": "avg mem: 51.322954199786345, max mem: 74.3125, count: 55229"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.759133816425645, max cpu: 11.428572, count: 55229"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.0625,
            "unit": "median mem",
            "extra": "avg mem: 59.65792993717069, max mem: 82.1875, count: 55229"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.356671193895047, max cpu: 4.7151275, count: 55229"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.9375,
            "unit": "median mem",
            "extra": "avg mem: 58.630462483477885, max mem: 80.6875, count: 55229"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.213051,
            "unit": "median cpu",
            "extra": "avg cpu: 7.855606950886861, max cpu: 33.73494, count: 110458"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 68.8984375,
            "unit": "median mem",
            "extra": "avg mem: 69.07968869530727, max mem: 100.34375, count: 110458"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3600,
            "unit": "median block_count",
            "extra": "avg block_count: 3619.4832424994115, max block_count: 6496.0, count: 55229"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.887703923663294, max segment_count: 28.0, count: 55229"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.219392906189224, max cpu: 15.035239, count: 55229"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 76.1328125,
            "unit": "median mem",
            "extra": "avg mem: 76.95274865503178, max mem: 102.9140625, count: 55229"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.071533613214925, max cpu: 9.356726, count: 55229"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 56.83203125,
            "unit": "median mem",
            "extra": "avg mem: 56.299418387531915, max mem: 80.04296875, count: 55229"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753373361517,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.716213008508838, max cpu: 9.421001, count: 55200"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.703125,
            "unit": "median mem",
            "extra": "avg mem: 59.586900758605076, max mem: 82.203125, count: 55200"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.686083673039811, max cpu: 9.384164, count: 55200"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.578125,
            "unit": "median mem",
            "extra": "avg mem: 52.81024286684782, max mem: 76.203125, count: 55200"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.744411029361194, max cpu: 9.4395275, count: 55200"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 61.578125,
            "unit": "median mem",
            "extra": "avg mem: 60.89347005208333, max mem: 84.078125, count: 55200"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.323544527566861, max cpu: 4.701273, count: 55200"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.453125,
            "unit": "median mem",
            "extra": "avg mem: 59.49939311594203, max mem: 82.953125, count: 55200"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.314684923477478, max cpu: 23.210833, count: 110400"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 63.86328125,
            "unit": "median mem",
            "extra": "avg mem: 64.05082006482111, max mem: 92.63671875, count: 110400"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3732,
            "unit": "median block_count",
            "extra": "avg block_count: 3738.615670289855, max block_count: 6692.0, count: 55200"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.906847826086956, max segment_count: 28.0, count: 55200"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 6.158984185259411, max cpu: 14.187191, count: 55200"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 69.44921875,
            "unit": "median mem",
            "extra": "avg mem: 69.37170006793478, max mem: 96.92578125, count: 55200"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.765710775050864, max cpu: 9.320388, count: 55200"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.33203125,
            "unit": "median mem",
            "extra": "avg mem: 56.739362828351446, max mem: 81.3203125, count: 55200"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753387538515,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.726879781102428, max cpu: 9.552238, count: 55161"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59,
            "unit": "median mem",
            "extra": "avg mem: 59.020514947154695, max mem: 82.625, count: 55161"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.691855695019911, max cpu: 9.448819, count: 55161"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53,
            "unit": "median mem",
            "extra": "avg mem: 53.382716049382715, max mem: 77.375, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.724941827753252, max cpu: 9.430255, count: 55161"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.5,
            "unit": "median mem",
            "extra": "avg mem: 60.627900600061636, max mem: 84.125, count: 55161"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.612382002142849, max cpu: 4.733728, count: 55161"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.375,
            "unit": "median mem",
            "extra": "avg mem: 59.028641159514876, max mem: 83.0, count: 55161"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.39883803025834, max cpu: 24.0, count: 110322"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 69.67578125,
            "unit": "median mem",
            "extra": "avg mem: 69.76470992299814, max mem: 103.12890625, count: 110322"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3723,
            "unit": "median block_count",
            "extra": "avg block_count: 3738.6495712550536, max block_count: 6717.0, count: 55161"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.891952647703993, max segment_count: 29.0, count: 55161"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.0435413687555615, max cpu: 14.371258, count: 55161"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 77.24609375,
            "unit": "median mem",
            "extra": "avg mem: 76.64235211755135, max mem: 105.10546875, count: 55161"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.478830759525101, max cpu: 4.7244096, count: 55161"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.05078125,
            "unit": "median mem",
            "extra": "avg mem: 57.35790444675586, max mem: 82.359375, count: 55161"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753472975546,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.7188420155916475, max cpu: 9.599999, count: 55107"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.34765625,
            "unit": "median mem",
            "extra": "avg mem: 59.05584965669062, max mem: 82.22265625, count: 55107"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.678945651917628, max cpu: 9.393347, count: 55107"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53.34765625,
            "unit": "median mem",
            "extra": "avg mem: 53.2364147108126, max mem: 76.59765625, count: 55107"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.74443756622018, max cpu: 9.60961, count: 55107"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 58.59765625,
            "unit": "median mem",
            "extra": "avg mem: 58.42434618673671, max mem: 81.47265625, count: 55107"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.302641295013271, max cpu: 4.7244096, count: 55107"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.09765625,
            "unit": "median mem",
            "extra": "avg mem: 59.463635872597855, max mem: 82.22265625, count: 55107"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.527316286636915, max cpu: 23.166023, count: 110214"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 69.14453125,
            "unit": "median mem",
            "extra": "avg mem: 69.06166979694049, max mem: 103.2578125, count: 110214"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3702,
            "unit": "median block_count",
            "extra": "avg block_count: 3708.902153991326, max block_count: 6667.0, count: 55107"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.877837661277152, max segment_count: 27.0, count: 55107"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 6.186396005006347, max cpu: 18.461538, count: 55107"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 77.09375,
            "unit": "median mem",
            "extra": "avg mem: 76.7672259337516, max mem: 103.88671875, count: 55107"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.122426944624843, max cpu: 9.160305, count: 55107"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.40234375,
            "unit": "median mem",
            "extra": "avg mem: 57.91387125274466, max mem: 82.3125, count: 55107"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753474723093,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.71495174895141, max cpu: 9.4395275, count: 55112"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 57.83984375,
            "unit": "median mem",
            "extra": "avg mem: 58.815881820769526, max mem: 83.33984375, count: 55112"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.560942590393589, max cpu: 9.239654, count: 55112"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.58984375,
            "unit": "median mem",
            "extra": "avg mem: 53.35949712347129, max mem: 76.21484375, count: 55112"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.750611210654795, max cpu: 9.458128, count: 55112"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.71484375,
            "unit": "median mem",
            "extra": "avg mem: 60.72465168940067, max mem: 84.08984375, count: 55112"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.210165249887273, max cpu: 4.6966734, count: 55112"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 58.21484375,
            "unit": "median mem",
            "extra": "avg mem: 57.65876136322398, max mem: 80.71484375, count: 55112"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.186603,
            "unit": "median cpu",
            "extra": "avg cpu: 7.485754471741197, max cpu: 27.77242, count: 110224"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 70.453125,
            "unit": "median mem",
            "extra": "avg mem: 70.92245070974788, max mem: 104.8046875, count: 110224"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3700,
            "unit": "median block_count",
            "extra": "avg block_count: 3710.057065611845, max block_count: 6664.0, count: 55112"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.869865002177384, max segment_count: 28.0, count: 55112"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.017580588607326, max cpu: 14.414414, count: 55112"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 79.92578125,
            "unit": "median mem",
            "extra": "avg mem: 78.62532682027054, max mem: 105.5234375, count: 55112"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 5.4624327236835315, max cpu: 9.467456, count: 55112"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 55.8359375,
            "unit": "median mem",
            "extra": "avg mem: 57.27868115439922, max mem: 81.5625, count: 55112"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753505875860,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.699034658683517, max cpu: 9.448819, count: 55066"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 60.15234375,
            "unit": "median mem",
            "extra": "avg mem: 59.85615982412015, max mem: 83.40234375, count: 55066"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.597440027617207, max cpu: 9.266409, count: 55066"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53.02734375,
            "unit": "median mem",
            "extra": "avg mem: 52.95821257388861, max mem: 77.02734375, count: 55066"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.7100891876480375, max cpu: 9.60961, count: 55066"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.15234375,
            "unit": "median mem",
            "extra": "avg mem: 60.02716619318182, max mem: 83.40234375, count: 55066"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.416741620035754, max cpu: 4.7151275, count: 55066"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.02734375,
            "unit": "median mem",
            "extra": "avg mem: 59.13715856313333, max mem: 83.02734375, count: 55066"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.151573,
            "unit": "median cpu",
            "extra": "avg cpu: 7.398559942074117, max cpu: 23.904383, count: 110132"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 69.6484375,
            "unit": "median mem",
            "extra": "avg mem: 69.57873020415275, max mem: 104.0234375, count: 110132"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3670,
            "unit": "median block_count",
            "extra": "avg block_count: 3706.8630734028256, max block_count: 6668.0, count: 55066"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.877692223876803, max segment_count: 28.0, count: 55066"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 6.07175980686561, max cpu: 14.159292, count: 55066"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 68.55078125,
            "unit": "median mem",
            "extra": "avg mem: 68.46593916845241, max mem: 96.0390625, count: 55066"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.607631369260791, max cpu: 9.221902, count: 55066"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.68359375,
            "unit": "median mem",
            "extra": "avg mem: 57.690857192959356, max mem: 83.86328125, count: 55066"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753710259787,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.747185369042689, max cpu: 9.458128, count: 55027"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.73046875,
            "unit": "median mem",
            "extra": "avg mem: 58.82810072214549, max mem: 81.85546875, count: 55027"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.6695236720665605, max cpu: 9.4395275, count: 55027"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.98046875,
            "unit": "median mem",
            "extra": "avg mem: 53.06446650621513, max mem: 76.60546875, count: 55027"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.723883603042377, max cpu: 9.421001, count: 55027"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.85546875,
            "unit": "median mem",
            "extra": "avg mem: 60.35391532225089, max mem: 84.48046875, count: 55027"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6021094,
            "unit": "median cpu",
            "extra": "avg cpu: 4.441255651882846, max cpu: 4.7244096, count: 55027"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.10546875,
            "unit": "median mem",
            "extra": "avg mem: 60.1454684319743, max mem: 82.98046875, count: 55027"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.17782,
            "unit": "median cpu",
            "extra": "avg cpu: 7.4457072825684625, max cpu: 28.20764, count: 110054"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 67.6953125,
            "unit": "median mem",
            "extra": "avg mem: 68.16706237676505, max mem: 100.91015625, count: 110054"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3724,
            "unit": "median block_count",
            "extra": "avg block_count: 3692.0994784378577, max block_count: 6617.0, count: 55027"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.896487179021207, max segment_count: 27.0, count: 55027"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 6.273260982634399, max cpu: 18.82353, count: 55027"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 77.19140625,
            "unit": "median mem",
            "extra": "avg mem: 77.06003948913715, max mem: 102.97265625, count: 55027"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.31256546271809, max cpu: 9.284333, count: 55027"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.390625,
            "unit": "median mem",
            "extra": "avg mem: 57.273544691696806, max mem: 81.859375, count: 55027"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753727835769,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.724184342473196, max cpu: 9.648242, count: 54788"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 58.9375,
            "unit": "median mem",
            "extra": "avg mem: 59.14895597576112, max mem: 82.1875, count: 54788"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.517077228016024, max cpu: 9.421001, count: 54788"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 51.8125,
            "unit": "median mem",
            "extra": "avg mem: 51.487329570343874, max mem: 75.4375, count: 54788"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.718364898667891, max cpu: 9.599999, count: 54788"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.6875,
            "unit": "median mem",
            "extra": "avg mem: 59.90992781265971, max mem: 82.9375, count: 54788"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 3.695027928028551, max cpu: 4.7105007, count: 54788"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.6875,
            "unit": "median mem",
            "extra": "avg mem: 59.18786960648317, max mem: 81.4375, count: 54788"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.142857,
            "unit": "median cpu",
            "extra": "avg cpu: 7.503341942294739, max cpu: 24.120604, count: 109576"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 68.58203125,
            "unit": "median mem",
            "extra": "avg mem: 68.44700831215322, max mem: 102.8984375, count: 109576"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3637,
            "unit": "median block_count",
            "extra": "avg block_count: 3657.3371358691684, max block_count: 6585.0, count: 54788"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.906749653208731, max segment_count: 28.0, count: 54788"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.204921589139144, max cpu: 18.33811, count: 54788"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 67.43359375,
            "unit": "median mem",
            "extra": "avg mem: 67.90952683525589, max mem: 95.77734375, count: 54788"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.58891,
            "unit": "median cpu",
            "extra": "avg cpu: 4.34446941864248, max cpu: 4.692082, count: 54788"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 58.0234375,
            "unit": "median mem",
            "extra": "avg mem: 56.84424416329762, max mem: 81.1171875, count: 54788"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753805212324,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.713435818650765, max cpu: 9.467456, count: 55028"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.33984375,
            "unit": "median mem",
            "extra": "avg mem: 59.52953645473668, max mem: 82.58984375, count: 55028"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.594049016735115, max cpu: 9.257474, count: 55028"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53.71484375,
            "unit": "median mem",
            "extra": "avg mem: 53.36749898915098, max mem: 76.21484375, count: 55028"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.706089760587613, max cpu: 9.467456, count: 55028"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.08984375,
            "unit": "median mem",
            "extra": "avg mem: 59.96783015578433, max mem: 83.71484375, count: 55028"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.413727389411654, max cpu: 4.7197638, count: 55028"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.46484375,
            "unit": "median mem",
            "extra": "avg mem: 60.183731180035615, max mem: 83.33984375, count: 55028"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.160305,
            "unit": "median cpu",
            "extra": "avg cpu: 7.385640107973396, max cpu: 18.934912, count: 110056"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 71.96875,
            "unit": "median mem",
            "extra": "avg mem: 71.67049242970624, max mem: 106.22265625, count: 110056"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3672,
            "unit": "median block_count",
            "extra": "avg block_count: 3700.4649451188484, max block_count: 6628.0, count: 55028"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.910318383368468, max segment_count: 28.0, count: 55028"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 6.148224153646266, max cpu: 15.2019005, count: 55028"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 75.19140625,
            "unit": "median mem",
            "extra": "avg mem: 76.79587416008668, max mem: 105.1328125, count: 55028"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.980066146709051, max cpu: 9.230769, count: 55028"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.51953125,
            "unit": "median mem",
            "extra": "avg mem: 58.1947773321082, max mem: 83.84765625, count: 55028"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753812444870,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.724594086601418, max cpu: 9.402546, count: 55131"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 61.26171875,
            "unit": "median mem",
            "extra": "avg mem: 60.49051449615462, max mem: 84.13671875, count: 55131"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.692296705648295, max cpu: 9.266409, count: 55131"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53.76171875,
            "unit": "median mem",
            "extra": "avg mem: 54.0324479280033, max mem: 77.01171875, count: 55131"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.741726015443258, max cpu: 13.859479, count: 55131"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.13671875,
            "unit": "median mem",
            "extra": "avg mem: 59.84813663988954, max mem: 83.38671875, count: 55131"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.389254339264331, max cpu: 4.6511626, count: 55131"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.13671875,
            "unit": "median mem",
            "extra": "avg mem: 60.48462518535398, max mem: 83.76171875, count: 55131"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.169055,
            "unit": "median cpu",
            "extra": "avg cpu: 7.305623399788633, max cpu: 23.4375, count: 110262"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.06640625,
            "unit": "median mem",
            "extra": "avg mem: 64.49936847860097, max mem: 93.76171875, count: 110262"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3763,
            "unit": "median block_count",
            "extra": "avg block_count: 3722.5955814333133, max block_count: 6667.0, count: 55131"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.918140429159639, max segment_count: 28.0, count: 55131"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 6.184500257877152, max cpu: 14.159292, count: 55131"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 67.2421875,
            "unit": "median mem",
            "extra": "avg mem: 67.91687788233934, max mem: 95.03515625, count: 55131"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.225723713656349, max cpu: 4.7058825, count: 55131"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.625,
            "unit": "median mem",
            "extra": "avg mem: 57.47461692094738, max mem: 82.28515625, count: 55131"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753830579041,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.774500456102604, max cpu: 9.619239, count: 55156"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.359375,
            "unit": "median mem",
            "extra": "avg mem: 59.24763313374792, max mem: 81.859375, count: 55156"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.69675745438426, max cpu: 9.4395275, count: 55156"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 51.859375,
            "unit": "median mem",
            "extra": "avg mem: 51.85864241877584, max mem: 76.234375, count: 55156"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.712503431250992, max cpu: 9.619239, count: 55156"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.859375,
            "unit": "median mem",
            "extra": "avg mem: 60.60758632333744, max mem: 84.109375, count: 55156"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.410878683339441, max cpu: 4.6966734, count: 55156"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.734375,
            "unit": "median mem",
            "extra": "avg mem: 59.30102912647763, max mem: 82.984375, count: 55156"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.675633029177819, max cpu: 28.857718, count: 110312"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 65.13671875,
            "unit": "median mem",
            "extra": "avg mem: 65.15533650435809, max mem: 91.97265625, count: 110312"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3664,
            "unit": "median block_count",
            "extra": "avg block_count: 3686.3078722169844, max block_count: 6616.0, count: 55156"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.862154615998259, max segment_count: 28.0, count: 55156"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 5.943858539966891, max cpu: 14.131501, count: 55156"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 78.08203125,
            "unit": "median mem",
            "extra": "avg mem: 78.13196391258431, max mem: 107.08984375, count: 55156"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.662505026632863, max cpu: 9.302325, count: 55156"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.28125,
            "unit": "median mem",
            "extra": "avg mem: 56.41237318639405, max mem: 79.66796875, count: 55156"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753899759765,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.737899010594158, max cpu: 9.467456, count: 55113"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.38671875,
            "unit": "median mem",
            "extra": "avg mem: 59.27933234899207, max mem: 83.01171875, count: 55113"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.619920390141909, max cpu: 9.257474, count: 55113"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 53.38671875,
            "unit": "median mem",
            "extra": "avg mem: 53.822715942699546, max mem: 78.13671875, count: 55113"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.736878545250161, max cpu: 9.448819, count: 55113"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.76171875,
            "unit": "median mem",
            "extra": "avg mem: 60.55183384591657, max mem: 83.38671875, count: 55113"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.525673409286273, max cpu: 4.7105007, count: 55113"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.13671875,
            "unit": "median mem",
            "extra": "avg mem: 60.06284665993051, max mem: 84.13671875, count: 55113"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.294767457024382, max cpu: 24.048098, count: 110226"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 75.33984375,
            "unit": "median mem",
            "extra": "avg mem: 75.75096959882423, max mem: 104.77734375, count: 110226"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3707,
            "unit": "median block_count",
            "extra": "avg block_count: 3736.1783608223104, max block_count: 6725.0, count: 55113"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.906410465770326, max segment_count: 33.0, count: 55113"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.160045434464373, max cpu: 14.173229, count: 55113"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 76.6953125,
            "unit": "median mem",
            "extra": "avg mem: 77.54945946283091, max mem: 106.63671875, count: 55113"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 3.910802891731961, max cpu: 4.660194, count: 55113"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.2578125,
            "unit": "median mem",
            "extra": "avg mem: 57.44980157245114, max mem: 82.0625, count: 55113"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753909952444,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.768398971452088, max cpu: 14.229248, count: 55038"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 60.82421875,
            "unit": "median mem",
            "extra": "avg mem: 60.12522307031051, max mem: 83.32421875, count: 55038"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.616821888790827, max cpu: 9.230769, count: 55038"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.19921875,
            "unit": "median mem",
            "extra": "avg mem: 52.3189165184736, max mem: 75.44921875, count: 55038"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.732145203579013, max cpu: 9.4395275, count: 55038"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.69921875,
            "unit": "median mem",
            "extra": "avg mem: 60.64629721737708, max mem: 84.07421875, count: 55038"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.60191839618077, max cpu: 4.7244096, count: 55038"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.07421875,
            "unit": "median mem",
            "extra": "avg mem: 60.239962048948, max mem: 83.69921875, count: 55038"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.204219,
            "unit": "median cpu",
            "extra": "avg cpu: 7.501058590956928, max cpu: 23.099133, count: 110076"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 74.39453125,
            "unit": "median mem",
            "extra": "avg mem: 73.24017830578418, max mem: 103.2734375, count: 110076"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3680,
            "unit": "median block_count",
            "extra": "avg block_count: 3714.1690831788947, max block_count: 6676.0, count: 55038"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.856281114866093, max segment_count: 29.0, count: 55038"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 5.910043180485912, max cpu: 14.145383, count: 55038"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 68.12109375,
            "unit": "median mem",
            "extra": "avg mem: 68.26357485396453, max mem: 95.609375, count: 55038"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 5.364353094486295, max cpu: 9.275363, count: 55038"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.40234375,
            "unit": "median mem",
            "extra": "avg mem: 58.70532852018151, max mem: 83.73828125, count: 55038"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753985486966,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.814938329023441, max cpu: 9.476802, count: 55399"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.53515625,
            "unit": "median mem",
            "extra": "avg mem: 60.00633634801621, max mem: 82.87109375, count: 55399"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.655661483735817, max cpu: 9.393347, count: 55399"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.20703125,
            "unit": "median mem",
            "extra": "avg mem: 52.86118354178325, max mem: 76.171875, count: 55399"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.812203201275629, max cpu: 9.495549, count: 55399"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.33984375,
            "unit": "median mem",
            "extra": "avg mem: 60.22276518980487, max mem: 84.38671875, count: 55399"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.49893209412378, max cpu: 4.738401, count: 55399"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 61.03125,
            "unit": "median mem",
            "extra": "avg mem: 60.900302803299695, max mem: 84.6015625, count: 55399"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.230769,
            "unit": "median cpu",
            "extra": "avg cpu: 7.645770951219346, max cpu: 23.622047, count: 110798"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 63.953125,
            "unit": "median mem",
            "extra": "avg mem: 64.15730671610724, max mem: 92.7109375, count: 110798"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3666,
            "unit": "median block_count",
            "extra": "avg block_count: 3689.151356522681, max block_count: 6607.0, count: 55399"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.890575642159606, max segment_count: 27.0, count: 55399"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 6.039948413236975, max cpu: 14.229248, count: 55399"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 67.69140625,
            "unit": "median mem",
            "extra": "avg mem: 67.91754497768461, max mem: 94.1171875, count: 55399"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.517752720731445, max cpu: 9.230769, count: 55399"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 59.17578125,
            "unit": "median mem",
            "extra": "avg mem: 58.22198872046427, max mem: 83.296875, count: 55399"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753992667595,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.777729987312151, max cpu: 9.495549, count: 55247"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.8828125,
            "unit": "median mem",
            "extra": "avg mem: 60.47963555996253, max mem: 83.48046875, count: 55247"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.6983321842897015, max cpu: 9.239654, count: 55247"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 52.28125,
            "unit": "median mem",
            "extra": "avg mem: 52.599899867300486, max mem: 76.265625, count: 55247"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.733298386775287, max cpu: 9.495549, count: 55247"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 59.08984375,
            "unit": "median mem",
            "extra": "avg mem: 60.57903844043568, max mem: 83.9140625, count: 55247"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.555410755438737, max cpu: 4.7197638, count: 55247"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 59.6953125,
            "unit": "median mem",
            "extra": "avg mem: 60.25324649980995, max mem: 84.76171875, count: 55247"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.230769,
            "unit": "median cpu",
            "extra": "avg cpu: 7.572473589905811, max cpu: 23.622047, count: 110494"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 65.11328125,
            "unit": "median mem",
            "extra": "avg mem: 65.41316267031468, max mem: 92.30859375, count: 110494"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3682,
            "unit": "median block_count",
            "extra": "avg block_count: 3694.8317736709687, max block_count: 6628.0, count: 55247"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.899397252339494, max segment_count: 28.0, count: 55247"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.655674,
            "unit": "median cpu",
            "extra": "avg cpu: 6.166115988135061, max cpu: 14.257426, count: 55247"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 67.75,
            "unit": "median mem",
            "extra": "avg mem: 68.35489448239271, max mem: 95.4140625, count: 55247"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 5.205790891874792, max cpu: 9.347614, count: 55247"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 56.28125,
            "unit": "median mem",
            "extra": "avg mem: 56.8662808472632, max mem: 80.82421875, count: 55247"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754063514898,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.777154258590943, max cpu: 9.467456, count: 55126"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 59.84765625,
            "unit": "median mem",
            "extra": "avg mem: 59.43676283933625, max mem: 81.93359375, count: 55126"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.61503083818135, max cpu: 9.476802, count: 55126"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 51.244140625,
            "unit": "median mem",
            "extra": "avg mem: 51.679180493891266, max mem: 74.921875, count: 55126"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.772576044194862, max cpu: 9.628887, count: 55126"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 60.20703125,
            "unit": "median mem",
            "extra": "avg mem: 60.36458883682382, max mem: 82.17578125, count: 55126"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.307339286078405, max cpu: 4.7151275, count: 55126"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 60.4296875,
            "unit": "median mem",
            "extra": "avg mem: 59.39243470356547, max mem: 82.546875, count: 55126"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.230769,
            "unit": "median cpu",
            "extra": "avg cpu: 7.901156133768343, max cpu: 23.66864, count: 110252"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 65.83203125,
            "unit": "median mem",
            "extra": "avg mem: 65.50605282387167, max mem: 91.546875, count: 110252"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3623,
            "unit": "median block_count",
            "extra": "avg block_count: 3606.0614954830753, max block_count: 6447.0, count: 55126"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 8,
            "unit": "median segment_count",
            "extra": "avg segment_count: 8.921706635707288, max segment_count: 29.0, count: 55126"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.129565009894058, max cpu: 14.428859, count: 55126"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 81.5,
            "unit": "median mem",
            "extra": "avg mem: 80.63895156096942, max mem: 108.0, count: 55126"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.668302796253109, max cpu: 9.320388, count: 55126"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 57.5703125,
            "unit": "median mem",
            "extra": "avg mem: 56.82361168901698, max mem: 81.24609375, count: 55126"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "309944e7eb5d08d60af4a4b78822d7da10f12323",
          "message": "chore: Upgrade to `0.16.5` (#2928)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-08-03T18:49:51Z",
          "url": "https://github.com/paradedb/paradedb/commit/309944e7eb5d08d60af4a4b78822d7da10f12323"
        },
        "date": 1754321878222,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 9.213051,
            "unit": "median cpu",
            "extra": "avg cpu: 7.492926175596746, max cpu: 23.66864, count: 55230"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 94.56640625,
            "unit": "median mem",
            "extra": "avg mem: 96.45628600002263, max mem: 124.81640625, count: 55230"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.733146627252513, max cpu: 9.356726, count: 55230"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 85.3046875,
            "unit": "median mem",
            "extra": "avg mem: 84.6775689446406, max mem: 96.34765625, count: 55230"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6647234,
            "unit": "median cpu",
            "extra": "avg cpu: 6.896414924202699, max cpu: 23.143684, count: 55230"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 95.67578125,
            "unit": "median mem",
            "extra": "avg mem: 97.36746057679251, max mem: 125.9921875, count: 55230"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.564625557174036, max cpu: 9.213051, count: 55230"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 94.984375,
            "unit": "median mem",
            "extra": "avg mem: 95.72484885648652, max mem: 116.98828125, count: 55230"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.248554,
            "unit": "median cpu",
            "extra": "avg cpu: 8.0099846750928, max cpu: 24.0, count: 110460"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 99.4140625,
            "unit": "median mem",
            "extra": "avg mem: 102.12619705379775, max mem: 136.453125, count: 110460"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 7916,
            "unit": "median block_count",
            "extra": "avg block_count: 8285.384881405034, max block_count: 12302.0, count: 55230"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 119,
            "unit": "median segment_count",
            "extra": "avg segment_count: 118.66478363208401, max segment_count: 387.0, count: 55230"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.024493686712132, max cpu: 18.713451, count: 55230"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 106.03125,
            "unit": "median mem",
            "extra": "avg mem: 108.4919137159379, max mem: 133.5625, count: 55230"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 18.514948,
            "unit": "median cpu",
            "extra": "avg cpu: 16.526289841255544, max cpu: 28.514853, count: 55230"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 93.84375,
            "unit": "median mem",
            "extra": "avg mem: 91.89584238638422, max mem: 96.33203125, count: 55230"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754413619825,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.753899733175351, max cpu: 9.458128, count: 55242"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 57.2890625,
            "unit": "median mem",
            "extra": "avg mem: 57.21267587388219, max mem: 77.6015625, count: 55242"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.668914667194555, max cpu: 9.275363, count: 55242"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 50.25390625,
            "unit": "median mem",
            "extra": "avg mem: 49.75873563988903, max mem: 69.65625, count: 55242"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.794398878579463, max cpu: 9.448819, count: 55242"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 55.73828125,
            "unit": "median mem",
            "extra": "avg mem: 56.71778202895894, max mem: 76.4609375, count: 55242"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.3116005930772365, max cpu: 4.7151275, count: 55242"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 56.83984375,
            "unit": "median mem",
            "extra": "avg mem: 56.02383306066942, max mem: 75.546875, count: 55242"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.221902,
            "unit": "median cpu",
            "extra": "avg cpu: 7.593450533242609, max cpu: 23.59882, count: 110484"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 62.3203125,
            "unit": "median mem",
            "extra": "avg mem: 62.00243742872271, max mem: 86.6875, count: 110484"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3149,
            "unit": "median block_count",
            "extra": "avg block_count: 3193.000705984577, max block_count: 5685.0, count: 55242"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 9,
            "unit": "median segment_count",
            "extra": "avg segment_count: 9.335270265377792, max segment_count: 26.0, count: 55242"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 5.918265175106254, max cpu: 14.201183, count: 55242"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 74.16015625,
            "unit": "median mem",
            "extra": "avg mem: 74.11843379188389, max mem: 96.64453125, count: 55242"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.095573214886237, max cpu: 4.660194, count: 55242"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 53.74609375,
            "unit": "median mem",
            "extra": "avg mem: 53.44294677283589, max mem: 75.05078125, count: 55242"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754416008644,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.762980587297242, max cpu: 9.476802, count: 55280"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 56.90625,
            "unit": "median mem",
            "extra": "avg mem: 56.41433024206313, max mem: 75.453125, count: 55280"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.673868370689208, max cpu: 9.467456, count: 55280"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 49.56640625,
            "unit": "median mem",
            "extra": "avg mem: 49.30081502690847, max mem: 67.15625, count: 55280"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.720844570544102, max cpu: 9.476802, count: 55280"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 56.33203125,
            "unit": "median mem",
            "extra": "avg mem: 56.304506037445734, max mem: 74.75390625, count: 55280"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.566082404457462, max cpu: 4.6966734, count: 55280"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 55.92578125,
            "unit": "median mem",
            "extra": "avg mem: 55.86638667635221, max mem: 75.6171875, count: 55280"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.195402,
            "unit": "median cpu",
            "extra": "avg cpu: 7.350401092637837, max cpu: 19.184652, count: 110560"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 72.39453125,
            "unit": "median mem",
            "extra": "avg mem: 72.3180334419659, max mem: 96.6171875, count: 110560"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3161,
            "unit": "median block_count",
            "extra": "avg block_count: 3161.827026049204, max block_count: 5603.0, count: 55280"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 9,
            "unit": "median segment_count",
            "extra": "avg segment_count: 9.518650506512301, max segment_count: 28.0, count: 55280"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 6.124441760194426, max cpu: 14.953271, count: 55280"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 73.36328125,
            "unit": "median mem",
            "extra": "avg mem: 73.40056177075796, max mem: 98.06640625, count: 55280"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 2.6100822782840405, max cpu: 9.284333, count: 55280"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 53.078125,
            "unit": "median mem",
            "extra": "avg mem: 52.59300591873191, max mem: 73.0, count: 55280"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754422441764,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.753525030715085, max cpu: 13.93998, count: 55311"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 55.18359375,
            "unit": "median mem",
            "extra": "avg mem: 56.05169144417476, max mem: 74.65234375, count: 55311"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 4.6514222394616205, max cpu: 9.430255, count: 55311"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 50.53515625,
            "unit": "median mem",
            "extra": "avg mem: 50.23014939105693, max mem: 69.484375, count: 55311"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.776778141864732, max cpu: 9.514371, count: 55311"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 57.35546875,
            "unit": "median mem",
            "extra": "avg mem: 57.336850942850425, max mem: 75.73046875, count: 55311"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 4.552392630549274, max cpu: 4.743083, count: 55311"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 56.27734375,
            "unit": "median mem",
            "extra": "avg mem: 56.00492901784907, max mem: 76.3046875, count: 55311"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.230769,
            "unit": "median cpu",
            "extra": "avg cpu: 7.84319927738316, max cpu: 27.053139, count: 110622"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 60.24609375,
            "unit": "median mem",
            "extra": "avg mem: 60.522411236293415, max mem: 84.6484375, count: 110622"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3129,
            "unit": "median block_count",
            "extra": "avg block_count: 3158.892245665419, max block_count: 5584.0, count: 55311"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 9,
            "unit": "median segment_count",
            "extra": "avg segment_count: 9.451555748404477, max segment_count: 27.0, count: 55311"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 6.0163240309451185, max cpu: 14.201183, count: 55311"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 66.45703125,
            "unit": "median mem",
            "extra": "avg mem: 66.02147854857081, max mem: 87.71484375, count: 55311"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.09077703286137, max cpu: 4.6511626, count: 55311"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 51.51953125,
            "unit": "median mem",
            "extra": "avg mem: 50.960633748824826, max mem: 72.28515625, count: 55311"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754538526906,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.791377888077656, max cpu: 9.590409, count: 55301"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 57.203125,
            "unit": "median mem",
            "extra": "avg mem: 56.67533871448979, max mem: 75.9765625, count: 55301"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.615979437043821, max cpu: 9.275363, count: 55301"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 49.19140625,
            "unit": "median mem",
            "extra": "avg mem: 49.141306497622104, max mem: 68.921875, count: 55301"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.7313692519704675, max cpu: 9.590409, count: 55301"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 56.1484375,
            "unit": "median mem",
            "extra": "avg mem: 56.17520238671091, max mem: 76.15234375, count: 55301"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.489661040776451, max cpu: 4.733728, count: 55301"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 55.04296875,
            "unit": "median mem",
            "extra": "avg mem: 55.738918741297624, max mem: 75.41796875, count: 55301"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.204219,
            "unit": "median cpu",
            "extra": "avg cpu: 7.344377239713136, max cpu: 28.77123, count: 110602"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 64.4765625,
            "unit": "median mem",
            "extra": "avg mem: 64.90367746655802, max mem: 94.22265625, count: 110602"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3192,
            "unit": "median block_count",
            "extra": "avg block_count: 3182.729299651001, max block_count: 5617.0, count: 55301"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 9,
            "unit": "median segment_count",
            "extra": "avg segment_count: 9.494385273322363, max segment_count: 28.0, count: 55301"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 6.0495098034862504, max cpu: 15.335463, count: 55301"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 74.5,
            "unit": "median mem",
            "extra": "avg mem: 73.95800355667167, max mem: 97.6015625, count: 55301"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.655674,
            "unit": "median cpu",
            "extra": "avg cpu: 5.271471640983145, max cpu: 9.29332, count: 55301"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 54.875,
            "unit": "median mem",
            "extra": "avg mem: 52.98059532998951, max mem: 73.1875, count: 55301"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0e385c88549677dc0e47d2509ea746cb7170bd8d",
          "message": "perf: Use Arrow for fast field execution (#2924)\n\n## What\n\nSwitches `Mixed` fast fields execution to fetching data into Arrow\narrays. A followup change will remove `Numeric`.\n\n## Why\n\nThis change is necessary for `Mixed`'s performance to match `Numeric`\nexecution. The:\n1. creation and destruction of `TantivyValue` and `OwnedValue`\n2. allocation and encoding/decoding of Strings\n\n...represented the largest remaining bottlenecks in (`Mixed`) fast\nfields execution.\n\nArrow removes those overheads for data held in memory, similar to how\nour `FFType` wrapper allows us to avoid `OwnedValue` overheads when\nfetching individual rows. String overhead is reduced by directly copying\nfrom the term dictionary into a `StringViewArray`, which has a single\ncontiguous buffer for the string data, and then a separate series of\nviews into that buffer (similar to allocating strings in an arena).\n\nFuture work could:\n* Push arrow arrays further down into Tantivy (e.g. as a `first_vals`\nvariant), removing additional overheads involved in fetching batches of\nrows.\n* Feed the arrow outputs of `Mixed` execution direct directly into a\nvectorized join implementation (e.g. DataFusion).\n\n## Tests\n\nGives a 1.6x speedup for `bucket-string-nofilter` and\n`bucket-string-filter`, with other changes being ~ in the noise.",
          "timestamp": "2025-08-09T14:16:01-07:00",
          "tree_id": "1fcdcb6500bb2e854ecfc613581ee13bc002b050",
          "url": "https://github.com/paradedb/paradedb/commit/0e385c88549677dc0e47d2509ea746cb7170bd8d"
        },
        "date": 1754775208785,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.766785501955103, max cpu: 9.667674, count: 55278"
          },
          {
            "name": "Custom Scan - Primary - mem",
            "value": 55.6640625,
            "unit": "median mem",
            "extra": "avg mem: 56.71873049630956, max mem: 76.734375, count: 55278"
          },
          {
            "name": "Delete values - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.701707171762333, max cpu: 9.467456, count: 55278"
          },
          {
            "name": "Delete values - Primary - mem",
            "value": 48.30859375,
            "unit": "median mem",
            "extra": "avg mem: 48.9884808801648, max mem: 69.05078125, count: 55278"
          },
          {
            "name": "Index Only Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.805272045780728, max cpu: 9.667674, count: 55278"
          },
          {
            "name": "Index Only Scan - Primary - mem",
            "value": 58.46875,
            "unit": "median mem",
            "extra": "avg mem: 58.19399430492239, max mem: 77.62109375, count: 55278"
          },
          {
            "name": "Index Scan - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.621781684664274, max cpu: 4.6829267, count: 55278"
          },
          {
            "name": "Index Scan - Primary - mem",
            "value": 55.44140625,
            "unit": "median mem",
            "extra": "avg mem: 56.45421233074189, max mem: 75.93359375, count: 55278"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.230769,
            "unit": "median cpu",
            "extra": "avg cpu: 7.579562432541505, max cpu: 23.715414, count: 110556"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 61.48828125,
            "unit": "median mem",
            "extra": "avg mem: 62.020223419013895, max mem: 87.97265625, count: 110556"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 3167,
            "unit": "median block_count",
            "extra": "avg block_count: 3210.6235030210933, max block_count: 5697.0, count: 55278"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 9,
            "unit": "median segment_count",
            "extra": "avg segment_count: 9.344947356995549, max segment_count: 27.0, count: 55278"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 5.993336670233969, max cpu: 14.173229, count: 55278"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 75.2109375,
            "unit": "median mem",
            "extra": "avg mem: 75.19483197429356, max mem: 98.19921875, count: 55278"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 3.9704507949839476, max cpu: 4.669261, count: 55278"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 53.8125,
            "unit": "median mem",
            "extra": "avg mem: 53.586293725012666, max mem: 74.625, count: 55278"
          }
        ]
      }
    ],
    "pg_search bulk-updates.toml Performance - TPS": [
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "committer": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "id": "6603901ab5f5342e3de4b0bfc99065823a606d92",
          "message": "Fix mintlify check workflow",
          "timestamp": "2025-07-06T17:07:57Z",
          "url": "https://github.com/paradedb/paradedb/commit/6603901ab5f5342e3de4b0bfc99065823a606d92"
        },
        "date": 1752441623360,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.72887545032169,
            "unit": "median tps",
            "extra": "avg tps: 5.768584719539373, max tps: 8.716128800210523, count: 57645"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.713253241624696,
            "unit": "median tps",
            "extra": "avg tps: 5.115628346933139, max tps: 6.426405477077364, count: 57645"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "71ea95206a8e487805333d573e859dad68dab572",
          "message": "chore: Upgrade to `0.16.1` (#2748)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-30T19:38:06Z",
          "url": "https://github.com/paradedb/paradedb/commit/71ea95206a8e487805333d573e859dad68dab572"
        },
        "date": 1752441637744,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 4.332930784886186,
            "unit": "median tps",
            "extra": "avg tps: 4.36622335309167, max tps: 10.15291804459109, count: 57697"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 6.450037872175752,
            "unit": "median tps",
            "extra": "avg tps: 5.7540834249475745, max tps: 7.855376728286136, count: 57697"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "c0442237441f33c1c51d6c11e29849eda05816a7",
          "message": "chore: Upgrade to `0.16.2` (#2760)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-01T21:30:02Z",
          "url": "https://github.com/paradedb/paradedb/commit/c0442237441f33c1c51d6c11e29849eda05816a7"
        },
        "date": 1752441639624,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 4.301456465473804,
            "unit": "median tps",
            "extra": "avg tps: 4.35498004147254, max tps: 10.498134694926783, count: 57813"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 6.641036523304004,
            "unit": "median tps",
            "extra": "avg tps: 5.90960445933477, max tps: 8.050172021645913, count: 57813"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@paradedb.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "4fd1b2b6b6664d03946be0f4836732f0f40df0cc",
          "message": "chore: Rename datasets and add string paging queries (#2834)\n\n## What\n\nAdd a high-cardinality paging/top-n query to the benchmarks, and rename\ndatasets to match their content. Additionally, improve the generation\nscript for the `docs` dataset to avoid joins and allow for deterministic\nrelative-position queries.\n\n## Why\n\nWe don't currently have a high-cardinality string paging/top-n query in\nthe benchmark. We have top-n on a string column, but only for\nlow-cardinality values (`top_n-string.sql`). The top-n case represented\nan important gap that a user encountered, which #2828 addresses.\n\nThe names of the `benchmark` datasets don't currently describe their\nshape / schema, and for the `join` dataset in particular, that would\ndiscourage using it for other types of queries. We rename it to `docs`\nhere, and then use the `pages` table as the dataset for top-n.\n\n## Tests\n\nTested locally that the new query demonstrates a speedup for #2828.",
          "timestamp": "2025-07-13T18:04:27Z",
          "url": "https://github.com/paradedb/paradedb/commit/4fd1b2b6b6664d03946be0f4836732f0f40df0cc"
        },
        "date": 1752441703127,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.689807276935049,
            "unit": "median tps",
            "extra": "avg tps: 5.7493096415121485, max tps: 8.652629976360576, count: 57145"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.6241845479414,
            "unit": "median tps",
            "extra": "avg tps: 5.028228812972219, max tps: 6.32167699286851, count: 57145"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr",
            "email": "eebbrr@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "e350be5d171ddb28a700c02d8adc32a1a9f4b084",
          "message": "feat: custom fsm (#2765)\n\nA custom FSM implementation that allows us to internally track\nfree/reusable blocks without generating full read+write cycles on every\npage that is returned to the FSM.\n\nThere's a new UDF called `paradedb.fsm_info()` that returns a table of\nFSM block numbers in use and the free block numbers they contain.\n\n## Why\n\nTo reduce I/O during segment merging and garbage collection, with an aim of reducing WAL traffic for enterprise.",
          "timestamp": "2025-07-09T15:42:21Z",
          "url": "https://github.com/paradedb/paradedb/commit/e350be5d171ddb28a700c02d8adc32a1a9f4b084"
        },
        "date": 1752441706737,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.639582445520897,
            "unit": "median tps",
            "extra": "avg tps: 5.6956952292315375, max tps: 8.517918359131018, count: 57747"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.852217281970316,
            "unit": "median tps",
            "extra": "avg tps: 5.236515098604407, max tps: 6.6221895895401435, count: 57747"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Kaihong.Wang",
            "username": "wangkhc",
            "email": "wangkhc@163.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "7f560910072d570e0dca4d19a9fe02b47f6917e5",
          "message": "fix: Add missing stopword filters to Jieba tokenizer (#2790)\n\n### What\n\nThis PR fixes a bug where the Jieba tokenizer was missing stopword\nfiltering capabilities that are available in other tokenizers. The fix\nadds both custom stopword lists and language-based stopword filtering\nsupport to the Jieba tokenizer. (Fix #2789 )\n\n### Why\n\nThe Jieba tokenizer implementation was inconsistent with other\ntokenizers in the codebase - it lacked the\n`.filter(filters.stopwords_language())` and\n`.filter(filters.stopwords())` calls that are present in all other\ntokenizer variants (ICU, Chinese Lindera, etc.). This meant users\ncouldn't filter out common Chinese stop words like \"的\", \"了\", \"在\" or\nEnglish stop words when using mixed-language content, reducing search\nquality and relevance.\n\nThis inconsistency was discovered when comparing the Jieba tokenizer\nimplementation against other tokenizer variants in\n`tokenizers/src/manager.rs`.\n\n### How\n\n1. **Bug Fix:** Modified `tokenizers/src/manager.rs` in the\n`SearchTokenizer::Jieba` case within `to_tantivy_tokenizer()` method:\n- Added `.filter(filters.stopwords_language())` to support\nlanguage-based stopwords (e.g., English, Spanish, etc.)\n- Added `.filter(filters.stopwords())` to support custom stopword lists\n- This brings Jieba tokenizer in line with all other tokenizer\nimplementations\n\n2. **Code Changes:**\n   ```rust\n   // Before (missing stopword filters)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .build(),\n   ),\n\n   // After (with stopword filters added)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .filter(filters.stopwords_language())  // ← Added\n           .filter(filters.stopwords())           // ← Added\n           .build(),\n   ),\n   ```\n\n### Tests\n\nAdded comprehensive test coverage in `tokenizers/src/manager.rs`:\n\n1. **`test_jieba_tokenizer_with_stopwords`**: \n   - Tests custom stopword filtering with Chinese stopwords\n- Verifies stopwords are filtered out while content words are preserved\n\n2. **`test_jieba_tokenizer_with_language_stopwords`**:\n   - Tests language-based stopword filtering with English stopwords\n   - Tests the `stopwords_language: \"English\"` configuration option\n\nBoth tests use natural, conversational sentences instead of artificial\ntest data, making them more representative of real-world usage and\nsuitable for open-source community review.\n\n**All existing tests continue to pass** (12/12), ensuring no regressions\nwere introduced.\n\n### Ticket(s) Closed\n\nFix #2789\n\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-09T12:38:14Z",
          "url": "https://github.com/paradedb/paradedb/commit/7f560910072d570e0dca4d19a9fe02b47f6917e5"
        },
        "date": 1752441740010,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.769696596844461,
            "unit": "median tps",
            "extra": "avg tps: 5.794739073987815, max tps: 8.691386703175874, count: 57113"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.883741315690291,
            "unit": "median tps",
            "extra": "avg tps: 5.26567750779199, max tps: 6.649636526050661, count: 57113"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "47bbe518381e1429f228328336dad78e99636ad9",
          "message": "chore: Upgrade to `0.16.0` (#2720)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-23T23:04:37Z",
          "url": "https://github.com/paradedb/paradedb/commit/47bbe518381e1429f228328336dad78e99636ad9"
        },
        "date": 1752441742481,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 4.240568452740235,
            "unit": "median tps",
            "extra": "avg tps: 4.293881237732563, max tps: 9.909646027642086, count: 57023"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 6.288452413373211,
            "unit": "median tps",
            "extra": "avg tps: 5.602531168572085, max tps: 7.634190946984871, count: 57023"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b96e41e25c3fd2126f54aa5cb66d4deffb482047",
          "message": "perf: Lazily load fast fields dictionaries. (#2842)\n\n## What\n\nLazily load fast field dictionaries from buffers: see\nhttps://github.com/paradedb/tantivy/pull/55\n\n## Why\n\nA customer reported slower-than-expected paging on a string/uuid column.\n85% of the time for that query was being spent in _opening_ a fast\nfields string/bytes column, with a large fraction of that time spent\nfully consuming the column's `Dictionary`.\n\n## Tests\n\nSee the attached benchmark results:\n* [`docs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014379545)\n    * No regressions.\n    * 2x faster for `top_n-score`\n    * 1.4x faster for `highlighting` \n* [`logs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014350211)\n    * No regressions.\n    * 4.5x faster for `paging-string-max`\n    * 1.7x faster for `paging-string-median`\n    * 1.6x faster for `paging-string-min`\n\nThe `paging-string-*` benchmarks were added in #2834 to highlight this\nparticular issue.",
          "timestamp": "2025-07-14T08:28:09-07:00",
          "tree_id": "d144335dcb7c7f138a112c01e5b9ff5e0168fe37",
          "url": "https://github.com/paradedb/paradedb/commit/b96e41e25c3fd2126f54aa5cb66d4deffb482047"
        },
        "date": 1752508556118,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.789385451876705,
            "unit": "median tps",
            "extra": "avg tps: 5.804636214719281, max tps: 8.674379744397005, count: 57838"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.748672714614006,
            "unit": "median tps",
            "extra": "avg tps: 5.152934932786995, max tps: 6.5177701114906945, count: 57838"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8",
          "message": "fix: orphaned delete entries get GCed too early (#2845)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nWhen running a new stressgres suite (coming in a future PR), I hit a\nmysterious bug where it looked like vacuum could cause corruption of\nsome pages.\n\nTurns out it's caused by scenarios where:\n\n1. A `DeleteEntry` already exists for a `SegmentMetaEntry`, and a new\none is created\n2. A new, \"fake\" `SegmentMetaEntry` gets created for the purpose of\nstoring the old `DeleteEntry`, so its blocks can get garbage collected\n3. Because this \"fake\" entry is invisible to all readers besides the\ngarbage collector, it doesn't get pinned and can get garbage collected\ntoo early (i.e. while a reader is still pinning the old `DeleteEntry`)\n\nThe solution is to copy all of the contents of the old\n`SegmentMetaEntry` to the fake one, so that the \"pintest blockno\" of the\nfake entry is that same as that of the entry with the new `DeleteEntry`.\nThat way, the `DeleteEntry` doesn't get garbage collected until the pin\nis released.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-14T15:46:29-04:00",
          "tree_id": "3dc55f49de121cf04534f48e3584a2a3ae333407",
          "url": "https://github.com/paradedb/paradedb/commit/ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8"
        },
        "date": 1752523963812,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.480494609292578,
            "unit": "median tps",
            "extra": "avg tps: 5.585624422620473, max tps: 8.383146404457035, count: 57841"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.912292079074403,
            "unit": "median tps",
            "extra": "avg tps: 5.283329559252446, max tps: 6.710982312410053, count: 57841"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "eb3bc1d570c85d60804f6aab2f2d2cf998bd7597",
          "message": "ci: benchmark workflow cleanups (#2851)\n\nThis is an attempt to cleanup the benchmark workflows a little bit.  \n\n- Centralizes checking out the latest benchmark code/suites/actions into\na composite action.\n- figures out the PR #/title being tested\n- Changes the slack notification messages to be reactive to the\nenvironment to hopefully avoid conflicts with -enterprise",
          "timestamp": "2025-07-15T12:15:54-04:00",
          "tree_id": "223c726790d68868f538b7f5aab9cf9904494f44",
          "url": "https://github.com/paradedb/paradedb/commit/eb3bc1d570c85d60804f6aab2f2d2cf998bd7597"
        },
        "date": 1752597726806,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.612745000134143,
            "unit": "median tps",
            "extra": "avg tps: 5.689107998613614, max tps: 8.618832301511047, count: 57799"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.8638299940017795,
            "unit": "median tps",
            "extra": "avg tps: 5.243316530524578, max tps: 6.600835639002686, count: 57799"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c7bdeebed6249725c87b87c276d2e09dfaffd152",
          "message": "ci: publish stressgres benchmark graphs (#2852)\n\nThis will publish every stressgres benchmark graph to the new\n`paradedb/benchmark-data` repo.\n\nIt also ensures that when one of our \"[benchmark]\" labels are applied,\nthat it does *not* pull the benchmarks from main, but instead from the\nPR branch itself.",
          "timestamp": "2025-07-15T18:13:26-04:00",
          "tree_id": "f18bf519521a03613c5b12c861092f24314476ad",
          "url": "https://github.com/paradedb/paradedb/commit/c7bdeebed6249725c87b87c276d2e09dfaffd152"
        },
        "date": 1752619178568,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.566766925788112,
            "unit": "median tps",
            "extra": "avg tps: 5.655814390670281, max tps: 8.593382946119812, count: 57657"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.934081329120296,
            "unit": "median tps",
            "extra": "avg tps: 5.301774457563865, max tps: 6.681558501984027, count: 57657"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "21990816+philippemnoel@users.noreply.github.com"
          },
          "committer": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@gmail.com"
          },
          "id": "8c164d666c4af2049b439690afa7823ab5be2c88",
          "message": "ci: Post \"One-branch Release Model\" Improvements (#2792)\n\n# Ticket(s) Closed\n\n- Closes #N/A\n\n## What\n- Don't make Docker Scout post on PRs that don't modify the Dockerfile,\nnot necessary.\n- Make sure the SchemaBot workflow errors when community contributors\nmake a PR, so we can catch needed changes to the SQL upgrade script.\n- Rename it to SchemaBot\n\n## Why\nQoL\n\n## How\n^\n\n## Tests\nCI",
          "timestamp": "2025-07-08T15:49:16Z",
          "url": "https://github.com/paradedb/paradedb/commit/8c164d666c4af2049b439690afa7823ab5be2c88"
        },
        "date": 1752669154339,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.878177037662716,
            "unit": "median tps",
            "extra": "avg tps: 5.888555221224742, max tps: 8.814803211894557, count: 57286"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.611810368976334,
            "unit": "median tps",
            "extra": "avg tps: 4.998988687018463, max tps: 6.381433860339025, count: 57286"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f7c13c858851200e8ab5395779f821ca484cda0d",
          "message": "feat: Add a custom scan for aggregates (#2763)\n\n## What\n\nAdd a new `CustomScan` (installed with `create_upper_paths_hook`) which\nreplaces simple aggregate plans on `bm25`-indexed tables with aggregate\nimplementations using [Tantivy\naggregates](https://docs.rs/tantivy/latest/tantivy/aggregation/index.html).\n\n## Why\n\nTantivy aggregates can be significantly faster (in benchmarks, we've\nmeasured between 4-10x for bucketing/faceting queries). They have been\nexposed via `paradedb.aggregate` for a while now, but that function\nrequires learning a new API, and does not feel \"Postgres native\".\n\n## How\n\n* Adjust `CustomPathBuilder` and `CustomPathMethods` to allow multiple\n`CustomScan` implementations.\n* Remove the `CustomScan::PrivateData: Default` bound, as it requires\nthe `PrivateData` to start in an illegal state.\n* Move `qual_inspect` to a reusable location.\n* Split out a module to be used by both the `aggregate` API method and\nby the aggregate custom scan.\n* Implement the \"ParadeDB Aggregate Scan\" `CustomScan` type\n    * Add the new `CustomScan` type, hidden behind a GUC\n    * Filter Paths to those which represent `count(*)` queries\n    * Extract `quals` during `CustomPath` generation\n* Replace `Aggrefs` in target lists with `FuncExprs` while producing a\n`CustomPlan`\n* Execute a `count(*)` aggregate by pushing down a `value_count`\naggregate on the `ctid`\n\n## Tests\n\nAdded tests to validate that:\n* the GUC properly controls usage\n* the scan does not trigger for unsupported aggregates, tables without a\n`bm25` index, or group-bys (for now)",
          "timestamp": "2025-07-16T09:12:24-07:00",
          "tree_id": "69b043a9363fcf6ce2de468c97d14e41f593f017",
          "url": "https://github.com/paradedb/paradedb/commit/f7c13c858851200e8ab5395779f821ca484cda0d"
        },
        "date": 1752684017007,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.849339035773006,
            "unit": "median tps",
            "extra": "avg tps: 5.874582869349273, max tps: 8.81310725908372, count: 57682"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.736725883429835,
            "unit": "median tps",
            "extra": "avg tps: 5.1368885469373, max tps: 6.485192803846836, count: 57682"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c779dbb72178c1aa0e14ad94c72eeb9937251acd",
          "message": "feat: a background merger for large layers (#2743)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nLaunches Postgres [dynamic background\nworkers](https://docs.rs/pgrx/latest/pgrx/bgworkers/struct.DynamicBackgroundWorker.html)\nto merge large layers in the background.\n\nThis is configured by a new index setting, `background_layer_sizes`. Any\nlayers specified here will be merged in the background.\n\n## Why\n\nWrite throughput, and create more balanced indexes with fewer segments.\n\n## How\n\n1. The default (foreground) `layer_sizes` is now `10kb`, `100kb`, `1mb`\n2. The default `background_layer_sizes` is `10mb`, `100mb`, `1gb`,\n`10gb`, `100gb`, `1tb`\n3. After `aminsert` merges in the foreground, it checks to see if there\nare enough candidates for a background merge. If so, it spawns a dynamic\nbackground worker process to do the merge.\n4. `amvacuumcleanup` can also spawn a background worker, allowing the\nuser to rebalance their index with a `VACUUM`.\n\nAdditionally, I've tweaked merge policy to make it smarter:\n\n1. Terminate a merge early if we predict that, after the merge, we will\nend up with fewer than `target_segment_count` segments.\n2. Set the max layer size as byte size of index divided by\n`target_segment_count`. Discard all layer sizes above that, which avoids\nthe problem of merging too many segments into one giant segment.\n\nThis has allowed us to delete some code:\n\n1. `force_merge` is deprecated\n2. No longer need to store the segments created by an index build and\navoid merging them, since we just do expensive merges in the background\n\n## Tests\n\nAdded a new stressgres `.toml` file that configures the layer\nsizes/threshold, which triggers background merging.\n\n---------\n\nSigned-off-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>\nCo-authored-by: Philippe Noël <21990816+philippemnoel@users.noreply.github.com>\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-16T12:44:23-04:00",
          "tree_id": "153c406e456a638a6b68ca9123210bbd498d66a5",
          "url": "https://github.com/paradedb/paradedb/commit/c779dbb72178c1aa0e14ad94c72eeb9937251acd"
        },
        "date": 1752685942981,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.577212358905091,
            "unit": "median tps",
            "extra": "avg tps: 5.6823475038272395, max tps: 8.535648948910694, count: 57100"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.709153143729733,
            "unit": "median tps",
            "extra": "avg tps: 5.097887215175038, max tps: 6.450583641664189, count: 57100"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "d197630155f55d13eea0a81841951645a367a5f7",
          "message": "test: Make GUCs a tested property, and add proptests for the aggregate custom scan (#2788)\n\n## What\n\nMove the GUCs that are in use into a test property, which reduces\nruntime while allowing for testing arbitrary combinations of GUCs.\n\nAdditionally, added proptests for the aggregate custom scan by:\n* Adding its GUC to the generated set\n* Expanding the `generated_single_relation` test to use `COUNT(*)` in\nits target list.\n\n## Why\n\nTo add additional test coverage for #2763.",
          "timestamp": "2025-07-16T10:57:16-07:00",
          "tree_id": "6a92b62b640f7a0b2dc7e6507966b75f3bd00594",
          "url": "https://github.com/paradedb/paradedb/commit/d197630155f55d13eea0a81841951645a367a5f7"
        },
        "date": 1752690218199,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 7.028125822196618,
            "unit": "median tps",
            "extra": "avg tps: 6.01131681076183, max tps: 9.024771931488527, count: 57673"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.686592793039652,
            "unit": "median tps",
            "extra": "avg tps: 5.102593450694813, max tps: 6.425915842587539, count: 57673"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "58f6742b2cde46fe2c15077e59a0d5b091ba6000",
          "message": "chore: Upgrade to `0.17.0` (#2870)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-16T19:49:53-04:00",
          "tree_id": "b77118d365b31a4f3478b7c0571cf1f7e9f8a5b2",
          "url": "https://github.com/paradedb/paradedb/commit/58f6742b2cde46fe2c15077e59a0d5b091ba6000"
        },
        "date": 1752711473893,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.65753785428296,
            "unit": "median tps",
            "extra": "avg tps: 5.725175095076279, max tps: 8.611581137764894, count: 57393"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.814467328276157,
            "unit": "median tps",
            "extra": "avg tps: 5.198471742557322, max tps: 6.559758100059857, count: 57393"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "86bc2b092d2857a997cd05af4b554ac96ba225fd",
          "message": "fix: Fix `rescan` for top-n (#2868)\n\n## What\n\nComments in both `Normal` and `TopN` scans claimed that their search\nresults would be reset by `PdbScanState`, but this was incorrect: they\nwere local variables in the struct, and needed to be reset locally.\n\n## Why\n\nFixes issue detected by the prop tests and repro'd by @eeeebbbbrrrr in\n#2751.\n\n## Tests\n\nNew regression test from #2751: thanks @eeeebbbbrrrr!\n\n---------\n\nCo-authored-by: Eric B. Ridge <eebbrr@paradedb.com>",
          "timestamp": "2025-07-17T08:59:32-07:00",
          "tree_id": "ccc9162bb96008badcb3046612d16394604ed6f7",
          "url": "https://github.com/paradedb/paradedb/commit/86bc2b092d2857a997cd05af4b554ac96ba225fd"
        },
        "date": 1752769562347,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.626537041753655,
            "unit": "median tps",
            "extra": "avg tps: 5.714168301975587, max tps: 8.606851060256512, count: 57850"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.716161967135559,
            "unit": "median tps",
            "extra": "avg tps: 5.069803781438279, max tps: 6.494772456869284, count: 57850"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5772be0d3dea751c3609729efcc66cc69d9d30ee",
          "message": "chore: Remove debug output in aggregate scan (#2876)\n\n## What\n\nRemove a stray `println`.\n\n## Why\n\nIt's not doing anyone any good.",
          "timestamp": "2025-07-17T09:46:08-07:00",
          "tree_id": "06a002186c2a701283d73854f64c4225a08aa1a8",
          "url": "https://github.com/paradedb/paradedb/commit/5772be0d3dea751c3609729efcc66cc69d9d30ee"
        },
        "date": 1752772357236,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.783551187720308,
            "unit": "median tps",
            "extra": "avg tps: 5.814183703078753, max tps: 8.68759643312559, count: 57123"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.754033669342192,
            "unit": "median tps",
            "extra": "avg tps: 5.149000423436561, max tps: 6.496827530426565, count: 57123"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "16307a200509cd31b42c1338f3c5b6e097a77fbf",
          "message": "fix: issue #2844 - Use `paradedb.with_index()` when necessary (#2879)\n\n# Ticket(s) Closed\n\n- Closes #2844\n\n## What\n\nWhen the right-hand-side of the `@@@` operator is a complex expression\nthat can't be evaluated to a `T_Const` during planning, we need to\nrewrite it to be a call to our `paradedb.with_index(<indexrelid>,\n<rhs>)` so that it can be properly used in Filter contexts during\nexecution.\n\nThis seems to come up, at least, during RLS rule evaluation if those\nrules use our `@@@` operator.\n\n## Why\n\nSo long as the right-hand-side of `@@@` is a `SearchQueryInput`, we need\nto be able to execute it when Postgres wants us to, whether that's\nduring a scan or, as in this case, a filter being run as part of RLS\nevaluation.\n\n## How\n\nWrapping Postgres expression nodes!\n\n## Tests\n\nI used the re-create the OP from #2844 put together as a regression\ntest. I seem to be lacking the creative energy today to reduce the test\ndown to its simplest form that doesn't require a complicated RLS\nconfiguration.",
          "timestamp": "2025-07-18T13:21:25-04:00",
          "tree_id": "f2e8c7ca2ce45eefd03b85ff45d56f0481ebae1a",
          "url": "https://github.com/paradedb/paradedb/commit/16307a200509cd31b42c1338f3c5b6e097a77fbf"
        },
        "date": 1752860866119,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.765328112560796,
            "unit": "median tps",
            "extra": "avg tps: 5.8071809928134535, max tps: 8.736528945223796, count: 57123"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.7337192378670405,
            "unit": "median tps",
            "extra": "avg tps: 5.128294259143312, max tps: 6.472686673491412, count: 57123"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "8b45b24d47a7cac36696bae2d8505c750a7ee801",
          "message": "test: added more join regression tests + improved when to use Join quals (#2808)\n\n# Ticket(s) Closed\n\n- Closes #2807\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-18T10:40:03-07:00",
          "tree_id": "fb63bd81696cd27d03b6d5724551c3ff8fd59613",
          "url": "https://github.com/paradedb/paradedb/commit/8b45b24d47a7cac36696bae2d8505c750a7ee801"
        },
        "date": 1752861985821,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.922205591763881,
            "unit": "median tps",
            "extra": "avg tps: 5.92464675899667, max tps: 8.912683925923632, count: 57679"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.7212590228355555,
            "unit": "median tps",
            "extra": "avg tps: 5.129602402622485, max tps: 6.460135104348981, count: 57679"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "77c6cd1aeb5f5c03bba892a38cd792a113cfbd39",
          "message": "chore: move code around (#2889)\n\n## What\n\nThis relocates the `src/boostrap/create_bm25.rs` source to\n`src/api/admin.rs`, which I believe is a more sensibile location and\nname.\n\nAdditionally it moves the `#[pg_extern] schema()` function from\n`src/api/builder_fns.rs` to this new(ly renamed) `admin.rs`, as it's an\nadministrative function, not a query builder function.\n\n## Why\n\nTrying to better organize things\n\n## How\n\n## Tests\n\nNo functional changes here.",
          "timestamp": "2025-07-22T12:39:21-04:00",
          "tree_id": "1ab036752fc8adf7ad2757741d4e274ab0e73c64",
          "url": "https://github.com/paradedb/paradedb/commit/77c6cd1aeb5f5c03bba892a38cd792a113cfbd39"
        },
        "date": 1753203942901,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.6959259666478435,
            "unit": "median tps",
            "extra": "avg tps: 5.721619230040979, max tps: 8.544108203805319, count: 57774"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.727776863497542,
            "unit": "median tps",
            "extra": "avg tps: 5.123212965196485, max tps: 6.478526154598859, count: 57774"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "1e26a38533fa872a935955128b2ecd08b3febf66",
          "message": "perf: Skip computing scores if not requested for top-n field queries (#2892)\n\n## What\n\n`SearchIndexReader::{top_by_field_in_segments,\ntop_by_string_field_in_segments}` were not using\n`SearchIndexReader::need_scores`, and were instead universally enabling\nscores.\n\nUse the `enable_scoring` helper and `self.need_scores` to skip computing\nscores where possible.\n\n## Why\n\nComputing scores requires field norms, which ([if they have not been\ndisabled](https://docs.paradedb.com/documentation/indexing/record)) can\ntake time to load and use.",
          "timestamp": "2025-07-22T15:58:56-07:00",
          "tree_id": "2a41c9e06be04ef92fed2b265dc3f90340fb0e37",
          "url": "https://github.com/paradedb/paradedb/commit/1e26a38533fa872a935955128b2ecd08b3febf66"
        },
        "date": 1753226720391,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.906109918599827,
            "unit": "median tps",
            "extra": "avg tps: 5.926036621842602, max tps: 8.926910903061751, count: 57332"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.727330454936477,
            "unit": "median tps",
            "extra": "avg tps: 5.125484989699577, max tps: 6.457580610699357, count: 57332"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753282353770,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.737143974914526,
            "unit": "median tps",
            "extra": "avg tps: 5.76481239017628, max tps: 8.6319738902815, count: 57272"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.80857458580108,
            "unit": "median tps",
            "extra": "avg tps: 5.199256166374755, max tps: 6.5951442859068425, count: 57272"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753288811450,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.769897954069627,
            "unit": "median tps",
            "extra": "avg tps: 5.814791630660318, max tps: 8.74801254383186, count: 57319"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.898272564884106,
            "unit": "median tps",
            "extra": "avg tps: 5.273281654326356, max tps: 6.670788174563515, count: 57319"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753291265435,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.9609205337527476,
            "unit": "median tps",
            "extra": "avg tps: 5.960229748975193, max tps: 8.983528726104336, count: 57349"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.777475086587337,
            "unit": "median tps",
            "extra": "avg tps: 5.1730079015473995, max tps: 6.5489164486734595, count: 57349"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753302856882,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.7173450289029955,
            "unit": "median tps",
            "extra": "avg tps: 5.74337940875444, max tps: 8.63133947686158, count: 57099"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.6936963466610555,
            "unit": "median tps",
            "extra": "avg tps: 5.082201073134665, max tps: 6.4550600365875015, count: 57099"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753310552751,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.502069332326593,
            "unit": "median tps",
            "extra": "avg tps: 5.5725852597941286, max tps: 8.316742192351446, count: 57792"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.8484029610111765,
            "unit": "median tps",
            "extra": "avg tps: 5.235999264564484, max tps: 6.634552340277975, count: 57792"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753374012237,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.730047818722046,
            "unit": "median tps",
            "extra": "avg tps: 5.76744839347705, max tps: 8.637914859566141, count: 57060"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.856370156077371,
            "unit": "median tps",
            "extra": "avg tps: 5.245378493960135, max tps: 6.622653094937561, count: 57060"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753388188956,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.873043071685709,
            "unit": "median tps",
            "extra": "avg tps: 5.883113494523296, max tps: 8.815682839091275, count: 57348"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.8890499630538695,
            "unit": "median tps",
            "extra": "avg tps: 5.276284298118599, max tps: 6.669275663508168, count: 57348"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753473621665,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.5732362251938445,
            "unit": "median tps",
            "extra": "avg tps: 5.6512895557340554, max tps: 8.540053186958016, count: 57074"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.923109150198955,
            "unit": "median tps",
            "extra": "avg tps: 5.29494695674134, max tps: 6.693570142696746, count: 57074"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753475370717,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.841471820548637,
            "unit": "median tps",
            "extra": "avg tps: 5.865662770578089, max tps: 8.79401408408897, count: 57092"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.801450578471894,
            "unit": "median tps",
            "extra": "avg tps: 5.190002513136591, max tps: 6.612234063482204, count: 57092"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753506528025,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.738990058665462,
            "unit": "median tps",
            "extra": "avg tps: 5.787463679648505, max tps: 8.683496295216083, count: 57671"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.826384301389031,
            "unit": "median tps",
            "extra": "avg tps: 5.2118853190391725, max tps: 6.611363868989142, count: 57671"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753710912291,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.653525217006835,
            "unit": "median tps",
            "extra": "avg tps: 5.715703413277119, max tps: 8.599846189525131, count: 57381"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.71584621699024,
            "unit": "median tps",
            "extra": "avg tps: 5.104504254807391, max tps: 6.474075434389928, count: 57381"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753728489101,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 7.080078038031019,
            "unit": "median tps",
            "extra": "avg tps: 6.049157339202914, max tps: 9.112449354721706, count: 57680"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.761104861435516,
            "unit": "median tps",
            "extra": "avg tps: 5.1653911269224855, max tps: 6.520939697574488, count: 57680"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753805870943,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.8312791978998275,
            "unit": "median tps",
            "extra": "avg tps: 5.849805437943041, max tps: 8.74278493675931, count: 57703"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.738920624038164,
            "unit": "median tps",
            "extra": "avg tps: 5.120980082537072, max tps: 6.526441850711536, count: 57703"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753813103130,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.808632104613338,
            "unit": "median tps",
            "extra": "avg tps: 5.836981309478267, max tps: 8.76412595918387, count: 57682"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.806320156231629,
            "unit": "median tps",
            "extra": "avg tps: 5.199138228240689, max tps: 6.569376668909793, count: 57682"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753831242156,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.802345520603832,
            "unit": "median tps",
            "extra": "avg tps: 5.813786215169061, max tps: 8.735736486393566, count: 57104"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.886290467675986,
            "unit": "median tps",
            "extra": "avg tps: 5.27566091373645, max tps: 6.677978240227659, count: 57104"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753900419867,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.895804182160176,
            "unit": "median tps",
            "extra": "avg tps: 5.898212812915404, max tps: 8.799980735547896, count: 57814"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.839214322890334,
            "unit": "median tps",
            "extra": "avg tps: 5.221150547665725, max tps: 6.633591937309678, count: 57814"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753910612899,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.6851690969793935,
            "unit": "median tps",
            "extra": "avg tps: 5.718479050382773, max tps: 8.579209101688608, count: 57081"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.7903503396903915,
            "unit": "median tps",
            "extra": "avg tps: 5.182799088012045, max tps: 6.55281296811007, count: 57081"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753986148874,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.763545154071141,
            "unit": "median tps",
            "extra": "avg tps: 5.79492906226888, max tps: 8.69700915924853, count: 57928"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.888470776683617,
            "unit": "median tps",
            "extra": "avg tps: 5.273741582401375, max tps: 6.6554888903105525, count: 57928"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753993332458,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.6297963757361735,
            "unit": "median tps",
            "extra": "avg tps: 5.693467414240807, max tps: 8.532219384447211, count: 57888"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.887218794200808,
            "unit": "median tps",
            "extra": "avg tps: 5.266492358443746, max tps: 6.6447520692580095, count: 57888"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754064181626,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.8318310522359935,
            "unit": "median tps",
            "extra": "avg tps: 5.845638313432274, max tps: 8.736828448107667, count: 57875"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.786530340092193,
            "unit": "median tps",
            "extra": "avg tps: 5.185142140160226, max tps: 6.550259220054652, count: 57875"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754414269838,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.752576514365907,
            "unit": "median tps",
            "extra": "avg tps: 5.815923745307459, max tps: 8.713717038312435, count: 57745"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.795679617369745,
            "unit": "median tps",
            "extra": "avg tps: 5.188716127790791, max tps: 6.549191026074421, count: 57745"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754416661290,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 7.013267740076847,
            "unit": "median tps",
            "extra": "avg tps: 5.996462348532734, max tps: 8.976919726954954, count: 57796"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.696357814882973,
            "unit": "median tps",
            "extra": "avg tps: 5.112004524218567, max tps: 6.443349088051062, count: 57796"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754423100305,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.776094020870018,
            "unit": "median tps",
            "extra": "avg tps: 5.810312824699304, max tps: 8.715915324426346, count: 57946"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.97610437991918,
            "unit": "median tps",
            "extra": "avg tps: 5.353206800580037, max tps: 6.765351186632198, count: 57946"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754539183727,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.678599989840264,
            "unit": "median tps",
            "extra": "avg tps: 5.692417004592283, max tps: 8.513319257905051, count: 57871"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.894154712213088,
            "unit": "median tps",
            "extra": "avg tps: 5.28758928953826, max tps: 6.6782739941215, count: 57871"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0e385c88549677dc0e47d2509ea746cb7170bd8d",
          "message": "perf: Use Arrow for fast field execution (#2924)\n\n## What\n\nSwitches `Mixed` fast fields execution to fetching data into Arrow\narrays. A followup change will remove `Numeric`.\n\n## Why\n\nThis change is necessary for `Mixed`'s performance to match `Numeric`\nexecution. The:\n1. creation and destruction of `TantivyValue` and `OwnedValue`\n2. allocation and encoding/decoding of Strings\n\n...represented the largest remaining bottlenecks in (`Mixed`) fast\nfields execution.\n\nArrow removes those overheads for data held in memory, similar to how\nour `FFType` wrapper allows us to avoid `OwnedValue` overheads when\nfetching individual rows. String overhead is reduced by directly copying\nfrom the term dictionary into a `StringViewArray`, which has a single\ncontiguous buffer for the string data, and then a separate series of\nviews into that buffer (similar to allocating strings in an arena).\n\nFuture work could:\n* Push arrow arrays further down into Tantivy (e.g. as a `first_vals`\nvariant), removing additional overheads involved in fetching batches of\nrows.\n* Feed the arrow outputs of `Mixed` execution direct directly into a\nvectorized join implementation (e.g. DataFusion).\n\n## Tests\n\nGives a 1.6x speedup for `bucket-string-nofilter` and\n`bucket-string-filter`, with other changes being ~ in the noise.",
          "timestamp": "2025-08-09T14:16:01-07:00",
          "tree_id": "1fcdcb6500bb2e854ecfc613581ee13bc002b050",
          "url": "https://github.com/paradedb/paradedb/commit/0e385c88549677dc0e47d2509ea746cb7170bd8d"
        },
        "date": 1754775866525,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 6.775822535702141,
            "unit": "median tps",
            "extra": "avg tps: 5.788955072979173, max tps: 8.642531100323962, count: 57467"
          },
          {
            "name": "Count Query - Primary - tps",
            "value": 5.843863081429786,
            "unit": "median tps",
            "extra": "avg tps: 5.239065252923114, max tps: 6.615037101801515, count: 57467"
          }
        ]
      }
    ],
    "pg_search bulk-updates.toml Performance - Other Metrics": [
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "committer": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "id": "6603901ab5f5342e3de4b0bfc99065823a606d92",
          "message": "Fix mintlify check workflow",
          "timestamp": "2025-07-06T17:07:57Z",
          "url": "https://github.com/paradedb/paradedb/commit/6603901ab5f5342e3de4b0bfc99065823a606d92"
        },
        "date": 1752441625288,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.423161388961258, max cpu: 42.60355, count: 57645"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.234375,
            "unit": "median mem",
            "extra": "avg mem: 226.6519946981525, max mem: 237.48828125, count: 57645"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.30869997676292, max cpu: 33.168808, count: 57645"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 162.671875,
            "unit": "median mem",
            "extra": "avg mem: 161.87639674950125, max mem: 164.92578125, count: 57645"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 21660,
            "unit": "median block_count",
            "extra": "avg block_count: 20000.568444791395, max block_count: 21686.0, count: 57645"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.59701621996705, max segment_count: 97.0, count: 57645"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "c0442237441f33c1c51d6c11e29849eda05816a7",
          "message": "chore: Upgrade to `0.16.2` (#2760)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-01T21:30:02Z",
          "url": "https://github.com/paradedb/paradedb/commit/c0442237441f33c1c51d6c11e29849eda05816a7"
        },
        "date": 1752441641568,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 23.329479612772385, max cpu: 42.772278, count: 57813"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 183.796875,
            "unit": "median mem",
            "extra": "avg mem: 183.66963231669348, max mem: 184.171875, count: 57813"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 21.67115836056725, max cpu: 33.168808, count: 57813"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.22265625,
            "unit": "median mem",
            "extra": "avg mem: 160.03793832053344, max mem: 161.61328125, count: 57813"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 19014,
            "unit": "median block_count",
            "extra": "avg block_count: 18652.29761472333, max block_count: 19014.0, count: 57813"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 63,
            "unit": "median segment_count",
            "extra": "avg segment_count: 62.98384446404788, max segment_count: 79.0, count: 57813"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "71ea95206a8e487805333d573e859dad68dab572",
          "message": "chore: Upgrade to `0.16.1` (#2748)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-30T19:38:06Z",
          "url": "https://github.com/paradedb/paradedb/commit/71ea95206a8e487805333d573e859dad68dab572"
        },
        "date": 1752441639950,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 23.20506223583672, max cpu: 42.72997, count: 57697"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 182.96484375,
            "unit": "median mem",
            "extra": "avg mem: 182.63918184654315, max mem: 182.96484375, count: 57697"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 21.805026193691344, max cpu: 33.103447, count: 57697"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.5,
            "unit": "median mem",
            "extra": "avg mem: 160.398920356561, max mem: 162.40234375, count: 57697"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18980,
            "unit": "median block_count",
            "extra": "avg block_count: 18621.226510910445, max block_count: 18980.0, count: 57697"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 63,
            "unit": "median segment_count",
            "extra": "avg segment_count: 63.121340797615126, max segment_count: 79.0, count: 57697"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@paradedb.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "4fd1b2b6b6664d03946be0f4836732f0f40df0cc",
          "message": "chore: Rename datasets and add string paging queries (#2834)\n\n## What\n\nAdd a high-cardinality paging/top-n query to the benchmarks, and rename\ndatasets to match their content. Additionally, improve the generation\nscript for the `docs` dataset to avoid joins and allow for deterministic\nrelative-position queries.\n\n## Why\n\nWe don't currently have a high-cardinality string paging/top-n query in\nthe benchmark. We have top-n on a string column, but only for\nlow-cardinality values (`top_n-string.sql`). The top-n case represented\nan important gap that a user encountered, which #2828 addresses.\n\nThe names of the `benchmark` datasets don't currently describe their\nshape / schema, and for the `join` dataset in particular, that would\ndiscourage using it for other types of queries. We rename it to `docs`\nhere, and then use the `pages` table as the dataset for top-n.\n\n## Tests\n\nTested locally that the new query demonstrates a speedup for #2828.",
          "timestamp": "2025-07-13T18:04:27Z",
          "url": "https://github.com/paradedb/paradedb/commit/4fd1b2b6b6664d03946be0f4836732f0f40df0cc"
        },
        "date": 1752441705380,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.143684,
            "unit": "median cpu",
            "extra": "avg cpu: 21.482318445584657, max cpu: 42.772278, count: 57145"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.8125,
            "unit": "median mem",
            "extra": "avg mem: 226.4875818914603, max mem: 237.80078125, count: 57145"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 22.32175746906075, max cpu: 33.168808, count: 57145"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.84765625,
            "unit": "median mem",
            "extra": "avg mem: 159.68846314747572, max mem: 162.4140625, count: 57145"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22262,
            "unit": "median block_count",
            "extra": "avg block_count: 20660.539487269227, max block_count: 23588.0, count: 57145"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.46527255227929, max segment_count: 97.0, count: 57145"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr",
            "email": "eebbrr@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "e350be5d171ddb28a700c02d8adc32a1a9f4b084",
          "message": "feat: custom fsm (#2765)\n\nA custom FSM implementation that allows us to internally track\nfree/reusable blocks without generating full read+write cycles on every\npage that is returned to the FSM.\n\nThere's a new UDF called `paradedb.fsm_info()` that returns a table of\nFSM block numbers in use and the free block numbers they contain.\n\n## Why\n\nTo reduce I/O during segment merging and garbage collection, with an aim of reducing WAL traffic for enterprise.",
          "timestamp": "2025-07-09T15:42:21Z",
          "url": "https://github.com/paradedb/paradedb/commit/e350be5d171ddb28a700c02d8adc32a1a9f4b084"
        },
        "date": 1752441709902,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.491786556043493, max cpu: 42.687748, count: 57747"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.60546875,
            "unit": "median mem",
            "extra": "avg mem: 225.51253217158467, max mem: 231.29296875, count: 57747"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 22.25276688639335, max cpu: 33.103447, count: 57747"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 158.75390625,
            "unit": "median mem",
            "extra": "avg mem: 158.4819971032045, max mem: 159.90625, count: 57747"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22034,
            "unit": "median block_count",
            "extra": "avg block_count: 20634.828995445652, max block_count: 23225.0, count: 57747"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.29629244809254, max segment_count: 96.0, count: 57747"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Kaihong.Wang",
            "username": "wangkhc",
            "email": "wangkhc@163.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "7f560910072d570e0dca4d19a9fe02b47f6917e5",
          "message": "fix: Add missing stopword filters to Jieba tokenizer (#2790)\n\n### What\n\nThis PR fixes a bug where the Jieba tokenizer was missing stopword\nfiltering capabilities that are available in other tokenizers. The fix\nadds both custom stopword lists and language-based stopword filtering\nsupport to the Jieba tokenizer. (Fix #2789 )\n\n### Why\n\nThe Jieba tokenizer implementation was inconsistent with other\ntokenizers in the codebase - it lacked the\n`.filter(filters.stopwords_language())` and\n`.filter(filters.stopwords())` calls that are present in all other\ntokenizer variants (ICU, Chinese Lindera, etc.). This meant users\ncouldn't filter out common Chinese stop words like \"的\", \"了\", \"在\" or\nEnglish stop words when using mixed-language content, reducing search\nquality and relevance.\n\nThis inconsistency was discovered when comparing the Jieba tokenizer\nimplementation against other tokenizer variants in\n`tokenizers/src/manager.rs`.\n\n### How\n\n1. **Bug Fix:** Modified `tokenizers/src/manager.rs` in the\n`SearchTokenizer::Jieba` case within `to_tantivy_tokenizer()` method:\n- Added `.filter(filters.stopwords_language())` to support\nlanguage-based stopwords (e.g., English, Spanish, etc.)\n- Added `.filter(filters.stopwords())` to support custom stopword lists\n- This brings Jieba tokenizer in line with all other tokenizer\nimplementations\n\n2. **Code Changes:**\n   ```rust\n   // Before (missing stopword filters)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .build(),\n   ),\n\n   // After (with stopword filters added)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .filter(filters.stopwords_language())  // ← Added\n           .filter(filters.stopwords())           // ← Added\n           .build(),\n   ),\n   ```\n\n### Tests\n\nAdded comprehensive test coverage in `tokenizers/src/manager.rs`:\n\n1. **`test_jieba_tokenizer_with_stopwords`**: \n   - Tests custom stopword filtering with Chinese stopwords\n- Verifies stopwords are filtered out while content words are preserved\n\n2. **`test_jieba_tokenizer_with_language_stopwords`**:\n   - Tests language-based stopword filtering with English stopwords\n   - Tests the `stopwords_language: \"English\"` configuration option\n\nBoth tests use natural, conversational sentences instead of artificial\ntest data, making them more representative of real-world usage and\nsuitable for open-source community review.\n\n**All existing tests continue to pass** (12/12), ensuring no regressions\nwere introduced.\n\n### Ticket(s) Closed\n\nFix #2789\n\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-09T12:38:14Z",
          "url": "https://github.com/paradedb/paradedb/commit/7f560910072d570e0dca4d19a9fe02b47f6917e5"
        },
        "date": 1752441742084,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.471455355693664, max cpu: 42.687748, count: 57113"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.1875,
            "unit": "median mem",
            "extra": "avg mem: 226.68652687435434, max mem: 236.2421875, count: 57113"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.200655045323412, max cpu: 33.168808, count: 57113"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.1171875,
            "unit": "median mem",
            "extra": "avg mem: 158.95574610585592, max mem: 160.58203125, count: 57113"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 21594,
            "unit": "median block_count",
            "extra": "avg block_count: 19933.594435592597, max block_count: 21594.0, count: 57113"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.5560380298706, max segment_count: 97.0, count: 57113"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "47bbe518381e1429f228328336dad78e99636ad9",
          "message": "chore: Upgrade to `0.16.0` (#2720)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-23T23:04:37Z",
          "url": "https://github.com/paradedb/paradedb/commit/47bbe518381e1429f228328336dad78e99636ad9"
        },
        "date": 1752441746373,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 23.358179463007666, max cpu: 42.942345, count: 57023"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 190.34375,
            "unit": "median mem",
            "extra": "avg mem: 189.60837184118688, max mem: 190.34375, count: 57023"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.925685365751935, max cpu: 33.103447, count: 57023"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 168.97265625,
            "unit": "median mem",
            "extra": "avg mem: 168.9195519927266, max mem: 173.2578125, count: 57023"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 19078,
            "unit": "median block_count",
            "extra": "avg block_count: 18709.642354839274, max block_count: 19078.0, count: 57023"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 63,
            "unit": "median segment_count",
            "extra": "avg segment_count: 62.82834996404959, max segment_count: 79.0, count: 57023"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b96e41e25c3fd2126f54aa5cb66d4deffb482047",
          "message": "perf: Lazily load fast fields dictionaries. (#2842)\n\n## What\n\nLazily load fast field dictionaries from buffers: see\nhttps://github.com/paradedb/tantivy/pull/55\n\n## Why\n\nA customer reported slower-than-expected paging on a string/uuid column.\n85% of the time for that query was being spent in _opening_ a fast\nfields string/bytes column, with a large fraction of that time spent\nfully consuming the column's `Dictionary`.\n\n## Tests\n\nSee the attached benchmark results:\n* [`docs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014379545)\n    * No regressions.\n    * 2x faster for `top_n-score`\n    * 1.4x faster for `highlighting` \n* [`logs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014350211)\n    * No regressions.\n    * 4.5x faster for `paging-string-max`\n    * 1.7x faster for `paging-string-median`\n    * 1.6x faster for `paging-string-min`\n\nThe `paging-string-*` benchmarks were added in #2834 to highlight this\nparticular issue.",
          "timestamp": "2025-07-14T08:28:09-07:00",
          "tree_id": "d144335dcb7c7f138a112c01e5b9ff5e0168fe37",
          "url": "https://github.com/paradedb/paradedb/commit/b96e41e25c3fd2126f54aa5cb66d4deffb482047"
        },
        "date": 1752508557951,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.401998710133135, max cpu: 42.772278, count: 57838"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 225.66015625,
            "unit": "median mem",
            "extra": "avg mem: 224.94116655842612, max mem: 237.3515625, count: 57838"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.245485424478094, max cpu: 33.168808, count: 57838"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.8046875,
            "unit": "median mem",
            "extra": "avg mem: 159.71143228176112, max mem: 161.21875, count: 57838"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22400,
            "unit": "median block_count",
            "extra": "avg block_count: 20731.73832082714, max block_count: 23460.0, count: 57838"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.57635118780041, max segment_count: 96.0, count: 57838"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8",
          "message": "fix: orphaned delete entries get GCed too early (#2845)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nWhen running a new stressgres suite (coming in a future PR), I hit a\nmysterious bug where it looked like vacuum could cause corruption of\nsome pages.\n\nTurns out it's caused by scenarios where:\n\n1. A `DeleteEntry` already exists for a `SegmentMetaEntry`, and a new\none is created\n2. A new, \"fake\" `SegmentMetaEntry` gets created for the purpose of\nstoring the old `DeleteEntry`, so its blocks can get garbage collected\n3. Because this \"fake\" entry is invisible to all readers besides the\ngarbage collector, it doesn't get pinned and can get garbage collected\ntoo early (i.e. while a reader is still pinning the old `DeleteEntry`)\n\nThe solution is to copy all of the contents of the old\n`SegmentMetaEntry` to the fake one, so that the \"pintest blockno\" of the\nfake entry is that same as that of the entry with the new `DeleteEntry`.\nThat way, the `DeleteEntry` doesn't get garbage collected until the pin\nis released.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-14T15:46:29-04:00",
          "tree_id": "3dc55f49de121cf04534f48e3584a2a3ae333407",
          "url": "https://github.com/paradedb/paradedb/commit/ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8"
        },
        "date": 1752523965734,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.666938319763997, max cpu: 42.687748, count: 57841"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.375,
            "unit": "median mem",
            "extra": "avg mem: 225.44932119949516, max mem: 236.4765625, count: 57841"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 22.09615333318723, max cpu: 33.07087, count: 57841"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.66796875,
            "unit": "median mem",
            "extra": "avg mem: 160.57799472638354, max mem: 163.609375, count: 57841"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 21877,
            "unit": "median block_count",
            "extra": "avg block_count: 20393.73112498055, max block_count: 23329.0, count: 57841"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 66,
            "unit": "median segment_count",
            "extra": "avg segment_count: 67.84244739890389, max segment_count: 95.0, count: 57841"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "eb3bc1d570c85d60804f6aab2f2d2cf998bd7597",
          "message": "ci: benchmark workflow cleanups (#2851)\n\nThis is an attempt to cleanup the benchmark workflows a little bit.  \n\n- Centralizes checking out the latest benchmark code/suites/actions into\na composite action.\n- figures out the PR #/title being tested\n- Changes the slack notification messages to be reactive to the\nenvironment to hopefully avoid conflicts with -enterprise",
          "timestamp": "2025-07-15T12:15:54-04:00",
          "tree_id": "223c726790d68868f538b7f5aab9cf9904494f44",
          "url": "https://github.com/paradedb/paradedb/commit/eb3bc1d570c85d60804f6aab2f2d2cf998bd7597"
        },
        "date": 1752597728709,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.499330744225375, max cpu: 42.561577, count: 57799"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.98046875,
            "unit": "median mem",
            "extra": "avg mem: 225.98931568074275, max mem: 237.671875, count: 57799"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.211796220687102, max cpu: 33.168808, count: 57799"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.79296875,
            "unit": "median mem",
            "extra": "avg mem: 159.41483815409867, max mem: 161.18359375, count: 57799"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22234,
            "unit": "median block_count",
            "extra": "avg block_count: 20653.595961867853, max block_count: 23496.0, count: 57799"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.42324261665426, max segment_count: 96.0, count: 57799"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c7bdeebed6249725c87b87c276d2e09dfaffd152",
          "message": "ci: publish stressgres benchmark graphs (#2852)\n\nThis will publish every stressgres benchmark graph to the new\n`paradedb/benchmark-data` repo.\n\nIt also ensures that when one of our \"[benchmark]\" labels are applied,\nthat it does *not* pull the benchmarks from main, but instead from the\nPR branch itself.",
          "timestamp": "2025-07-15T18:13:26-04:00",
          "tree_id": "f18bf519521a03613c5b12c861092f24314476ad",
          "url": "https://github.com/paradedb/paradedb/commit/c7bdeebed6249725c87b87c276d2e09dfaffd152"
        },
        "date": 1752619180447,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 21.43613138932945, max cpu: 42.857143, count: 57657"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.31640625,
            "unit": "median mem",
            "extra": "avg mem: 225.18311611393673, max mem: 230.53125, count: 57657"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 22.157898716739325, max cpu: 33.333336, count: 57657"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.3203125,
            "unit": "median mem",
            "extra": "avg mem: 159.34853523585602, max mem: 161.203125, count: 57657"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 21914,
            "unit": "median block_count",
            "extra": "avg block_count: 20509.367049967914, max block_count: 23527.0, count: 57657"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.3133704493817, max segment_count: 97.0, count: 57657"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "21990816+philippemnoel@users.noreply.github.com"
          },
          "committer": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@gmail.com"
          },
          "id": "8c164d666c4af2049b439690afa7823ab5be2c88",
          "message": "ci: Post \"One-branch Release Model\" Improvements (#2792)\n\n# Ticket(s) Closed\n\n- Closes #N/A\n\n## What\n- Don't make Docker Scout post on PRs that don't modify the Dockerfile,\nnot necessary.\n- Make sure the SchemaBot workflow errors when community contributors\nmake a PR, so we can catch needed changes to the SQL upgrade script.\n- Rename it to SchemaBot\n\n## Why\nQoL\n\n## How\n^\n\n## Tests\nCI",
          "timestamp": "2025-07-08T15:49:16Z",
          "url": "https://github.com/paradedb/paradedb/commit/8c164d666c4af2049b439690afa7823ab5be2c88"
        },
        "date": 1752669156374,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.289877036708354, max cpu: 42.772278, count: 57286"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.16015625,
            "unit": "median mem",
            "extra": "avg mem: 227.31538178503473, max mem: 239.4609375, count: 57286"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.296618725773587, max cpu: 33.267326, count: 57286"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.2890625,
            "unit": "median mem",
            "extra": "avg mem: 159.00267858311804, max mem: 161.9296875, count: 57286"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 21494,
            "unit": "median block_count",
            "extra": "avg block_count: 19986.319327584402, max block_count: 21623.0, count: 57286"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.68140557902454, max segment_count: 96.0, count: 57286"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f7c13c858851200e8ab5395779f821ca484cda0d",
          "message": "feat: Add a custom scan for aggregates (#2763)\n\n## What\n\nAdd a new `CustomScan` (installed with `create_upper_paths_hook`) which\nreplaces simple aggregate plans on `bm25`-indexed tables with aggregate\nimplementations using [Tantivy\naggregates](https://docs.rs/tantivy/latest/tantivy/aggregation/index.html).\n\n## Why\n\nTantivy aggregates can be significantly faster (in benchmarks, we've\nmeasured between 4-10x for bucketing/faceting queries). They have been\nexposed via `paradedb.aggregate` for a while now, but that function\nrequires learning a new API, and does not feel \"Postgres native\".\n\n## How\n\n* Adjust `CustomPathBuilder` and `CustomPathMethods` to allow multiple\n`CustomScan` implementations.\n* Remove the `CustomScan::PrivateData: Default` bound, as it requires\nthe `PrivateData` to start in an illegal state.\n* Move `qual_inspect` to a reusable location.\n* Split out a module to be used by both the `aggregate` API method and\nby the aggregate custom scan.\n* Implement the \"ParadeDB Aggregate Scan\" `CustomScan` type\n    * Add the new `CustomScan` type, hidden behind a GUC\n    * Filter Paths to those which represent `count(*)` queries\n    * Extract `quals` during `CustomPath` generation\n* Replace `Aggrefs` in target lists with `FuncExprs` while producing a\n`CustomPlan`\n* Execute a `count(*)` aggregate by pushing down a `value_count`\naggregate on the `ctid`\n\n## Tests\n\nAdded tests to validate that:\n* the GUC properly controls usage\n* the scan does not trigger for unsupported aggregates, tables without a\n`bm25` index, or group-bys (for now)",
          "timestamp": "2025-07-16T09:12:24-07:00",
          "tree_id": "69b043a9363fcf6ce2de468c97d14e41f593f017",
          "url": "https://github.com/paradedb/paradedb/commit/f7c13c858851200e8ab5395779f821ca484cda0d"
        },
        "date": 1752684018954,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.143684,
            "unit": "median cpu",
            "extra": "avg cpu: 21.22296708182704, max cpu: 42.72997, count: 57682"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 227.658203125,
            "unit": "median mem",
            "extra": "avg mem: 226.41788748548075, max mem: 238.91796875, count: 57682"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 22.25931379199962, max cpu: 33.07087, count: 57682"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.64453125,
            "unit": "median mem",
            "extra": "avg mem: 160.3478258219635, max mem: 162.47265625, count: 57682"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22184,
            "unit": "median block_count",
            "extra": "avg block_count: 20699.68728546167, max block_count: 23490.0, count: 57682"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.62745743906244, max segment_count: 96.0, count: 57682"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c779dbb72178c1aa0e14ad94c72eeb9937251acd",
          "message": "feat: a background merger for large layers (#2743)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nLaunches Postgres [dynamic background\nworkers](https://docs.rs/pgrx/latest/pgrx/bgworkers/struct.DynamicBackgroundWorker.html)\nto merge large layers in the background.\n\nThis is configured by a new index setting, `background_layer_sizes`. Any\nlayers specified here will be merged in the background.\n\n## Why\n\nWrite throughput, and create more balanced indexes with fewer segments.\n\n## How\n\n1. The default (foreground) `layer_sizes` is now `10kb`, `100kb`, `1mb`\n2. The default `background_layer_sizes` is `10mb`, `100mb`, `1gb`,\n`10gb`, `100gb`, `1tb`\n3. After `aminsert` merges in the foreground, it checks to see if there\nare enough candidates for a background merge. If so, it spawns a dynamic\nbackground worker process to do the merge.\n4. `amvacuumcleanup` can also spawn a background worker, allowing the\nuser to rebalance their index with a `VACUUM`.\n\nAdditionally, I've tweaked merge policy to make it smarter:\n\n1. Terminate a merge early if we predict that, after the merge, we will\nend up with fewer than `target_segment_count` segments.\n2. Set the max layer size as byte size of index divided by\n`target_segment_count`. Discard all layer sizes above that, which avoids\nthe problem of merging too many segments into one giant segment.\n\nThis has allowed us to delete some code:\n\n1. `force_merge` is deprecated\n2. No longer need to store the segments created by an index build and\navoid merging them, since we just do expensive merges in the background\n\n## Tests\n\nAdded a new stressgres `.toml` file that configures the layer\nsizes/threshold, which triggers background merging.\n\n---------\n\nSigned-off-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>\nCo-authored-by: Philippe Noël <21990816+philippemnoel@users.noreply.github.com>\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-16T12:44:23-04:00",
          "tree_id": "153c406e456a638a6b68ca9123210bbd498d66a5",
          "url": "https://github.com/paradedb/paradedb/commit/c779dbb72178c1aa0e14ad94c72eeb9937251acd"
        },
        "date": 1752685945099,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.633339028789774, max cpu: 42.772278, count: 57100"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.04296875,
            "unit": "median mem",
            "extra": "avg mem: 226.87540526488615, max mem: 240.7734375, count: 57100"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.311687262958266, max cpu: 33.136093, count: 57100"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.9765625,
            "unit": "median mem",
            "extra": "avg mem: 159.58649258428196, max mem: 161.078125, count: 57100"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22063,
            "unit": "median block_count",
            "extra": "avg block_count: 20651.66176882662, max block_count: 23610.0, count: 57100"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.31493870402802, max segment_count: 97.0, count: 57100"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "d197630155f55d13eea0a81841951645a367a5f7",
          "message": "test: Make GUCs a tested property, and add proptests for the aggregate custom scan (#2788)\n\n## What\n\nMove the GUCs that are in use into a test property, which reduces\nruntime while allowing for testing arbitrary combinations of GUCs.\n\nAdditionally, added proptests for the aggregate custom scan by:\n* Adding its GUC to the generated set\n* Expanding the `generated_single_relation` test to use `COUNT(*)` in\nits target list.\n\n## Why\n\nTo add additional test coverage for #2763.",
          "timestamp": "2025-07-16T10:57:16-07:00",
          "tree_id": "6a92b62b640f7a0b2dc7e6507966b75f3bd00594",
          "url": "https://github.com/paradedb/paradedb/commit/d197630155f55d13eea0a81841951645a367a5f7"
        },
        "date": 1752690220049,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.31314547043461, max cpu: 43.199997, count: 57673"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.63671875,
            "unit": "median mem",
            "extra": "avg mem: 225.93933395230437, max mem: 231.703125, count: 57673"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.41056677723073, max cpu: 33.168808, count: 57673"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.83984375,
            "unit": "median mem",
            "extra": "avg mem: 159.7338768384903, max mem: 161.1640625, count: 57673"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22670,
            "unit": "median block_count",
            "extra": "avg block_count: 20906.578364225894, max block_count: 23892.0, count: 57673"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 69.00568723666187, max segment_count: 96.0, count: 57673"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "58f6742b2cde46fe2c15077e59a0d5b091ba6000",
          "message": "chore: Upgrade to `0.17.0` (#2870)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-16T19:49:53-04:00",
          "tree_id": "b77118d365b31a4f3478b7c0571cf1f7e9f8a5b2",
          "url": "https://github.com/paradedb/paradedb/commit/58f6742b2cde46fe2c15077e59a0d5b091ba6000"
        },
        "date": 1752711475919,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.391909908974103, max cpu: 42.772278, count: 57393"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 227.39453125,
            "unit": "median mem",
            "extra": "avg mem: 226.43896597527137, max mem: 237.2578125, count: 57393"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.225343367938137, max cpu: 33.20158, count: 57393"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.37109375,
            "unit": "median mem",
            "extra": "avg mem: 160.13710533895684, max mem: 161.40625, count: 57393"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 21973,
            "unit": "median block_count",
            "extra": "avg block_count: 20639.334134824803, max block_count: 23413.0, count: 57393"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.4695694596902, max segment_count: 97.0, count: 57393"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "86bc2b092d2857a997cd05af4b554ac96ba225fd",
          "message": "fix: Fix `rescan` for top-n (#2868)\n\n## What\n\nComments in both `Normal` and `TopN` scans claimed that their search\nresults would be reset by `PdbScanState`, but this was incorrect: they\nwere local variables in the struct, and needed to be reset locally.\n\n## Why\n\nFixes issue detected by the prop tests and repro'd by @eeeebbbbrrrr in\n#2751.\n\n## Tests\n\nNew regression test from #2751: thanks @eeeebbbbrrrr!\n\n---------\n\nCo-authored-by: Eric B. Ridge <eebbrr@paradedb.com>",
          "timestamp": "2025-07-17T08:59:32-07:00",
          "tree_id": "ccc9162bb96008badcb3046612d16394604ed6f7",
          "url": "https://github.com/paradedb/paradedb/commit/86bc2b092d2857a997cd05af4b554ac96ba225fd"
        },
        "date": 1752769564480,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.67883978823504, max cpu: 42.64561, count: 57850"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.375,
            "unit": "median mem",
            "extra": "avg mem: 227.0925817712835, max mem: 240.7265625, count: 57850"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.211785783486604, max cpu: 33.23442, count: 57850"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.84765625,
            "unit": "median mem",
            "extra": "avg mem: 159.69268136884185, max mem: 160.79296875, count: 57850"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22333,
            "unit": "median block_count",
            "extra": "avg block_count: 20680.245652549696, max block_count: 23424.0, count: 57850"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.43790838375108, max segment_count: 95.0, count: 57850"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5772be0d3dea751c3609729efcc66cc69d9d30ee",
          "message": "chore: Remove debug output in aggregate scan (#2876)\n\n## What\n\nRemove a stray `println`.\n\n## Why\n\nIt's not doing anyone any good.",
          "timestamp": "2025-07-17T09:46:08-07:00",
          "tree_id": "06a002186c2a701283d73854f64c4225a08aa1a8",
          "url": "https://github.com/paradedb/paradedb/commit/5772be0d3dea751c3609729efcc66cc69d9d30ee"
        },
        "date": 1752772359262,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.53856958816693, max cpu: 42.64561, count: 57123"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 227.97265625,
            "unit": "median mem",
            "extra": "avg mem: 227.16129161524253, max mem: 231.4765625, count: 57123"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.31710791228252, max cpu: 33.168808, count: 57123"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.37109375,
            "unit": "median mem",
            "extra": "avg mem: 159.13455927888066, max mem: 160.15625, count: 57123"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22325,
            "unit": "median block_count",
            "extra": "avg block_count: 20770.602121737305, max block_count: 23717.0, count: 57123"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.69605938063476, max segment_count: 97.0, count: 57123"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "16307a200509cd31b42c1338f3c5b6e097a77fbf",
          "message": "fix: issue #2844 - Use `paradedb.with_index()` when necessary (#2879)\n\n# Ticket(s) Closed\n\n- Closes #2844\n\n## What\n\nWhen the right-hand-side of the `@@@` operator is a complex expression\nthat can't be evaluated to a `T_Const` during planning, we need to\nrewrite it to be a call to our `paradedb.with_index(<indexrelid>,\n<rhs>)` so that it can be properly used in Filter contexts during\nexecution.\n\nThis seems to come up, at least, during RLS rule evaluation if those\nrules use our `@@@` operator.\n\n## Why\n\nSo long as the right-hand-side of `@@@` is a `SearchQueryInput`, we need\nto be able to execute it when Postgres wants us to, whether that's\nduring a scan or, as in this case, a filter being run as part of RLS\nevaluation.\n\n## How\n\nWrapping Postgres expression nodes!\n\n## Tests\n\nI used the re-create the OP from #2844 put together as a regression\ntest. I seem to be lacking the creative energy today to reduce the test\ndown to its simplest form that doesn't require a complicated RLS\nconfiguration.",
          "timestamp": "2025-07-18T13:21:25-04:00",
          "tree_id": "f2e8c7ca2ce45eefd03b85ff45d56f0481ebae1a",
          "url": "https://github.com/paradedb/paradedb/commit/16307a200509cd31b42c1338f3c5b6e097a77fbf"
        },
        "date": 1752860868291,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.492889293635105, max cpu: 42.814667, count: 57123"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.90625,
            "unit": "median mem",
            "extra": "avg mem: 228.02069458394604, max mem: 234.37109375, count: 57123"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.284744258650274, max cpu: 33.20158, count: 57123"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.22265625,
            "unit": "median mem",
            "extra": "avg mem: 159.96487431726274, max mem: 161.84765625, count: 57123"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22301,
            "unit": "median block_count",
            "extra": "avg block_count: 20759.757995903576, max block_count: 23812.0, count: 57123"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.74362340913467, max segment_count: 97.0, count: 57123"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "8b45b24d47a7cac36696bae2d8505c750a7ee801",
          "message": "test: added more join regression tests + improved when to use Join quals (#2808)\n\n# Ticket(s) Closed\n\n- Closes #2807\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-18T10:40:03-07:00",
          "tree_id": "fb63bd81696cd27d03b6d5724551c3ff8fd59613",
          "url": "https://github.com/paradedb/paradedb/commit/8b45b24d47a7cac36696bae2d8505c750a7ee801"
        },
        "date": 1752861987929,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.3908645451741, max cpu: 42.64561, count: 57679"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.1015625,
            "unit": "median mem",
            "extra": "avg mem: 227.32159742659806, max mem: 231.64453125, count: 57679"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 22.31702151119204, max cpu: 33.168808, count: 57679"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.2734375,
            "unit": "median mem",
            "extra": "avg mem: 159.26343433322788, max mem: 161.0703125, count: 57679"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22517,
            "unit": "median block_count",
            "extra": "avg block_count: 20929.595970803934, max block_count: 23869.0, count: 57679"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.92818876887603, max segment_count: 96.0, count: 57679"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "77c6cd1aeb5f5c03bba892a38cd792a113cfbd39",
          "message": "chore: move code around (#2889)\n\n## What\n\nThis relocates the `src/boostrap/create_bm25.rs` source to\n`src/api/admin.rs`, which I believe is a more sensibile location and\nname.\n\nAdditionally it moves the `#[pg_extern] schema()` function from\n`src/api/builder_fns.rs` to this new(ly renamed) `admin.rs`, as it's an\nadministrative function, not a query builder function.\n\n## Why\n\nTrying to better organize things\n\n## How\n\n## Tests\n\nNo functional changes here.",
          "timestamp": "2025-07-22T12:39:21-04:00",
          "tree_id": "1ab036752fc8adf7ad2757741d4e274ab0e73c64",
          "url": "https://github.com/paradedb/paradedb/commit/77c6cd1aeb5f5c03bba892a38cd792a113cfbd39"
        },
        "date": 1753203945270,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.121387,
            "unit": "median cpu",
            "extra": "avg cpu: 21.475938005126512, max cpu: 42.561577, count: 57774"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.8046875,
            "unit": "median mem",
            "extra": "avg mem: 228.69132687281476, max mem: 236.390625, count: 57774"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 22.259629460821138, max cpu: 33.168808, count: 57774"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.17578125,
            "unit": "median mem",
            "extra": "avg mem: 159.18903480588153, max mem: 160.56640625, count: 57774"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22247,
            "unit": "median block_count",
            "extra": "avg block_count: 20703.81206078859, max block_count: 23457.0, count: 57774"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.39417384982865, max segment_count: 97.0, count: 57774"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "1e26a38533fa872a935955128b2ecd08b3febf66",
          "message": "perf: Skip computing scores if not requested for top-n field queries (#2892)\n\n## What\n\n`SearchIndexReader::{top_by_field_in_segments,\ntop_by_string_field_in_segments}` were not using\n`SearchIndexReader::need_scores`, and were instead universally enabling\nscores.\n\nUse the `enable_scoring` helper and `self.need_scores` to skip computing\nscores where possible.\n\n## Why\n\nComputing scores requires field norms, which ([if they have not been\ndisabled](https://docs.paradedb.com/documentation/indexing/record)) can\ntake time to load and use.",
          "timestamp": "2025-07-22T15:58:56-07:00",
          "tree_id": "2a41c9e06be04ef92fed2b265dc3f90340fb0e37",
          "url": "https://github.com/paradedb/paradedb/commit/1e26a38533fa872a935955128b2ecd08b3febf66"
        },
        "date": 1753226722539,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.25636637999243, max cpu: 42.72997, count: 57332"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.81640625,
            "unit": "median mem",
            "extra": "avg mem: 227.75997282004377, max mem: 231.57421875, count: 57332"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.33732230142304, max cpu: 33.103447, count: 57332"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.21484375,
            "unit": "median mem",
            "extra": "avg mem: 158.9373458812269, max mem: 160.35546875, count: 57332"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22599,
            "unit": "median block_count",
            "extra": "avg block_count: 20892.9723191237, max block_count: 23815.0, count: 57332"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.89136956673411, max segment_count: 97.0, count: 57332"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753282355868,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.445183563583686, max cpu: 42.477875, count: 57272"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 224.58203125,
            "unit": "median mem",
            "extra": "avg mem: 224.71211315356982, max mem: 235.37890625, count: 57272"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.18101931242329, max cpu: 33.267326, count: 57272"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.2265625,
            "unit": "median mem",
            "extra": "avg mem: 159.87671297438104, max mem: 161.26171875, count: 57272"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22132,
            "unit": "median block_count",
            "extra": "avg block_count: 20656.015260511245, max block_count: 23581.0, count: 57272"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.4196116776086, max segment_count: 95.0, count: 57272"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753288813669,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.33187967137643, max cpu: 42.772278, count: 57319"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.41796875,
            "unit": "median mem",
            "extra": "avg mem: 225.80655526799578, max mem: 231.17578125, count: 57319"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.203146847996134, max cpu: 33.136093, count: 57319"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.65234375,
            "unit": "median mem",
            "extra": "avg mem: 159.4213017280483, max mem: 160.94921875, count: 57319"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22195,
            "unit": "median block_count",
            "extra": "avg block_count: 20721.82180428828, max block_count: 23553.0, count: 57319"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.58313997103927, max segment_count: 94.0, count: 57319"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753291267666,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.407990295030217, max cpu: 42.772278, count: 57349"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.1640625,
            "unit": "median mem",
            "extra": "avg mem: 227.24593157138747, max mem: 231.77734375, count: 57349"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.26806501742115, max cpu: 33.267326, count: 57349"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.2578125,
            "unit": "median mem",
            "extra": "avg mem: 160.15853923183056, max mem: 162.0546875, count: 57349"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22404,
            "unit": "median block_count",
            "extra": "avg block_count: 20806.48503025336, max block_count: 23892.0, count: 57349"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 69.04678372770232, max segment_count: 97.0, count: 57349"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753302858985,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.546507643880055, max cpu: 42.60355, count: 57099"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 227.890625,
            "unit": "median mem",
            "extra": "avg mem: 227.068984899035, max mem: 231.5703125, count: 57099"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.240140277851978, max cpu: 33.73494, count: 57099"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.58203125,
            "unit": "median mem",
            "extra": "avg mem: 160.10765129424334, max mem: 162.21484375, count: 57099"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22197,
            "unit": "median block_count",
            "extra": "avg block_count: 20668.49452704951, max block_count: 23499.0, count: 57099"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.46776651079703, max segment_count: 94.0, count: 57099"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753310554819,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 21.69014525941943, max cpu: 42.814667, count: 57792"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 225.46875,
            "unit": "median mem",
            "extra": "avg mem: 224.57288300608215, max mem: 238.12109375, count: 57792"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.220040400157675, max cpu: 33.300297, count: 57792"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.875,
            "unit": "median mem",
            "extra": "avg mem: 159.7479820547178, max mem: 162.0390625, count: 57792"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22045,
            "unit": "median block_count",
            "extra": "avg block_count: 20529.272096483943, max block_count: 23458.0, count: 57792"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 66,
            "unit": "median segment_count",
            "extra": "avg segment_count: 67.93071705426357, max segment_count: 95.0, count: 57792"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753374014402,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.485649735968508, max cpu: 42.72997, count: 57060"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 229.74609375,
            "unit": "median mem",
            "extra": "avg mem: 228.92894684597354, max mem: 234.734375, count: 57060"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 22.240743491362416, max cpu: 33.20158, count: 57060"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.546875,
            "unit": "median mem",
            "extra": "avg mem: 160.00857875755784, max mem: 161.97265625, count: 57060"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22166,
            "unit": "median block_count",
            "extra": "avg block_count: 20728.648317560463, max block_count: 23487.0, count: 57060"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.5471784086926, max segment_count: 95.0, count: 57060"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753388191148,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.296419960559778, max cpu: 42.942345, count: 57348"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.359375,
            "unit": "median mem",
            "extra": "avg mem: 227.56640938328277, max mem: 232.125, count: 57348"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 22.22752121705243, max cpu: 33.136093, count: 57348"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.546875,
            "unit": "median mem",
            "extra": "avg mem: 160.73832375366186, max mem: 163.01171875, count: 57348"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22187,
            "unit": "median block_count",
            "extra": "avg block_count: 20732.662307316732, max block_count: 23672.0, count: 57348"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.72963311710957, max segment_count: 97.0, count: 57348"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753473623919,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.456485057970703, max cpu: 42.814667, count: 57074"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.93359375,
            "unit": "median mem",
            "extra": "avg mem: 226.0722335942154, max mem: 230.19140625, count: 57074"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.224503196529522, max cpu: 33.300297, count: 57074"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.46484375,
            "unit": "median mem",
            "extra": "avg mem: 160.39967075364876, max mem: 162.73046875, count: 57074"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22200,
            "unit": "median block_count",
            "extra": "avg block_count: 20705.73704313698, max block_count: 23654.0, count: 57074"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 66,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.3241230682973, max segment_count: 97.0, count: 57074"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753475372873,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.450796134116064, max cpu: 42.64561, count: 57092"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.67578125,
            "unit": "median mem",
            "extra": "avg mem: 227.27737296545487, max mem: 232.95703125, count: 57092"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.035008854705232, max cpu: 33.23442, count: 57092"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.06640625,
            "unit": "median mem",
            "extra": "avg mem: 158.856696825409, max mem: 160.0234375, count: 57092"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22652,
            "unit": "median block_count",
            "extra": "avg block_count: 20833.405643522736, max block_count: 23829.0, count: 57092"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.7398584740419, max segment_count: 98.0, count: 57092"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753506530117,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.360924692248805, max cpu: 42.772278, count: 57671"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 227.9375,
            "unit": "median mem",
            "extra": "avg mem: 226.4086123360311, max mem: 239.0390625, count: 57671"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.180609691879543, max cpu: 33.168808, count: 57671"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 158.26171875,
            "unit": "median mem",
            "extra": "avg mem: 158.1653072357641, max mem: 158.96484375, count: 57671"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22311,
            "unit": "median block_count",
            "extra": "avg block_count: 20668.85221341749, max block_count: 23666.0, count: 57671"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.55936259125036, max segment_count: 97.0, count: 57671"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753710914578,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.50588144172424, max cpu: 42.60355, count: 57381"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.8515625,
            "unit": "median mem",
            "extra": "avg mem: 226.00501118619403, max mem: 233.3125, count: 57381"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.269526046112652, max cpu: 33.267326, count: 57381"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 161.3515625,
            "unit": "median mem",
            "extra": "avg mem: 160.86579235722627, max mem: 164.07421875, count: 57381"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22367,
            "unit": "median block_count",
            "extra": "avg block_count: 20772.65697704815, max block_count: 23453.0, count: 57381"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.4496087555114, max segment_count: 97.0, count: 57381"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753728491413,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 21.267118414497787, max cpu: 43.156845, count: 57680"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 240.66796875,
            "unit": "median mem",
            "extra": "avg mem: 235.9902181892554, max mem: 240.66796875, count: 57680"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.297903142346286, max cpu: 33.20158, count: 57680"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.9765625,
            "unit": "median mem",
            "extra": "avg mem: 159.8722043358833, max mem: 161.61328125, count: 57680"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22545,
            "unit": "median block_count",
            "extra": "avg block_count: 20964.028848821083, max block_count: 23990.0, count: 57680"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 68,
            "unit": "median segment_count",
            "extra": "avg segment_count: 69.29147018030513, max segment_count: 97.0, count: 57680"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753805873312,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.389762099371264, max cpu: 42.814667, count: 57703"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 227.9609375,
            "unit": "median mem",
            "extra": "avg mem: 227.1043433752361, max mem: 231.9375, count: 57703"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.265285040025645, max cpu: 33.168808, count: 57703"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.29296875,
            "unit": "median mem",
            "extra": "avg mem: 159.53279556251408, max mem: 162.03125, count: 57703"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22464,
            "unit": "median block_count",
            "extra": "avg block_count: 20698.020484203593, max block_count: 23455.0, count: 57703"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.6313883160321, max segment_count: 95.0, count: 57703"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753813105522,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.401208612060262, max cpu: 42.561577, count: 57682"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.01171875,
            "unit": "median mem",
            "extra": "avg mem: 225.1884874993499, max mem: 230.203125, count: 57682"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 22.15868783893631, max cpu: 33.168808, count: 57682"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.03515625,
            "unit": "median mem",
            "extra": "avg mem: 159.92297281593477, max mem: 161.0234375, count: 57682"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22392,
            "unit": "median block_count",
            "extra": "avg block_count: 20740.469453208974, max block_count: 23438.0, count: 57682"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.60001386914462, max segment_count: 96.0, count: 57682"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753831244550,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.143684,
            "unit": "median cpu",
            "extra": "avg cpu: 21.380618367018688, max cpu: 42.857143, count: 57104"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.421875,
            "unit": "median mem",
            "extra": "avg mem: 227.6954471227935, max mem: 232.35546875, count: 57104"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.188406,
            "unit": "median cpu",
            "extra": "avg cpu: 22.08212626877457, max cpu: 33.103447, count: 57104"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.57421875,
            "unit": "median mem",
            "extra": "avg mem: 160.20935280912894, max mem: 162.359375, count: 57104"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22482,
            "unit": "median block_count",
            "extra": "avg block_count: 20732.596998458954, max block_count: 23687.0, count: 57104"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.64240683664892, max segment_count: 97.0, count: 57104"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753900422349,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.166023,
            "unit": "median cpu",
            "extra": "avg cpu: 21.50082842732716, max cpu: 42.64561, count: 57814"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.10546875,
            "unit": "median mem",
            "extra": "avg mem: 227.45542494032588, max mem: 232.03515625, count: 57814"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 22.241164379482075, max cpu: 33.168808, count: 57814"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 161.18359375,
            "unit": "median mem",
            "extra": "avg mem: 160.56549505742555, max mem: 162.3515625, count: 57814"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22168,
            "unit": "median block_count",
            "extra": "avg block_count: 20819.089078769848, max block_count: 23681.0, count: 57814"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.87573944027399, max segment_count: 98.0, count: 57814"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753910615373,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.56689756655664, max cpu: 42.64561, count: 57081"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.7734375,
            "unit": "median mem",
            "extra": "avg mem: 225.35295347839036, max mem: 237.8359375, count: 57081"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.05893328567, max cpu: 33.333336, count: 57081"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.515625,
            "unit": "median mem",
            "extra": "avg mem: 159.38350429378866, max mem: 160.8828125, count: 57081"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22345,
            "unit": "median block_count",
            "extra": "avg block_count: 20673.06234999387, max block_count: 23699.0, count: 57081"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.46381457928207, max segment_count: 96.0, count: 57081"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753986151301,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 21.516405206122062, max cpu: 42.857143, count: 57928"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 229.2578125,
            "unit": "median mem",
            "extra": "avg mem: 228.53336880750672, max mem: 234.57421875, count: 57928"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.323614,
            "unit": "median cpu",
            "extra": "avg cpu: 22.14118461403882, max cpu: 33.333336, count: 57928"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.99609375,
            "unit": "median mem",
            "extra": "avg mem: 160.6902093169538, max mem: 162.5, count: 57928"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22189,
            "unit": "median block_count",
            "extra": "avg block_count: 20775.330392901535, max block_count: 23708.0, count: 57928"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.6036459052617, max segment_count: 97.0, count: 57928"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753993335033,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.30097,
            "unit": "median cpu",
            "extra": "avg cpu: 21.538709086308472, max cpu: 42.985077, count: 57888"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 226.5,
            "unit": "median mem",
            "extra": "avg mem: 225.57434689346238, max mem: 231.65234375, count: 57888"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.323614,
            "unit": "median cpu",
            "extra": "avg cpu: 22.184384206831144, max cpu: 33.4995, count: 57888"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.8203125,
            "unit": "median mem",
            "extra": "avg mem: 159.75113851316334, max mem: 160.54296875, count: 57888"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22090,
            "unit": "median block_count",
            "extra": "avg block_count: 20618.13424198452, max block_count: 23528.0, count: 57888"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.41055140961858, max segment_count: 97.0, count: 57888"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754064184442,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 21.47454209750717, max cpu: 42.985077, count: 57875"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.6875,
            "unit": "median mem",
            "extra": "avg mem: 228.15785427915768, max mem: 239.2265625, count: 57875"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.323614,
            "unit": "median cpu",
            "extra": "avg cpu: 22.122353949160736, max cpu: 33.267326, count: 57875"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.44140625,
            "unit": "median mem",
            "extra": "avg mem: 160.0745639173866, max mem: 162.23046875, count: 57875"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22520,
            "unit": "median block_count",
            "extra": "avg block_count: 20784.878358531318, max block_count: 23627.0, count: 57875"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.68590928725702, max segment_count: 97.0, count: 57875"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754414272326,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.46994049928983, max cpu: 42.772278, count: 57745"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.03515625,
            "unit": "median mem",
            "extra": "avg mem: 226.74726491471122, max mem: 230.90625, count: 57745"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 22.223541872147525, max cpu: 33.136093, count: 57745"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.40625,
            "unit": "median mem",
            "extra": "avg mem: 159.97509193166076, max mem: 161.78125, count: 57745"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22288,
            "unit": "median block_count",
            "extra": "avg block_count: 20793.855069703004, max block_count: 23643.0, count: 57745"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.6312234825526, max segment_count: 97.0, count: 57745"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754416663880,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 21.319326902338663, max cpu: 42.814667, count: 57796"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 229.80078125,
            "unit": "median mem",
            "extra": "avg mem: 229.84889640124317, max mem: 240.1953125, count: 57796"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.346306,
            "unit": "median cpu",
            "extra": "avg cpu: 22.35158517307281, max cpu: 33.366436, count: 57796"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 160.15625,
            "unit": "median mem",
            "extra": "avg mem: 160.16722840356599, max mem: 161.515625, count: 57796"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22584,
            "unit": "median block_count",
            "extra": "avg block_count: 20922.86656516022, max block_count: 23876.0, count: 57796"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 69.07216762405703, max segment_count: 98.0, count: 57796"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754423103026,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 21.40287750360397, max cpu: 42.942345, count: 57946"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.703125,
            "unit": "median mem",
            "extra": "avg mem: 227.34528402521312, max mem: 232.94921875, count: 57946"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 22.085686677070818, max cpu: 33.300297, count: 57946"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 162.4765625,
            "unit": "median mem",
            "extra": "avg mem: 161.86404051023797, max mem: 163.765625, count: 57946"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22205,
            "unit": "median block_count",
            "extra": "avg block_count: 20751.39614468643, max block_count: 23496.0, count: 57946"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.63129465364305, max segment_count: 95.0, count: 57946"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754539186170,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.210833,
            "unit": "median cpu",
            "extra": "avg cpu: 21.50293733894817, max cpu: 42.64561, count: 57871"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 229.17578125,
            "unit": "median mem",
            "extra": "avg mem: 228.59914541879783, max mem: 240.01171875, count: 57871"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.255816,
            "unit": "median cpu",
            "extra": "avg cpu: 22.170128390278897, max cpu: 33.20158, count: 57871"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 159.90625,
            "unit": "median mem",
            "extra": "avg mem: 159.78634632955195, max mem: 161.7109375, count: 57871"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22189,
            "unit": "median block_count",
            "extra": "avg block_count: 20511.29849147241, max block_count: 23307.0, count: 57871"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.25537834148365, max segment_count: 93.0, count: 57871"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0e385c88549677dc0e47d2509ea746cb7170bd8d",
          "message": "perf: Use Arrow for fast field execution (#2924)\n\n## What\n\nSwitches `Mixed` fast fields execution to fetching data into Arrow\narrays. A followup change will remove `Numeric`.\n\n## Why\n\nThis change is necessary for `Mixed`'s performance to match `Numeric`\nexecution. The:\n1. creation and destruction of `TantivyValue` and `OwnedValue`\n2. allocation and encoding/decoding of Strings\n\n...represented the largest remaining bottlenecks in (`Mixed`) fast\nfields execution.\n\nArrow removes those overheads for data held in memory, similar to how\nour `FFType` wrapper allows us to avoid `OwnedValue` overheads when\nfetching individual rows. String overhead is reduced by directly copying\nfrom the term dictionary into a `StringViewArray`, which has a single\ncontiguous buffer for the string data, and then a separate series of\nviews into that buffer (similar to allocating strings in an arena).\n\nFuture work could:\n* Push arrow arrays further down into Tantivy (e.g. as a `first_vals`\nvariant), removing additional overheads involved in fetching batches of\nrows.\n* Feed the arrow outputs of `Mixed` execution direct directly into a\nvectorized join implementation (e.g. DataFusion).\n\n## Tests\n\nGives a 1.6x speedup for `bucket-string-nofilter` and\n`bucket-string-filter`, with other changes being ~ in the noise.",
          "timestamp": "2025-08-09T14:16:01-07:00",
          "tree_id": "1fcdcb6500bb2e854ecfc613581ee13bc002b050",
          "url": "https://github.com/paradedb/paradedb/commit/0e385c88549677dc0e47d2509ea746cb7170bd8d"
        },
        "date": 1754775868975,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.233301,
            "unit": "median cpu",
            "extra": "avg cpu: 21.433828212172905, max cpu: 42.687748, count: 57467"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 228.84765625,
            "unit": "median mem",
            "extra": "avg mem: 228.10452126329022, max mem: 233.5546875, count: 57467"
          },
          {
            "name": "Count Query - Primary - cpu",
            "value": 23.27837,
            "unit": "median cpu",
            "extra": "avg cpu: 22.249140408514272, max cpu: 33.300297, count: 57467"
          },
          {
            "name": "Count Query - Primary - mem",
            "value": 161.37890625,
            "unit": "median mem",
            "extra": "avg mem: 160.8020389011302, max mem: 163.48046875, count: 57467"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 22301,
            "unit": "median block_count",
            "extra": "avg block_count: 20656.49591939722, max block_count: 23271.0, count: 57467"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 67,
            "unit": "median segment_count",
            "extra": "avg segment_count: 68.38627386152052, max segment_count: 97.0, count: 57467"
          }
        ]
      }
    ],
    "pg_search wide-table.toml Performance - TPS": [
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "committer": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "id": "6603901ab5f5342e3de4b0bfc99065823a606d92",
          "message": "Fix mintlify check workflow",
          "timestamp": "2025-07-06T17:07:57Z",
          "url": "https://github.com/paradedb/paradedb/commit/6603901ab5f5342e3de4b0bfc99065823a606d92"
        },
        "date": 1752442236359,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.394910104031283,
            "unit": "median tps",
            "extra": "avg tps: 27.40363733171049, max tps: 29.8013126016641, count: 56545"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 130.94928355084787,
            "unit": "median tps",
            "extra": "avg tps: 130.83334295106317, max tps: 139.2821900187232, count: 56545"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "c0442237441f33c1c51d6c11e29849eda05816a7",
          "message": "chore: Upgrade to `0.16.2` (#2760)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-01T21:30:02Z",
          "url": "https://github.com/paradedb/paradedb/commit/c0442237441f33c1c51d6c11e29849eda05816a7"
        },
        "date": 1752442252713,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 16.159447636951437,
            "unit": "median tps",
            "extra": "avg tps: 14.809828617457812, max tps: 24.403885476014544, count: 57332"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 77.12986876221302,
            "unit": "median tps",
            "extra": "avg tps: 76.76276613533433, max tps: 77.30224567934269, count: 57332"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "71ea95206a8e487805333d573e859dad68dab572",
          "message": "chore: Upgrade to `0.16.1` (#2748)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-30T19:38:06Z",
          "url": "https://github.com/paradedb/paradedb/commit/71ea95206a8e487805333d573e859dad68dab572"
        },
        "date": 1752442254437,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 16.554145989849115,
            "unit": "median tps",
            "extra": "avg tps: 15.269708280453532, max tps: 24.994078246768787, count: 57542"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 75.53674769001191,
            "unit": "median tps",
            "extra": "avg tps: 75.52729230044916, max tps: 77.8814162149735, count: 57542"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@paradedb.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "4fd1b2b6b6664d03946be0f4836732f0f40df0cc",
          "message": "chore: Rename datasets and add string paging queries (#2834)\n\n## What\n\nAdd a high-cardinality paging/top-n query to the benchmarks, and rename\ndatasets to match their content. Additionally, improve the generation\nscript for the `docs` dataset to avoid joins and allow for deterministic\nrelative-position queries.\n\n## Why\n\nWe don't currently have a high-cardinality string paging/top-n query in\nthe benchmark. We have top-n on a string column, but only for\nlow-cardinality values (`top_n-string.sql`). The top-n case represented\nan important gap that a user encountered, which #2828 addresses.\n\nThe names of the `benchmark` datasets don't currently describe their\nshape / schema, and for the `join` dataset in particular, that would\ndiscourage using it for other types of queries. We rename it to `docs`\nhere, and then use the `pages` table as the dataset for top-n.\n\n## Tests\n\nTested locally that the new query demonstrates a speedup for #2828.",
          "timestamp": "2025-07-13T18:04:27Z",
          "url": "https://github.com/paradedb/paradedb/commit/4fd1b2b6b6664d03946be0f4836732f0f40df0cc"
        },
        "date": 1752442316929,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.820080055862302,
            "unit": "median tps",
            "extra": "avg tps: 27.834241494196217, max tps: 30.453223515019523, count: 56451"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 127.3977321254237,
            "unit": "median tps",
            "extra": "avg tps: 127.118831626562, max tps: 144.56693435062684, count: 56451"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr",
            "email": "eebbrr@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "e350be5d171ddb28a700c02d8adc32a1a9f4b084",
          "message": "feat: custom fsm (#2765)\n\nA custom FSM implementation that allows us to internally track\nfree/reusable blocks without generating full read+write cycles on every\npage that is returned to the FSM.\n\nThere's a new UDF called `paradedb.fsm_info()` that returns a table of\nFSM block numbers in use and the free block numbers they contain.\n\n## Why\n\nTo reduce I/O during segment merging and garbage collection, with an aim of reducing WAL traffic for enterprise.",
          "timestamp": "2025-07-09T15:42:21Z",
          "url": "https://github.com/paradedb/paradedb/commit/e350be5d171ddb28a700c02d8adc32a1a9f4b084"
        },
        "date": 1752442321110,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.422879453280174,
            "unit": "median tps",
            "extra": "avg tps: 27.43783426401097, max tps: 30.12035266579926, count: 56530"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 128.50874295170954,
            "unit": "median tps",
            "extra": "avg tps: 128.82428203223077, max tps: 140.94530954189634, count: 56530"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Kaihong.Wang",
            "username": "wangkhc",
            "email": "wangkhc@163.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "7f560910072d570e0dca4d19a9fe02b47f6917e5",
          "message": "fix: Add missing stopword filters to Jieba tokenizer (#2790)\n\n### What\n\nThis PR fixes a bug where the Jieba tokenizer was missing stopword\nfiltering capabilities that are available in other tokenizers. The fix\nadds both custom stopword lists and language-based stopword filtering\nsupport to the Jieba tokenizer. (Fix #2789 )\n\n### Why\n\nThe Jieba tokenizer implementation was inconsistent with other\ntokenizers in the codebase - it lacked the\n`.filter(filters.stopwords_language())` and\n`.filter(filters.stopwords())` calls that are present in all other\ntokenizer variants (ICU, Chinese Lindera, etc.). This meant users\ncouldn't filter out common Chinese stop words like \"的\", \"了\", \"在\" or\nEnglish stop words when using mixed-language content, reducing search\nquality and relevance.\n\nThis inconsistency was discovered when comparing the Jieba tokenizer\nimplementation against other tokenizer variants in\n`tokenizers/src/manager.rs`.\n\n### How\n\n1. **Bug Fix:** Modified `tokenizers/src/manager.rs` in the\n`SearchTokenizer::Jieba` case within `to_tantivy_tokenizer()` method:\n- Added `.filter(filters.stopwords_language())` to support\nlanguage-based stopwords (e.g., English, Spanish, etc.)\n- Added `.filter(filters.stopwords())` to support custom stopword lists\n- This brings Jieba tokenizer in line with all other tokenizer\nimplementations\n\n2. **Code Changes:**\n   ```rust\n   // Before (missing stopword filters)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .build(),\n   ),\n\n   // After (with stopword filters added)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .filter(filters.stopwords_language())  // ← Added\n           .filter(filters.stopwords())           // ← Added\n           .build(),\n   ),\n   ```\n\n### Tests\n\nAdded comprehensive test coverage in `tokenizers/src/manager.rs`:\n\n1. **`test_jieba_tokenizer_with_stopwords`**: \n   - Tests custom stopword filtering with Chinese stopwords\n- Verifies stopwords are filtered out while content words are preserved\n\n2. **`test_jieba_tokenizer_with_language_stopwords`**:\n   - Tests language-based stopword filtering with English stopwords\n   - Tests the `stopwords_language: \"English\"` configuration option\n\nBoth tests use natural, conversational sentences instead of artificial\ntest data, making them more representative of real-world usage and\nsuitable for open-source community review.\n\n**All existing tests continue to pass** (12/12), ensuring no regressions\nwere introduced.\n\n### Ticket(s) Closed\n\nFix #2789\n\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-09T12:38:14Z",
          "url": "https://github.com/paradedb/paradedb/commit/7f560910072d570e0dca4d19a9fe02b47f6917e5"
        },
        "date": 1752442353084,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.553686989507455,
            "unit": "median tps",
            "extra": "avg tps: 27.558566783599648, max tps: 30.117527128519693, count: 56533"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 130.55712472358144,
            "unit": "median tps",
            "extra": "avg tps: 130.27248344836332, max tps: 142.806393353869, count: 56533"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "47bbe518381e1429f228328336dad78e99636ad9",
          "message": "chore: Upgrade to `0.16.0` (#2720)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-23T23:04:37Z",
          "url": "https://github.com/paradedb/paradedb/commit/47bbe518381e1429f228328336dad78e99636ad9"
        },
        "date": 1752442357506,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 15.471582808662124,
            "unit": "median tps",
            "extra": "avg tps: 14.295234446550012, max tps: 23.179330306033904, count: 57290"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 72.94771597895858,
            "unit": "median tps",
            "extra": "avg tps: 73.04437425920533, max tps: 78.16802493947438, count: 57290"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b96e41e25c3fd2126f54aa5cb66d4deffb482047",
          "message": "perf: Lazily load fast fields dictionaries. (#2842)\n\n## What\n\nLazily load fast field dictionaries from buffers: see\nhttps://github.com/paradedb/tantivy/pull/55\n\n## Why\n\nA customer reported slower-than-expected paging on a string/uuid column.\n85% of the time for that query was being spent in _opening_ a fast\nfields string/bytes column, with a large fraction of that time spent\nfully consuming the column's `Dictionary`.\n\n## Tests\n\nSee the attached benchmark results:\n* [`docs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014379545)\n    * No regressions.\n    * 2x faster for `top_n-score`\n    * 1.4x faster for `highlighting` \n* [`logs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014350211)\n    * No regressions.\n    * 4.5x faster for `paging-string-max`\n    * 1.7x faster for `paging-string-median`\n    * 1.6x faster for `paging-string-min`\n\nThe `paging-string-*` benchmarks were added in #2834 to highlight this\nparticular issue.",
          "timestamp": "2025-07-14T08:28:09-07:00",
          "tree_id": "d144335dcb7c7f138a112c01e5b9ff5e0168fe37",
          "url": "https://github.com/paradedb/paradedb/commit/b96e41e25c3fd2126f54aa5cb66d4deffb482047"
        },
        "date": 1752509169384,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.31715639607377,
            "unit": "median tps",
            "extra": "avg tps: 28.253948384602385, max tps: 30.115363538507868, count: 57172"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 142.15854575608682,
            "unit": "median tps",
            "extra": "avg tps: 141.66622780230318, max tps: 148.52373904162434, count: 57172"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8",
          "message": "fix: orphaned delete entries get GCed too early (#2845)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nWhen running a new stressgres suite (coming in a future PR), I hit a\nmysterious bug where it looked like vacuum could cause corruption of\nsome pages.\n\nTurns out it's caused by scenarios where:\n\n1. A `DeleteEntry` already exists for a `SegmentMetaEntry`, and a new\none is created\n2. A new, \"fake\" `SegmentMetaEntry` gets created for the purpose of\nstoring the old `DeleteEntry`, so its blocks can get garbage collected\n3. Because this \"fake\" entry is invisible to all readers besides the\ngarbage collector, it doesn't get pinned and can get garbage collected\ntoo early (i.e. while a reader is still pinning the old `DeleteEntry`)\n\nThe solution is to copy all of the contents of the old\n`SegmentMetaEntry` to the fake one, so that the \"pintest blockno\" of the\nfake entry is that same as that of the entry with the new `DeleteEntry`.\nThat way, the `DeleteEntry` doesn't get garbage collected until the pin\nis released.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-14T15:46:29-04:00",
          "tree_id": "3dc55f49de121cf04534f48e3584a2a3ae333407",
          "url": "https://github.com/paradedb/paradedb/commit/ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8"
        },
        "date": 1752524576541,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.330048024244046,
            "unit": "median tps",
            "extra": "avg tps: 27.305459812830478, max tps: 29.261644685497295, count: 56467"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 130.87823847781894,
            "unit": "median tps",
            "extra": "avg tps: 130.8731015204667, max tps: 142.55683895605753, count: 56467"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "eb3bc1d570c85d60804f6aab2f2d2cf998bd7597",
          "message": "ci: benchmark workflow cleanups (#2851)\n\nThis is an attempt to cleanup the benchmark workflows a little bit.  \n\n- Centralizes checking out the latest benchmark code/suites/actions into\na composite action.\n- figures out the PR #/title being tested\n- Changes the slack notification messages to be reactive to the\nenvironment to hopefully avoid conflicts with -enterprise",
          "timestamp": "2025-07-15T12:15:54-04:00",
          "tree_id": "223c726790d68868f538b7f5aab9cf9904494f44",
          "url": "https://github.com/paradedb/paradedb/commit/eb3bc1d570c85d60804f6aab2f2d2cf998bd7597"
        },
        "date": 1752598339826,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.382677648563025,
            "unit": "median tps",
            "extra": "avg tps: 28.290879402955007, max tps: 30.52045789090136, count: 57164"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 137.55425267303485,
            "unit": "median tps",
            "extra": "avg tps: 137.65325569812168, max tps: 145.6595574352143, count: 57164"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c7bdeebed6249725c87b87c276d2e09dfaffd152",
          "message": "ci: publish stressgres benchmark graphs (#2852)\n\nThis will publish every stressgres benchmark graph to the new\n`paradedb/benchmark-data` repo.\n\nIt also ensures that when one of our \"[benchmark]\" labels are applied,\nthat it does *not* pull the benchmarks from main, but instead from the\nPR branch itself.",
          "timestamp": "2025-07-15T18:13:26-04:00",
          "tree_id": "f18bf519521a03613c5b12c861092f24314476ad",
          "url": "https://github.com/paradedb/paradedb/commit/c7bdeebed6249725c87b87c276d2e09dfaffd152"
        },
        "date": 1752619793346,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.494826383202582,
            "unit": "median tps",
            "extra": "avg tps: 27.52106285429916, max tps: 29.705591447831516, count: 56424"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 128.51072601320266,
            "unit": "median tps",
            "extra": "avg tps: 128.23104107317803, max tps: 145.19202534924474, count: 56424"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "21990816+philippemnoel@users.noreply.github.com"
          },
          "committer": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@gmail.com"
          },
          "id": "8c164d666c4af2049b439690afa7823ab5be2c88",
          "message": "ci: Post \"One-branch Release Model\" Improvements (#2792)\n\n# Ticket(s) Closed\n\n- Closes #N/A\n\n## What\n- Don't make Docker Scout post on PRs that don't modify the Dockerfile,\nnot necessary.\n- Make sure the SchemaBot workflow errors when community contributors\nmake a PR, so we can catch needed changes to the SQL upgrade script.\n- Rename it to SchemaBot\n\n## Why\nQoL\n\n## How\n^\n\n## Tests\nCI",
          "timestamp": "2025-07-08T15:49:16Z",
          "url": "https://github.com/paradedb/paradedb/commit/8c164d666c4af2049b439690afa7823ab5be2c88"
        },
        "date": 1752669770232,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.895989538945585,
            "unit": "median tps",
            "extra": "avg tps: 28.80995836001874, max tps: 29.972178637932505, count: 57536"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 139.77297254808417,
            "unit": "median tps",
            "extra": "avg tps: 139.4712054480924, max tps: 155.96113186579203, count: 57536"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f7c13c858851200e8ab5395779f821ca484cda0d",
          "message": "feat: Add a custom scan for aggregates (#2763)\n\n## What\n\nAdd a new `CustomScan` (installed with `create_upper_paths_hook`) which\nreplaces simple aggregate plans on `bm25`-indexed tables with aggregate\nimplementations using [Tantivy\naggregates](https://docs.rs/tantivy/latest/tantivy/aggregation/index.html).\n\n## Why\n\nTantivy aggregates can be significantly faster (in benchmarks, we've\nmeasured between 4-10x for bucketing/faceting queries). They have been\nexposed via `paradedb.aggregate` for a while now, but that function\nrequires learning a new API, and does not feel \"Postgres native\".\n\n## How\n\n* Adjust `CustomPathBuilder` and `CustomPathMethods` to allow multiple\n`CustomScan` implementations.\n* Remove the `CustomScan::PrivateData: Default` bound, as it requires\nthe `PrivateData` to start in an illegal state.\n* Move `qual_inspect` to a reusable location.\n* Split out a module to be used by both the `aggregate` API method and\nby the aggregate custom scan.\n* Implement the \"ParadeDB Aggregate Scan\" `CustomScan` type\n    * Add the new `CustomScan` type, hidden behind a GUC\n    * Filter Paths to those which represent `count(*)` queries\n    * Extract `quals` during `CustomPath` generation\n* Replace `Aggrefs` in target lists with `FuncExprs` while producing a\n`CustomPlan`\n* Execute a `count(*)` aggregate by pushing down a `value_count`\naggregate on the `ctid`\n\n## Tests\n\nAdded tests to validate that:\n* the GUC properly controls usage\n* the scan does not trigger for unsupported aggregates, tables without a\n`bm25` index, or group-bys (for now)",
          "timestamp": "2025-07-16T09:12:24-07:00",
          "tree_id": "69b043a9363fcf6ce2de468c97d14e41f593f017",
          "url": "https://github.com/paradedb/paradedb/commit/f7c13c858851200e8ab5395779f821ca484cda0d"
        },
        "date": 1752684636196,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 26.848671487710114,
            "unit": "median tps",
            "extra": "avg tps: 26.875068178105664, max tps: 29.664177954774157, count: 57963"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 131.03485228825542,
            "unit": "median tps",
            "extra": "avg tps: 130.80097684615797, max tps: 144.10530655851247, count: 57963"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c779dbb72178c1aa0e14ad94c72eeb9937251acd",
          "message": "feat: a background merger for large layers (#2743)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nLaunches Postgres [dynamic background\nworkers](https://docs.rs/pgrx/latest/pgrx/bgworkers/struct.DynamicBackgroundWorker.html)\nto merge large layers in the background.\n\nThis is configured by a new index setting, `background_layer_sizes`. Any\nlayers specified here will be merged in the background.\n\n## Why\n\nWrite throughput, and create more balanced indexes with fewer segments.\n\n## How\n\n1. The default (foreground) `layer_sizes` is now `10kb`, `100kb`, `1mb`\n2. The default `background_layer_sizes` is `10mb`, `100mb`, `1gb`,\n`10gb`, `100gb`, `1tb`\n3. After `aminsert` merges in the foreground, it checks to see if there\nare enough candidates for a background merge. If so, it spawns a dynamic\nbackground worker process to do the merge.\n4. `amvacuumcleanup` can also spawn a background worker, allowing the\nuser to rebalance their index with a `VACUUM`.\n\nAdditionally, I've tweaked merge policy to make it smarter:\n\n1. Terminate a merge early if we predict that, after the merge, we will\nend up with fewer than `target_segment_count` segments.\n2. Set the max layer size as byte size of index divided by\n`target_segment_count`. Discard all layer sizes above that, which avoids\nthe problem of merging too many segments into one giant segment.\n\nThis has allowed us to delete some code:\n\n1. `force_merge` is deprecated\n2. No longer need to store the segments created by an index build and\navoid merging them, since we just do expensive merges in the background\n\n## Tests\n\nAdded a new stressgres `.toml` file that configures the layer\nsizes/threshold, which triggers background merging.\n\n---------\n\nSigned-off-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>\nCo-authored-by: Philippe Noël <21990816+philippemnoel@users.noreply.github.com>\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-16T12:44:23-04:00",
          "tree_id": "153c406e456a638a6b68ca9123210bbd498d66a5",
          "url": "https://github.com/paradedb/paradedb/commit/c779dbb72178c1aa0e14ad94c72eeb9937251acd"
        },
        "date": 1752686563291,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.272880944737512,
            "unit": "median tps",
            "extra": "avg tps: 28.113727458335315, max tps: 28.488902051741423, count: 57220"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 139.84343942746045,
            "unit": "median tps",
            "extra": "avg tps: 139.07330414219692, max tps: 142.1886810616866, count: 57220"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "d197630155f55d13eea0a81841951645a367a5f7",
          "message": "test: Make GUCs a tested property, and add proptests for the aggregate custom scan (#2788)\n\n## What\n\nMove the GUCs that are in use into a test property, which reduces\nruntime while allowing for testing arbitrary combinations of GUCs.\n\nAdditionally, added proptests for the aggregate custom scan by:\n* Adding its GUC to the generated set\n* Expanding the `generated_single_relation` test to use `COUNT(*)` in\nits target list.\n\n## Why\n\nTo add additional test coverage for #2763.",
          "timestamp": "2025-07-16T10:57:16-07:00",
          "tree_id": "6a92b62b640f7a0b2dc7e6507966b75f3bd00594",
          "url": "https://github.com/paradedb/paradedb/commit/d197630155f55d13eea0a81841951645a367a5f7"
        },
        "date": 1752690839206,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.557130855444164,
            "unit": "median tps",
            "extra": "avg tps: 28.367013931267547, max tps: 28.658773131998693, count: 57786"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 140.46948305208474,
            "unit": "median tps",
            "extra": "avg tps: 139.39578803939588, max tps: 142.72541952634325, count: 57786"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "58f6742b2cde46fe2c15077e59a0d5b091ba6000",
          "message": "chore: Upgrade to `0.17.0` (#2870)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-16T19:49:53-04:00",
          "tree_id": "b77118d365b31a4f3478b7c0571cf1f7e9f8a5b2",
          "url": "https://github.com/paradedb/paradedb/commit/58f6742b2cde46fe2c15077e59a0d5b091ba6000"
        },
        "date": 1752712094245,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.578566985165228,
            "unit": "median tps",
            "extra": "avg tps: 28.530358458421155, max tps: 28.83825378649162, count: 57203"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 138.57341161682152,
            "unit": "median tps",
            "extra": "avg tps: 137.7358465206127, max tps: 141.07341832498489, count: 57203"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "86bc2b092d2857a997cd05af4b554ac96ba225fd",
          "message": "fix: Fix `rescan` for top-n (#2868)\n\n## What\n\nComments in both `Normal` and `TopN` scans claimed that their search\nresults would be reset by `PdbScanState`, but this was incorrect: they\nwere local variables in the struct, and needed to be reset locally.\n\n## Why\n\nFixes issue detected by the prop tests and repro'd by @eeeebbbbrrrr in\n#2751.\n\n## Tests\n\nNew regression test from #2751: thanks @eeeebbbbrrrr!\n\n---------\n\nCo-authored-by: Eric B. Ridge <eebbrr@paradedb.com>",
          "timestamp": "2025-07-17T08:59:32-07:00",
          "tree_id": "ccc9162bb96008badcb3046612d16394604ed6f7",
          "url": "https://github.com/paradedb/paradedb/commit/86bc2b092d2857a997cd05af4b554ac96ba225fd"
        },
        "date": 1752770187038,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.35247002402735,
            "unit": "median tps",
            "extra": "avg tps: 27.427404596092366, max tps: 27.931419819075415, count: 56030"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 136.83059434639068,
            "unit": "median tps",
            "extra": "avg tps: 136.2806159099001, max tps: 138.73334834985792, count: 56030"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5772be0d3dea751c3609729efcc66cc69d9d30ee",
          "message": "chore: Remove debug output in aggregate scan (#2876)\n\n## What\n\nRemove a stray `println`.\n\n## Why\n\nIt's not doing anyone any good.",
          "timestamp": "2025-07-17T09:46:08-07:00",
          "tree_id": "06a002186c2a701283d73854f64c4225a08aa1a8",
          "url": "https://github.com/paradedb/paradedb/commit/5772be0d3dea751c3609729efcc66cc69d9d30ee"
        },
        "date": 1752772983917,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.562956943979223,
            "unit": "median tps",
            "extra": "avg tps: 27.4248947817487, max tps: 27.732300954052057, count: 57758"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 128.0365126809508,
            "unit": "median tps",
            "extra": "avg tps: 127.43020980762667, max tps: 130.66972624057132, count: 57758"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "16307a200509cd31b42c1338f3c5b6e097a77fbf",
          "message": "fix: issue #2844 - Use `paradedb.with_index()` when necessary (#2879)\n\n# Ticket(s) Closed\n\n- Closes #2844\n\n## What\n\nWhen the right-hand-side of the `@@@` operator is a complex expression\nthat can't be evaluated to a `T_Const` during planning, we need to\nrewrite it to be a call to our `paradedb.with_index(<indexrelid>,\n<rhs>)` so that it can be properly used in Filter contexts during\nexecution.\n\nThis seems to come up, at least, during RLS rule evaluation if those\nrules use our `@@@` operator.\n\n## Why\n\nSo long as the right-hand-side of `@@@` is a `SearchQueryInput`, we need\nto be able to execute it when Postgres wants us to, whether that's\nduring a scan or, as in this case, a filter being run as part of RLS\nevaluation.\n\n## How\n\nWrapping Postgres expression nodes!\n\n## Tests\n\nI used the re-create the OP from #2844 put together as a regression\ntest. I seem to be lacking the creative energy today to reduce the test\ndown to its simplest form that doesn't require a complicated RLS\nconfiguration.",
          "timestamp": "2025-07-18T13:21:25-04:00",
          "tree_id": "f2e8c7ca2ce45eefd03b85ff45d56f0481ebae1a",
          "url": "https://github.com/paradedb/paradedb/commit/16307a200509cd31b42c1338f3c5b6e097a77fbf"
        },
        "date": 1752861486450,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.560602646610846,
            "unit": "median tps",
            "extra": "avg tps: 27.47694540024023, max tps: 27.863115748161295, count: 57764"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 135.72585042157178,
            "unit": "median tps",
            "extra": "avg tps: 134.99500063424355, max tps: 136.88170470308302, count: 57764"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "8b45b24d47a7cac36696bae2d8505c750a7ee801",
          "message": "test: added more join regression tests + improved when to use Join quals (#2808)\n\n# Ticket(s) Closed\n\n- Closes #2807\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-18T10:40:03-07:00",
          "tree_id": "fb63bd81696cd27d03b6d5724551c3ff8fd59613",
          "url": "https://github.com/paradedb/paradedb/commit/8b45b24d47a7cac36696bae2d8505c750a7ee801"
        },
        "date": 1752862607331,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.345083907530327,
            "unit": "median tps",
            "extra": "avg tps: 27.31875994755776, max tps: 27.6725178435038, count: 56580"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 129.5415322449111,
            "unit": "median tps",
            "extra": "avg tps: 128.96287903135322, max tps: 133.79855913063307, count: 56580"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "77c6cd1aeb5f5c03bba892a38cd792a113cfbd39",
          "message": "chore: move code around (#2889)\n\n## What\n\nThis relocates the `src/boostrap/create_bm25.rs` source to\n`src/api/admin.rs`, which I believe is a more sensibile location and\nname.\n\nAdditionally it moves the `#[pg_extern] schema()` function from\n`src/api/builder_fns.rs` to this new(ly renamed) `admin.rs`, as it's an\nadministrative function, not a query builder function.\n\n## Why\n\nTrying to better organize things\n\n## How\n\n## Tests\n\nNo functional changes here.",
          "timestamp": "2025-07-22T12:39:21-04:00",
          "tree_id": "1ab036752fc8adf7ad2757741d4e274ab0e73c64",
          "url": "https://github.com/paradedb/paradedb/commit/77c6cd1aeb5f5c03bba892a38cd792a113cfbd39"
        },
        "date": 1753204566572,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 29.00341934298043,
            "unit": "median tps",
            "extra": "avg tps: 28.816883910229965, max tps: 29.258784756170176, count: 57628"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 135.12259497023186,
            "unit": "median tps",
            "extra": "avg tps: 134.58698459138492, max tps: 136.55890154706543, count: 57628"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "1e26a38533fa872a935955128b2ecd08b3febf66",
          "message": "perf: Skip computing scores if not requested for top-n field queries (#2892)\n\n## What\n\n`SearchIndexReader::{top_by_field_in_segments,\ntop_by_string_field_in_segments}` were not using\n`SearchIndexReader::need_scores`, and were instead universally enabling\nscores.\n\nUse the `enable_scoring` helper and `self.need_scores` to skip computing\nscores where possible.\n\n## Why\n\nComputing scores requires field norms, which ([if they have not been\ndisabled](https://docs.paradedb.com/documentation/indexing/record)) can\ntake time to load and use.",
          "timestamp": "2025-07-22T15:58:56-07:00",
          "tree_id": "2a41c9e06be04ef92fed2b265dc3f90340fb0e37",
          "url": "https://github.com/paradedb/paradedb/commit/1e26a38533fa872a935955128b2ecd08b3febf66"
        },
        "date": 1753227345123,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.474239519577406,
            "unit": "median tps",
            "extra": "avg tps: 28.325083300341763, max tps: 28.645523483582853, count: 57209"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 142.73025596612604,
            "unit": "median tps",
            "extra": "avg tps: 141.8068853762286, max tps: 144.4662259408821, count: 57209"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753282979801,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.083452531112716,
            "unit": "median tps",
            "extra": "avg tps: 27.145568441724137, max tps: 27.91271441171455, count: 57904"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 136.63278988451967,
            "unit": "median tps",
            "extra": "avg tps: 136.1532840704618, max tps: 140.4793490341162, count: 57904"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753289439584,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.736037194702345,
            "unit": "median tps",
            "extra": "avg tps: 28.62591646989888, max tps: 28.898146120364817, count: 57616"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 138.83721228847457,
            "unit": "median tps",
            "extra": "avg tps: 138.22258104805857, max tps: 141.43269600911353, count: 57616"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753291894389,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.773861153816227,
            "unit": "median tps",
            "extra": "avg tps: 27.807614320984662, max tps: 28.289003228445427, count: 57767"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 139.76140194669048,
            "unit": "median tps",
            "extra": "avg tps: 138.9593371066946, max tps: 140.84516682651764, count: 57767"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753303480268,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.50790342648681,
            "unit": "median tps",
            "extra": "avg tps: 28.444926174280372, max tps: 28.83726845398779, count: 57731"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 138.83554757822594,
            "unit": "median tps",
            "extra": "avg tps: 137.7003504571355, max tps: 141.5786816349994, count: 57731"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753311177241,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.492230755664497,
            "unit": "median tps",
            "extra": "avg tps: 27.43082663934965, max tps: 27.623165036947483, count: 56511"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 133.60572417020592,
            "unit": "median tps",
            "extra": "avg tps: 133.14049674419545, max tps: 135.35890823791817, count: 56511"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753374640306,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.555684579429766,
            "unit": "median tps",
            "extra": "avg tps: 27.475237527579665, max tps: 27.644345946592324, count: 57746"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 132.60129803386056,
            "unit": "median tps",
            "extra": "avg tps: 132.20470134352934, max tps: 134.52317132320562, count: 57746"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753388815459,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.365159882098286,
            "unit": "median tps",
            "extra": "avg tps: 27.282143483150328, max tps: 27.54664252385888, count: 56444"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 133.24779704688518,
            "unit": "median tps",
            "extra": "avg tps: 132.62392511290713, max tps: 135.9459216743121, count: 56444"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753474246615,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.597732781977346,
            "unit": "median tps",
            "extra": "avg tps: 27.47793175654744, max tps: 27.759428231864366, count: 56448"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 128.19898329404404,
            "unit": "median tps",
            "extra": "avg tps: 127.80377581431101, max tps: 130.42051192905203, count: 56448"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753475996313,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 29.85870030749828,
            "unit": "median tps",
            "extra": "avg tps: 29.662971395840213, max tps: 29.970987718551598, count: 57784"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 140.8543602806654,
            "unit": "median tps",
            "extra": "avg tps: 139.93934067184765, max tps: 143.03930736479523, count: 57784"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753507157851,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.259086577804936,
            "unit": "median tps",
            "extra": "avg tps: 27.19946839932543, max tps: 27.515894891175602, count: 56469"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 132.66856537354457,
            "unit": "median tps",
            "extra": "avg tps: 132.40645806467612, max tps: 134.48600725854718, count: 56469"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753711541549,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.855857634457674,
            "unit": "median tps",
            "extra": "avg tps: 28.75794579898268, max tps: 29.023683756278746, count: 57168"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 136.27200514056761,
            "unit": "median tps",
            "extra": "avg tps: 135.12607323315268, max tps: 138.0669371774741, count: 57168"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753729121037,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.7828083823036,
            "unit": "median tps",
            "extra": "avg tps: 28.648621817594357, max tps: 28.8550686796093, count: 57484"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 137.77517515646986,
            "unit": "median tps",
            "extra": "avg tps: 136.80396388108636, max tps: 140.0698091749902, count: 57484"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753806505777,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 29.048366164800044,
            "unit": "median tps",
            "extra": "avg tps: 28.929704234182946, max tps: 29.191591383127395, count: 57616"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 136.27165356876196,
            "unit": "median tps",
            "extra": "avg tps: 135.67904809427674, max tps: 138.2897367450056, count: 57616"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753813740199,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.90841065701034,
            "unit": "median tps",
            "extra": "avg tps: 28.71129457157642, max tps: 29.050262344899206, count: 57601"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 134.14365594425647,
            "unit": "median tps",
            "extra": "avg tps: 133.66702716598905, max tps: 136.44758055951536, count: 57601"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753831880694,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.881637624072763,
            "unit": "median tps",
            "extra": "avg tps: 28.66005125684554, max tps: 29.040481621877742, count: 57641"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 134.4261060861339,
            "unit": "median tps",
            "extra": "avg tps: 133.58347577268998, max tps: 136.52668834863678, count: 57641"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753901057789,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.40510121317999,
            "unit": "median tps",
            "extra": "avg tps: 27.282125420501572, max tps: 27.599953370996143, count: 56519"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 138.2379611107083,
            "unit": "median tps",
            "extra": "avg tps: 137.62543792834904, max tps: 140.13779252636775, count: 56519"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753911251531,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.156057014631656,
            "unit": "median tps",
            "extra": "avg tps: 27.08505318313734, max tps: 27.34734775556848, count: 57979"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 136.6790735702829,
            "unit": "median tps",
            "extra": "avg tps: 135.88187211227827, max tps: 137.78794218451043, count: 57979"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753986789706,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 29.08750611484019,
            "unit": "median tps",
            "extra": "avg tps: 28.956601693062094, max tps: 29.273986949511613, count: 57716"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 136.93949150860385,
            "unit": "median tps",
            "extra": "avg tps: 136.13739315514812, max tps: 138.9413366751237, count: 57716"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753993978531,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 26.929970962770902,
            "unit": "median tps",
            "extra": "avg tps: 26.784113954703095, max tps: 27.017413093374874, count: 57831"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 133.49271191449427,
            "unit": "median tps",
            "extra": "avg tps: 132.74527151840073, max tps: 135.458773471111, count: 57831"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754064804253,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 27.65382043709178,
            "unit": "median tps",
            "extra": "avg tps: 27.609573345019513, max tps: 27.834221242594456, count: 56588"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 134.67014289686614,
            "unit": "median tps",
            "extra": "avg tps: 134.15622422845226, max tps: 136.10787836968458, count: 56588"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754414897662,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.068267666086744,
            "unit": "median tps",
            "extra": "avg tps: 27.92782076203292, max tps: 28.16253273179036, count: 57878"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 139.5838763152089,
            "unit": "median tps",
            "extra": "avg tps: 138.6150676763365, max tps: 141.9152125242895, count: 57878"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754417292251,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.052021826728126,
            "unit": "median tps",
            "extra": "avg tps: 27.935083570067334, max tps: 28.291289732839438, count: 57294"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 138.11243125261797,
            "unit": "median tps",
            "extra": "avg tps: 137.20199134754708, max tps: 140.25345673885803, count: 57294"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754423734559,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.944766501276273,
            "unit": "median tps",
            "extra": "avg tps: 28.786776575270764, max tps: 29.13214828629984, count: 57531"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 136.1531536503699,
            "unit": "median tps",
            "extra": "avg tps: 135.66661684797324, max tps: 138.74776864274574, count: 57531"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754539817903,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.718292750061227,
            "unit": "median tps",
            "extra": "avg tps: 28.55835615188821, max tps: 28.904299740450067, count: 57309"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 144.38316856789632,
            "unit": "median tps",
            "extra": "avg tps: 143.491871063467, max tps: 146.5028278715521, count: 57309"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0e385c88549677dc0e47d2509ea746cb7170bd8d",
          "message": "perf: Use Arrow for fast field execution (#2924)\n\n## What\n\nSwitches `Mixed` fast fields execution to fetching data into Arrow\narrays. A followup change will remove `Numeric`.\n\n## Why\n\nThis change is necessary for `Mixed`'s performance to match `Numeric`\nexecution. The:\n1. creation and destruction of `TantivyValue` and `OwnedValue`\n2. allocation and encoding/decoding of Strings\n\n...represented the largest remaining bottlenecks in (`Mixed`) fast\nfields execution.\n\nArrow removes those overheads for data held in memory, similar to how\nour `FFType` wrapper allows us to avoid `OwnedValue` overheads when\nfetching individual rows. String overhead is reduced by directly copying\nfrom the term dictionary into a `StringViewArray`, which has a single\ncontiguous buffer for the string data, and then a separate series of\nviews into that buffer (similar to allocating strings in an arena).\n\nFuture work could:\n* Push arrow arrays further down into Tantivy (e.g. as a `first_vals`\nvariant), removing additional overheads involved in fetching batches of\nrows.\n* Feed the arrow outputs of `Mixed` execution direct directly into a\nvectorized join implementation (e.g. DataFusion).\n\n## Tests\n\nGives a 1.6x speedup for `bucket-string-nofilter` and\n`bucket-string-filter`, with other changes being ~ in the noise.",
          "timestamp": "2025-08-09T14:16:01-07:00",
          "tree_id": "1fcdcb6500bb2e854ecfc613581ee13bc002b050",
          "url": "https://github.com/paradedb/paradedb/commit/0e385c88549677dc0e47d2509ea746cb7170bd8d"
        },
        "date": 1754776503521,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - tps",
            "value": 28.517616367693858,
            "unit": "median tps",
            "extra": "avg tps: 28.358240483147092, max tps: 28.66465011574384, count: 57274"
          },
          {
            "name": "Single Update - Primary - tps",
            "value": 139.4651978073033,
            "unit": "median tps",
            "extra": "avg tps: 138.99583204523722, max tps: 141.82575619154352, count: 57274"
          }
        ]
      }
    ],
    "pg_search wide-table.toml Performance - Other Metrics": [
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "committer": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "philippemnoel@gmail.com"
          },
          "id": "6603901ab5f5342e3de4b0bfc99065823a606d92",
          "message": "Fix mintlify check workflow",
          "timestamp": "2025-07-06T17:07:57Z",
          "url": "https://github.com/paradedb/paradedb/commit/6603901ab5f5342e3de4b0bfc99065823a606d92"
        },
        "date": 1752442238335,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.70271093751442, max cpu: 50.040096, count: 56545"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 175.515625,
            "unit": "median mem",
            "extra": "avg mem: 173.69064316860465, max mem: 178.2890625, count: 56545"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 15883,
            "unit": "median block_count",
            "extra": "avg block_count: 14488.321425413387, max block_count: 15883.0, count: 56545"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 84.01496153506056, max segment_count: 157.0, count: 56545"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.872832,
            "unit": "median cpu",
            "extra": "avg cpu: 12.100274904992668, max cpu: 32.55814, count: 56545"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 163.8671875,
            "unit": "median mem",
            "extra": "avg mem: 151.70462815843575, max mem: 173.2109375, count: 56545"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "c0442237441f33c1c51d6c11e29849eda05816a7",
          "message": "chore: Upgrade to `0.16.2` (#2760)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-01T21:30:02Z",
          "url": "https://github.com/paradedb/paradedb/commit/c0442237441f33c1c51d6c11e29849eda05816a7"
        },
        "date": 1752442255077,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.121387,
            "unit": "median cpu",
            "extra": "avg cpu: 21.703221802642826, max cpu: 47.524754, count: 57332"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 174.19921875,
            "unit": "median mem",
            "extra": "avg mem: 171.5259118489674, max mem: 176.06640625, count: 57332"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8052,
            "unit": "median block_count",
            "extra": "avg block_count: 7368.411585153143, max block_count: 8455.0, count: 57332"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 76,
            "unit": "median segment_count",
            "extra": "avg segment_count: 76.57784483360078, max segment_count: 118.0, count: 57332"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.980582,
            "unit": "median cpu",
            "extra": "avg cpu: 14.923658087833578, max cpu: 33.168808, count: 57332"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 165.203125,
            "unit": "median mem",
            "extra": "avg mem: 155.11725536131655, max mem: 170.78125, count: 57332"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "71ea95206a8e487805333d573e859dad68dab572",
          "message": "chore: Upgrade to `0.16.1` (#2748)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-30T19:38:06Z",
          "url": "https://github.com/paradedb/paradedb/commit/71ea95206a8e487805333d573e859dad68dab572"
        },
        "date": 1752442256394,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.032629,
            "unit": "median cpu",
            "extra": "avg cpu: 21.406439580149527, max cpu: 47.33728, count: 57542"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 172.91796875,
            "unit": "median mem",
            "extra": "avg mem: 170.4589773828247, max mem: 176.57421875, count: 57542"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 8062,
            "unit": "median block_count",
            "extra": "avg block_count: 7328.47648674012, max block_count: 8159.0, count: 57542"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 76,
            "unit": "median segment_count",
            "extra": "avg segment_count: 76.71116749504709, max segment_count: 112.0, count: 57542"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.980582,
            "unit": "median cpu",
            "extra": "avg cpu: 15.232635930009609, max cpu: 38.155804, count: 57542"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 168.55078125,
            "unit": "median mem",
            "extra": "avg mem: 160.07558202052414, max mem: 178.06640625, count: 57542"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@paradedb.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "4fd1b2b6b6664d03946be0f4836732f0f40df0cc",
          "message": "chore: Rename datasets and add string paging queries (#2834)\n\n## What\n\nAdd a high-cardinality paging/top-n query to the benchmarks, and rename\ndatasets to match their content. Additionally, improve the generation\nscript for the `docs` dataset to avoid joins and allow for deterministic\nrelative-position queries.\n\n## Why\n\nWe don't currently have a high-cardinality string paging/top-n query in\nthe benchmark. We have top-n on a string column, but only for\nlow-cardinality values (`top_n-string.sql`). The top-n case represented\nan important gap that a user encountered, which #2828 addresses.\n\nThe names of the `benchmark` datasets don't currently describe their\nshape / schema, and for the `join` dataset in particular, that would\ndiscourage using it for other types of queries. We rename it to `docs`\nhere, and then use the `pages` table as the dataset for top-n.\n\n## Tests\n\nTested locally that the new query demonstrates a speedup for #2828.",
          "timestamp": "2025-07-13T18:04:27Z",
          "url": "https://github.com/paradedb/paradedb/commit/4fd1b2b6b6664d03946be0f4836732f0f40df0cc"
        },
        "date": 1752442318866,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.622696,
            "unit": "median cpu",
            "extra": "avg cpu: 20.628861161282483, max cpu: 60.057747, count: 56451"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 176.18359375,
            "unit": "median mem",
            "extra": "avg mem: 174.40861093857947, max mem: 179.92578125, count: 56451"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18715,
            "unit": "median block_count",
            "extra": "avg block_count: 17392.997023967688, max block_count: 22354.0, count: 56451"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 84.31962232732812, max segment_count: 158.0, count: 56451"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 12.306341788287172, max cpu: 32.40116, count: 56451"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.2109375,
            "unit": "median mem",
            "extra": "avg mem: 151.64812950335246, max mem: 170.046875, count: 56451"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr",
            "email": "eebbrr@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "e350be5d171ddb28a700c02d8adc32a1a9f4b084",
          "message": "feat: custom fsm (#2765)\n\nA custom FSM implementation that allows us to internally track\nfree/reusable blocks without generating full read+write cycles on every\npage that is returned to the FSM.\n\nThere's a new UDF called `paradedb.fsm_info()` that returns a table of\nFSM block numbers in use and the free block numbers they contain.\n\n## Why\n\nTo reduce I/O during segment merging and garbage collection, with an aim of reducing WAL traffic for enterprise.",
          "timestamp": "2025-07-09T15:42:21Z",
          "url": "https://github.com/paradedb/paradedb/commit/e350be5d171ddb28a700c02d8adc32a1a9f4b084"
        },
        "date": 1752442323005,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.626631624411086, max cpu: 60.40658, count: 56530"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 174.6328125,
            "unit": "median mem",
            "extra": "avg mem: 172.8077671009862, max mem: 177.515625, count: 56530"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18867,
            "unit": "median block_count",
            "extra": "avg block_count: 17546.706368300016, max block_count: 22568.0, count: 56530"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 84.06626569962852, max segment_count: 158.0, count: 56530"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.88621,
            "unit": "median cpu",
            "extra": "avg cpu: 12.246453096152907, max cpu: 32.589718, count: 56530"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.87109375,
            "unit": "median mem",
            "extra": "avg mem: 152.06358024776668, max mem: 172.01171875, count: 56530"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Kaihong.Wang",
            "username": "wangkhc",
            "email": "wangkhc@163.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "7f560910072d570e0dca4d19a9fe02b47f6917e5",
          "message": "fix: Add missing stopword filters to Jieba tokenizer (#2790)\n\n### What\n\nThis PR fixes a bug where the Jieba tokenizer was missing stopword\nfiltering capabilities that are available in other tokenizers. The fix\nadds both custom stopword lists and language-based stopword filtering\nsupport to the Jieba tokenizer. (Fix #2789 )\n\n### Why\n\nThe Jieba tokenizer implementation was inconsistent with other\ntokenizers in the codebase - it lacked the\n`.filter(filters.stopwords_language())` and\n`.filter(filters.stopwords())` calls that are present in all other\ntokenizer variants (ICU, Chinese Lindera, etc.). This meant users\ncouldn't filter out common Chinese stop words like \"的\", \"了\", \"在\" or\nEnglish stop words when using mixed-language content, reducing search\nquality and relevance.\n\nThis inconsistency was discovered when comparing the Jieba tokenizer\nimplementation against other tokenizer variants in\n`tokenizers/src/manager.rs`.\n\n### How\n\n1. **Bug Fix:** Modified `tokenizers/src/manager.rs` in the\n`SearchTokenizer::Jieba` case within `to_tantivy_tokenizer()` method:\n- Added `.filter(filters.stopwords_language())` to support\nlanguage-based stopwords (e.g., English, Spanish, etc.)\n- Added `.filter(filters.stopwords())` to support custom stopword lists\n- This brings Jieba tokenizer in line with all other tokenizer\nimplementations\n\n2. **Code Changes:**\n   ```rust\n   // Before (missing stopword filters)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .build(),\n   ),\n\n   // After (with stopword filters added)\n   SearchTokenizer::Jieba(filters) => Some(\n       TextAnalyzer::builder(tantivy_jieba::JiebaTokenizer {})\n           .filter(filters.remove_long_filter())\n           .filter(filters.lower_caser())\n           .filter(filters.stemmer())\n           .filter(filters.stopwords_language())  // ← Added\n           .filter(filters.stopwords())           // ← Added\n           .build(),\n   ),\n   ```\n\n### Tests\n\nAdded comprehensive test coverage in `tokenizers/src/manager.rs`:\n\n1. **`test_jieba_tokenizer_with_stopwords`**: \n   - Tests custom stopword filtering with Chinese stopwords\n- Verifies stopwords are filtered out while content words are preserved\n\n2. **`test_jieba_tokenizer_with_language_stopwords`**:\n   - Tests language-based stopword filtering with English stopwords\n   - Tests the `stopwords_language: \"English\"` configuration option\n\nBoth tests use natural, conversational sentences instead of artificial\ntest data, making them more representative of real-world usage and\nsuitable for open-source community review.\n\n**All existing tests continue to pass** (12/12), ensuring no regressions\nwere introduced.\n\n### Ticket(s) Closed\n\nFix #2789\n\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-09T12:38:14Z",
          "url": "https://github.com/paradedb/paradedb/commit/7f560910072d570e0dca4d19a9fe02b47f6917e5"
        },
        "date": 1752442354982,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.661374814177453, max cpu: 60.231655, count: 56533"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 173.8046875,
            "unit": "median mem",
            "extra": "avg mem: 171.95992398798046, max mem: 176.99609375, count: 56533"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 16943,
            "unit": "median block_count",
            "extra": "avg block_count: 15337.339200113209, max block_count: 16943.0, count: 56533"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 84.21332672952082, max segment_count: 173.0, count: 56533"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 12.052747863190515, max cpu: 38.476955, count: 56533"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 163.87109375,
            "unit": "median mem",
            "extra": "avg mem: 152.14649670878072, max mem: 171.91796875, count: 56533"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Ming",
            "username": "rebasedming",
            "email": "ming.ying.nyc@gmail.com"
          },
          "committer": {
            "name": "GitHub",
            "username": "web-flow",
            "email": "noreply@github.com"
          },
          "id": "47bbe518381e1429f228328336dad78e99636ad9",
          "message": "chore: Upgrade to `0.16.0` (#2720)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-06-23T23:04:37Z",
          "url": "https://github.com/paradedb/paradedb/commit/47bbe518381e1429f228328336dad78e99636ad9"
        },
        "date": 1752442359744,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 23.121387,
            "unit": "median cpu",
            "extra": "avg cpu: 21.801249827819134, max cpu: 57.657658, count: 57290"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 180.50390625,
            "unit": "median mem",
            "extra": "avg mem: 179.34167564420056, max mem: 185.04296875, count: 57290"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 7747,
            "unit": "median block_count",
            "extra": "avg block_count: 7107.179612497818, max block_count: 7988.0, count: 57290"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 76,
            "unit": "median segment_count",
            "extra": "avg segment_count: 75.89303543375807, max segment_count: 110.0, count: 57290"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.967022,
            "unit": "median cpu",
            "extra": "avg cpu: 15.36213823865593, max cpu: 48.144432, count: 57290"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 164.4921875,
            "unit": "median mem",
            "extra": "avg mem: 155.0147005640164, max mem: 170.80859375, count: 57290"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b96e41e25c3fd2126f54aa5cb66d4deffb482047",
          "message": "perf: Lazily load fast fields dictionaries. (#2842)\n\n## What\n\nLazily load fast field dictionaries from buffers: see\nhttps://github.com/paradedb/tantivy/pull/55\n\n## Why\n\nA customer reported slower-than-expected paging on a string/uuid column.\n85% of the time for that query was being spent in _opening_ a fast\nfields string/bytes column, with a large fraction of that time spent\nfully consuming the column's `Dictionary`.\n\n## Tests\n\nSee the attached benchmark results:\n* [`docs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014379545)\n    * No regressions.\n    * 2x faster for `top_n-score`\n    * 1.4x faster for `highlighting` \n* [`logs`\ndataset](https://github.com/paradedb/paradedb/pull/2842#pullrequestreview-3014350211)\n    * No regressions.\n    * 4.5x faster for `paging-string-max`\n    * 1.7x faster for `paging-string-median`\n    * 1.6x faster for `paging-string-min`\n\nThe `paging-string-*` benchmarks were added in #2834 to highlight this\nparticular issue.",
          "timestamp": "2025-07-14T08:28:09-07:00",
          "tree_id": "d144335dcb7c7f138a112c01e5b9ff5e0168fe37",
          "url": "https://github.com/paradedb/paradedb/commit/b96e41e25c3fd2126f54aa5cb66d4deffb482047"
        },
        "date": 1752509171375,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.640776,
            "unit": "median cpu",
            "extra": "avg cpu: 20.53277628126518, max cpu: 47.244095, count: 57172"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 177.72265625,
            "unit": "median mem",
            "extra": "avg mem: 175.90110147340482, max mem: 181.08984375, count: 57172"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 19214,
            "unit": "median block_count",
            "extra": "avg block_count: 17846.88237249003, max block_count: 23111.0, count: 57172"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 84.50839571818372, max segment_count: 159.0, count: 57172"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.329447,
            "unit": "median cpu",
            "extra": "avg cpu: 11.27677413196564, max cpu: 28.543112, count: 57172"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 160.94921875,
            "unit": "median mem",
            "extra": "avg mem: 150.42495916926117, max mem: 171.2109375, count: 57172"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8",
          "message": "fix: orphaned delete entries get GCed too early (#2845)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nWhen running a new stressgres suite (coming in a future PR), I hit a\nmysterious bug where it looked like vacuum could cause corruption of\nsome pages.\n\nTurns out it's caused by scenarios where:\n\n1. A `DeleteEntry` already exists for a `SegmentMetaEntry`, and a new\none is created\n2. A new, \"fake\" `SegmentMetaEntry` gets created for the purpose of\nstoring the old `DeleteEntry`, so its blocks can get garbage collected\n3. Because this \"fake\" entry is invisible to all readers besides the\ngarbage collector, it doesn't get pinned and can get garbage collected\ntoo early (i.e. while a reader is still pinning the old `DeleteEntry`)\n\nThe solution is to copy all of the contents of the old\n`SegmentMetaEntry` to the fake one, so that the \"pintest blockno\" of the\nfake entry is that same as that of the entry with the new `DeleteEntry`.\nThat way, the `DeleteEntry` doesn't get garbage collected until the pin\nis released.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-14T15:46:29-04:00",
          "tree_id": "3dc55f49de121cf04534f48e3584a2a3ae333407",
          "url": "https://github.com/paradedb/paradedb/commit/ee6395b4b4d4ca6f44e2c89b74afd2308d4415a8"
        },
        "date": 1752524578321,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.707788917693303, max cpu: 46.73807, count: 56467"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 176.97265625,
            "unit": "median mem",
            "extra": "avg mem: 175.25031683328316, max mem: 180.6640625, count: 56467"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18570,
            "unit": "median block_count",
            "extra": "avg block_count: 17403.396497069083, max block_count: 22700.0, count: 56467"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 83.90233233570049, max segment_count: 157.0, count: 56467"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 12.130283500574265, max cpu: 37.10145, count: 56467"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 164.6640625,
            "unit": "median mem",
            "extra": "avg mem: 154.4701904845972, max mem: 173.96875, count: 56467"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "eb3bc1d570c85d60804f6aab2f2d2cf998bd7597",
          "message": "ci: benchmark workflow cleanups (#2851)\n\nThis is an attempt to cleanup the benchmark workflows a little bit.  \n\n- Centralizes checking out the latest benchmark code/suites/actions into\na composite action.\n- figures out the PR #/title being tested\n- Changes the slack notification messages to be reactive to the\nenvironment to hopefully avoid conflicts with -enterprise",
          "timestamp": "2025-07-15T12:15:54-04:00",
          "tree_id": "223c726790d68868f538b7f5aab9cf9904494f44",
          "url": "https://github.com/paradedb/paradedb/commit/eb3bc1d570c85d60804f6aab2f2d2cf998bd7597"
        },
        "date": 1752598341672,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.48614730239338, max cpu: 47.38401, count: 57164"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 172.23828125,
            "unit": "median mem",
            "extra": "avg mem: 170.63902523058655, max mem: 176.1953125, count: 57164"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 19360,
            "unit": "median block_count",
            "extra": "avg block_count: 17934.165961094393, max block_count: 23063.0, count: 57164"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 84.53789098033728, max segment_count: 159.0, count: 57164"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.375,
            "unit": "median cpu",
            "extra": "avg cpu: 11.45333314504253, max cpu: 32.74854, count: 57164"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 164.13671875,
            "unit": "median mem",
            "extra": "avg mem: 153.75233415589358, max mem: 173.49609375, count: 57164"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c7bdeebed6249725c87b87c276d2e09dfaffd152",
          "message": "ci: publish stressgres benchmark graphs (#2852)\n\nThis will publish every stressgres benchmark graph to the new\n`paradedb/benchmark-data` repo.\n\nIt also ensures that when one of our \"[benchmark]\" labels are applied,\nthat it does *not* pull the benchmarks from main, but instead from the\nPR branch itself.",
          "timestamp": "2025-07-15T18:13:26-04:00",
          "tree_id": "f18bf519521a03613c5b12c861092f24314476ad",
          "url": "https://github.com/paradedb/paradedb/commit/c7bdeebed6249725c87b87c276d2e09dfaffd152"
        },
        "date": 1752619795165,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.640776,
            "unit": "median cpu",
            "extra": "avg cpu: 20.626298320818297, max cpu: 67.267265, count: 56424"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 169.75,
            "unit": "median mem",
            "extra": "avg mem: 168.88672027306643, max mem: 176.5859375, count: 56424"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 19612,
            "unit": "median block_count",
            "extra": "avg block_count: 17942.553328370905, max block_count: 22538.0, count: 56424"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 83.916950233943, max segment_count: 180.0, count: 56424"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 12.230637444066675, max cpu: 37.029896, count: 56424"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 164.42578125,
            "unit": "median mem",
            "extra": "avg mem: 154.04628335792393, max mem: 173.91796875, count: 56424"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "name": "Philippe Noël",
            "username": "philippemnoel",
            "email": "21990816+philippemnoel@users.noreply.github.com"
          },
          "committer": {
            "name": "Stu Hood",
            "username": "stuhood",
            "email": "stuhood@gmail.com"
          },
          "id": "8c164d666c4af2049b439690afa7823ab5be2c88",
          "message": "ci: Post \"One-branch Release Model\" Improvements (#2792)\n\n# Ticket(s) Closed\n\n- Closes #N/A\n\n## What\n- Don't make Docker Scout post on PRs that don't modify the Dockerfile,\nnot necessary.\n- Make sure the SchemaBot workflow errors when community contributors\nmake a PR, so we can catch needed changes to the SQL upgrade script.\n- Rename it to SchemaBot\n\n## Why\nQoL\n\n## How\n^\n\n## Tests\nCI",
          "timestamp": "2025-07-08T15:49:16Z",
          "url": "https://github.com/paradedb/paradedb/commit/8c164d666c4af2049b439690afa7823ab5be2c88"
        },
        "date": 1752669772361,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.622696,
            "unit": "median cpu",
            "extra": "avg cpu: 20.221248004004604, max cpu: 42.772278, count: 57536"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 176.4609375,
            "unit": "median mem",
            "extra": "avg mem: 174.66007056994752, max mem: 180.25390625, count: 57536"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17079,
            "unit": "median block_count",
            "extra": "avg block_count: 15485.6257647386, max block_count: 17079.0, count: 57536"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 84.74428184093438, max segment_count: 175.0, count: 57536"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.338522,
            "unit": "median cpu",
            "extra": "avg cpu: 11.416365678004572, max cpu: 32.621357, count: 57536"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 163.359375,
            "unit": "median mem",
            "extra": "avg mem: 154.2193589258247, max mem: 174.5, count: 57536"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f7c13c858851200e8ab5395779f821ca484cda0d",
          "message": "feat: Add a custom scan for aggregates (#2763)\n\n## What\n\nAdd a new `CustomScan` (installed with `create_upper_paths_hook`) which\nreplaces simple aggregate plans on `bm25`-indexed tables with aggregate\nimplementations using [Tantivy\naggregates](https://docs.rs/tantivy/latest/tantivy/aggregation/index.html).\n\n## Why\n\nTantivy aggregates can be significantly faster (in benchmarks, we've\nmeasured between 4-10x for bucketing/faceting queries). They have been\nexposed via `paradedb.aggregate` for a while now, but that function\nrequires learning a new API, and does not feel \"Postgres native\".\n\n## How\n\n* Adjust `CustomPathBuilder` and `CustomPathMethods` to allow multiple\n`CustomScan` implementations.\n* Remove the `CustomScan::PrivateData: Default` bound, as it requires\nthe `PrivateData` to start in an illegal state.\n* Move `qual_inspect` to a reusable location.\n* Split out a module to be used by both the `aggregate` API method and\nby the aggregate custom scan.\n* Implement the \"ParadeDB Aggregate Scan\" `CustomScan` type\n    * Add the new `CustomScan` type, hidden behind a GUC\n    * Filter Paths to those which represent `count(*)` queries\n    * Extract `quals` during `CustomPath` generation\n* Replace `Aggrefs` in target lists with `FuncExprs` while producing a\n`CustomPlan`\n* Execute a `count(*)` aggregate by pushing down a `value_count`\naggregate on the `ctid`\n\n## Tests\n\nAdded tests to validate that:\n* the GUC properly controls usage\n* the scan does not trigger for unsupported aggregates, tables without a\n`bm25` index, or group-bys (for now)",
          "timestamp": "2025-07-16T09:12:24-07:00",
          "tree_id": "69b043a9363fcf6ce2de468c97d14e41f593f017",
          "url": "https://github.com/paradedb/paradedb/commit/f7c13c858851200e8ab5395779f821ca484cda0d"
        },
        "date": 1752684638185,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.79405,
            "unit": "median cpu",
            "extra": "avg cpu: 20.97632553576398, max cpu: 61.356934, count: 57963"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 169.86328125,
            "unit": "median mem",
            "extra": "avg mem: 168.0544283772622, max mem: 173.28515625, count: 57963"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18749,
            "unit": "median block_count",
            "extra": "avg block_count: 17595.505581146594, max block_count: 23003.0, count: 57963"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 82,
            "unit": "median segment_count",
            "extra": "avg segment_count: 83.95509204147473, max segment_count: 163.0, count: 57963"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 12.351628186312494, max cpu: 41.941746, count: 57963"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.3125,
            "unit": "median mem",
            "extra": "avg mem: 152.38926610510154, max mem: 173.359375, count: 57963"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c779dbb72178c1aa0e14ad94c72eeb9937251acd",
          "message": "feat: a background merger for large layers (#2743)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nLaunches Postgres [dynamic background\nworkers](https://docs.rs/pgrx/latest/pgrx/bgworkers/struct.DynamicBackgroundWorker.html)\nto merge large layers in the background.\n\nThis is configured by a new index setting, `background_layer_sizes`. Any\nlayers specified here will be merged in the background.\n\n## Why\n\nWrite throughput, and create more balanced indexes with fewer segments.\n\n## How\n\n1. The default (foreground) `layer_sizes` is now `10kb`, `100kb`, `1mb`\n2. The default `background_layer_sizes` is `10mb`, `100mb`, `1gb`,\n`10gb`, `100gb`, `1tb`\n3. After `aminsert` merges in the foreground, it checks to see if there\nare enough candidates for a background merge. If so, it spawns a dynamic\nbackground worker process to do the merge.\n4. `amvacuumcleanup` can also spawn a background worker, allowing the\nuser to rebalance their index with a `VACUUM`.\n\nAdditionally, I've tweaked merge policy to make it smarter:\n\n1. Terminate a merge early if we predict that, after the merge, we will\nend up with fewer than `target_segment_count` segments.\n2. Set the max layer size as byte size of index divided by\n`target_segment_count`. Discard all layer sizes above that, which avoids\nthe problem of merging too many segments into one giant segment.\n\nThis has allowed us to delete some code:\n\n1. `force_merge` is deprecated\n2. No longer need to store the segments created by an index build and\navoid merging them, since we just do expensive merges in the background\n\n## Tests\n\nAdded a new stressgres `.toml` file that configures the layer\nsizes/threshold, which triggers background merging.\n\n---------\n\nSigned-off-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>\nCo-authored-by: Philippe Noël <21990816+philippemnoel@users.noreply.github.com>\nCo-authored-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-16T12:44:23-04:00",
          "tree_id": "153c406e456a638a6b68ca9123210bbd498d66a5",
          "url": "https://github.com/paradedb/paradedb/commit/c779dbb72178c1aa0e14ad94c72eeb9937251acd"
        },
        "date": 1752686565252,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.622696,
            "unit": "median cpu",
            "extra": "avg cpu: 20.5796680185914, max cpu: 47.33728, count: 57220"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 167.76171875,
            "unit": "median mem",
            "extra": "avg mem: 165.94558263336683, max mem: 169.453125, count: 57220"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17964,
            "unit": "median block_count",
            "extra": "avg block_count: 16642.27936036351, max block_count: 22042.0, count: 57220"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.0743446347431, max segment_count: 114.0, count: 57220"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.320388,
            "unit": "median cpu",
            "extra": "avg cpu: 11.293786515610682, max cpu: 33.03835, count: 57220"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.22265625,
            "unit": "median mem",
            "extra": "avg mem: 151.48477538721164, max mem: 172.06640625, count: 57220"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "d197630155f55d13eea0a81841951645a367a5f7",
          "message": "test: Make GUCs a tested property, and add proptests for the aggregate custom scan (#2788)\n\n## What\n\nMove the GUCs that are in use into a test property, which reduces\nruntime while allowing for testing arbitrary combinations of GUCs.\n\nAdditionally, added proptests for the aggregate custom scan by:\n* Adding its GUC to the generated set\n* Expanding the `generated_single_relation` test to use `COUNT(*)` in\nits target list.\n\n## Why\n\nTo add additional test coverage for #2763.",
          "timestamp": "2025-07-16T10:57:16-07:00",
          "tree_id": "6a92b62b640f7a0b2dc7e6507966b75f3bd00594",
          "url": "https://github.com/paradedb/paradedb/commit/d197630155f55d13eea0a81841951645a367a5f7"
        },
        "date": 1752690841092,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.530923451615596, max cpu: 57.54246, count: 57786"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 170.18359375,
            "unit": "median mem",
            "extra": "avg mem: 169.6581188972026, max mem: 178.15625, count: 57786"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18423,
            "unit": "median block_count",
            "extra": "avg block_count: 16914.80130135327, max block_count: 22032.0, count: 57786"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.24062921814973, max segment_count: 118.0, count: 57786"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.347614,
            "unit": "median cpu",
            "extra": "avg cpu: 11.312314796563273, max cpu: 33.005894, count: 57786"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 163.7890625,
            "unit": "median mem",
            "extra": "avg mem: 153.97929057481483, max mem: 173.984375, count: 57786"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "58f6742b2cde46fe2c15077e59a0d5b091ba6000",
          "message": "chore: Upgrade to `0.17.0` (#2870)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-16T19:49:53-04:00",
          "tree_id": "b77118d365b31a4f3478b7c0571cf1f7e9f8a5b2",
          "url": "https://github.com/paradedb/paradedb/commit/58f6742b2cde46fe2c15077e59a0d5b091ba6000"
        },
        "date": 1752712096174,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.513549248993094, max cpu: 46.28737, count: 57203"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 175.78125,
            "unit": "median mem",
            "extra": "avg mem: 174.00660702072005, max mem: 178.7578125, count: 57203"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18116,
            "unit": "median block_count",
            "extra": "avg block_count: 16773.306207716378, max block_count: 22230.0, count: 57203"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.76789678862997, max segment_count: 118.0, count: 57203"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.356726,
            "unit": "median cpu",
            "extra": "avg cpu: 11.390439207145732, max cpu: 33.168808, count: 57203"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 168.7421875,
            "unit": "median mem",
            "extra": "avg mem: 157.04750126468454, max mem: 177.94921875, count: 57203"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "86bc2b092d2857a997cd05af4b554ac96ba225fd",
          "message": "fix: Fix `rescan` for top-n (#2868)\n\n## What\n\nComments in both `Normal` and `TopN` scans claimed that their search\nresults would be reset by `PdbScanState`, but this was incorrect: they\nwere local variables in the struct, and needed to be reset locally.\n\n## Why\n\nFixes issue detected by the prop tests and repro'd by @eeeebbbbrrrr in\n#2751.\n\n## Tests\n\nNew regression test from #2751: thanks @eeeebbbbrrrr!\n\n---------\n\nCo-authored-by: Eric B. Ridge <eebbrr@paradedb.com>",
          "timestamp": "2025-07-17T08:59:32-07:00",
          "tree_id": "ccc9162bb96008badcb3046612d16394604ed6f7",
          "url": "https://github.com/paradedb/paradedb/commit/86bc2b092d2857a997cd05af4b554ac96ba225fd"
        },
        "date": 1752770188966,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.768328,
            "unit": "median cpu",
            "extra": "avg cpu: 20.97580878297552, max cpu: 66.60059, count: 56030"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 167.58203125,
            "unit": "median mem",
            "extra": "avg mem: 165.88912120181152, max mem: 171.2734375, count: 56030"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17658,
            "unit": "median block_count",
            "extra": "avg block_count: 16538.45862930573, max block_count: 22216.0, count: 56030"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.33733714081742, max segment_count: 115.0, count: 56030"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.766731,
            "unit": "median cpu",
            "extra": "avg cpu: 11.957664603406469, max cpu: 42.814667, count: 56030"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.15625,
            "unit": "median mem",
            "extra": "avg mem: 151.7431514785606, max mem: 169.23828125, count: 56030"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5772be0d3dea751c3609729efcc66cc69d9d30ee",
          "message": "chore: Remove debug output in aggregate scan (#2876)\n\n## What\n\nRemove a stray `println`.\n\n## Why\n\nIt's not doing anyone any good.",
          "timestamp": "2025-07-17T09:46:08-07:00",
          "tree_id": "06a002186c2a701283d73854f64c4225a08aa1a8",
          "url": "https://github.com/paradedb/paradedb/commit/5772be0d3dea751c3609729efcc66cc69d9d30ee"
        },
        "date": 1752772986002,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.721910584507285, max cpu: 47.244095, count: 57758"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 179.546875,
            "unit": "median mem",
            "extra": "avg mem: 177.59026766313758, max mem: 182.10546875, count: 57758"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18304,
            "unit": "median block_count",
            "extra": "avg block_count: 16760.28768309152, max block_count: 21421.0, count: 57758"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.62498701478583, max segment_count: 119.0, count: 57758"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.872832,
            "unit": "median cpu",
            "extra": "avg cpu: 12.346812127906308, max cpu: 37.83251, count: 57758"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 165.8671875,
            "unit": "median mem",
            "extra": "avg mem: 154.91160471006182, max mem: 175.22265625, count: 57758"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "16307a200509cd31b42c1338f3c5b6e097a77fbf",
          "message": "fix: issue #2844 - Use `paradedb.with_index()` when necessary (#2879)\n\n# Ticket(s) Closed\n\n- Closes #2844\n\n## What\n\nWhen the right-hand-side of the `@@@` operator is a complex expression\nthat can't be evaluated to a `T_Const` during planning, we need to\nrewrite it to be a call to our `paradedb.with_index(<indexrelid>,\n<rhs>)` so that it can be properly used in Filter contexts during\nexecution.\n\nThis seems to come up, at least, during RLS rule evaluation if those\nrules use our `@@@` operator.\n\n## Why\n\nSo long as the right-hand-side of `@@@` is a `SearchQueryInput`, we need\nto be able to execute it when Postgres wants us to, whether that's\nduring a scan or, as in this case, a filter being run as part of RLS\nevaluation.\n\n## How\n\nWrapping Postgres expression nodes!\n\n## Tests\n\nI used the re-create the OP from #2844 put together as a regression\ntest. I seem to be lacking the creative energy today to reduce the test\ndown to its simplest form that doesn't require a complicated RLS\nconfiguration.",
          "timestamp": "2025-07-18T13:21:25-04:00",
          "tree_id": "f2e8c7ca2ce45eefd03b85ff45d56f0481ebae1a",
          "url": "https://github.com/paradedb/paradedb/commit/16307a200509cd31b42c1338f3c5b6e097a77fbf"
        },
        "date": 1752861488451,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.695229,
            "unit": "median cpu",
            "extra": "avg cpu: 20.731253800335843, max cpu: 65.912766, count: 57764"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 170.5859375,
            "unit": "median mem",
            "extra": "avg mem: 168.71374478751903, max mem: 172.24609375, count: 57764"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18016,
            "unit": "median block_count",
            "extra": "avg block_count: 16652.91371788657, max block_count: 21821.0, count: 57764"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.74617408766706, max segment_count: 115.0, count: 57764"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 11.631664,
            "unit": "median cpu",
            "extra": "avg cpu: 11.849846631596078, max cpu: 34.894993, count: 57764"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 159.54296875,
            "unit": "median mem",
            "extra": "avg mem: 149.21988101639863, max mem: 167.453125, count: 57764"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "8b45b24d47a7cac36696bae2d8505c750a7ee801",
          "message": "test: added more join regression tests + improved when to use Join quals (#2808)\n\n# Ticket(s) Closed\n\n- Closes #2807\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-18T10:40:03-07:00",
          "tree_id": "fb63bd81696cd27d03b6d5724551c3ff8fd59613",
          "url": "https://github.com/paradedb/paradedb/commit/8b45b24d47a7cac36696bae2d8505c750a7ee801"
        },
        "date": 1752862609299,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.640776,
            "unit": "median cpu",
            "extra": "avg cpu: 20.705744208512268, max cpu: 57.715435, count: 56580"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 174.62890625,
            "unit": "median mem",
            "extra": "avg mem: 173.04714901743108, max mem: 177.89453125, count: 56580"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17987,
            "unit": "median block_count",
            "extra": "avg block_count: 16513.99434429127, max block_count: 21331.0, count: 56580"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.02820784729587, max segment_count: 122.0, count: 56580"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 12.145959377241704, max cpu: 33.667336, count: 56580"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 167.015625,
            "unit": "median mem",
            "extra": "avg mem: 156.39145547510162, max mem: 175.33984375, count: 56580"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "77c6cd1aeb5f5c03bba892a38cd792a113cfbd39",
          "message": "chore: move code around (#2889)\n\n## What\n\nThis relocates the `src/boostrap/create_bm25.rs` source to\n`src/api/admin.rs`, which I believe is a more sensibile location and\nname.\n\nAdditionally it moves the `#[pg_extern] schema()` function from\n`src/api/builder_fns.rs` to this new(ly renamed) `admin.rs`, as it's an\nadministrative function, not a query builder function.\n\n## Why\n\nTrying to better organize things\n\n## How\n\n## Tests\n\nNo functional changes here.",
          "timestamp": "2025-07-22T12:39:21-04:00",
          "tree_id": "1ab036752fc8adf7ad2757741d4e274ab0e73c64",
          "url": "https://github.com/paradedb/paradedb/commit/77c6cd1aeb5f5c03bba892a38cd792a113cfbd39"
        },
        "date": 1753204568735,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.640776,
            "unit": "median cpu",
            "extra": "avg cpu: 20.330572039900332, max cpu: 42.772278, count: 57628"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 178.96484375,
            "unit": "median mem",
            "extra": "avg mem: 177.09268491173995, max mem: 182.21484375, count: 57628"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18177,
            "unit": "median block_count",
            "extra": "avg block_count: 16885.226521829667, max block_count: 22254.0, count: 57628"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.484920524744915, max segment_count: 116.0, count: 57628"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 11.258796,
            "unit": "median cpu",
            "extra": "avg cpu: 11.851710835118219, max cpu: 33.20158, count: 57628"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 166.94921875,
            "unit": "median mem",
            "extra": "avg mem: 156.93496366241237, max mem: 175.86328125, count: 57628"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "1e26a38533fa872a935955128b2ecd08b3febf66",
          "message": "perf: Skip computing scores if not requested for top-n field queries (#2892)\n\n## What\n\n`SearchIndexReader::{top_by_field_in_segments,\ntop_by_string_field_in_segments}` were not using\n`SearchIndexReader::need_scores`, and were instead universally enabling\nscores.\n\nUse the `enable_scoring` helper and `self.need_scores` to skip computing\nscores where possible.\n\n## Why\n\nComputing scores requires field norms, which ([if they have not been\ndisabled](https://docs.paradedb.com/documentation/indexing/record)) can\ntake time to load and use.",
          "timestamp": "2025-07-22T15:58:56-07:00",
          "tree_id": "2a41c9e06be04ef92fed2b265dc3f90340fb0e37",
          "url": "https://github.com/paradedb/paradedb/commit/1e26a38533fa872a935955128b2ecd08b3febf66"
        },
        "date": 1753227347192,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.56424557360741, max cpu: 55.598457, count: 57209"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 171.7421875,
            "unit": "median mem",
            "extra": "avg mem: 170.5463334003391, max mem: 179.29296875, count: 57209"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18133,
            "unit": "median block_count",
            "extra": "avg block_count: 16843.69961020119, max block_count: 21977.0, count: 57209"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.14649792864759, max segment_count: 116.0, count: 57209"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.329447,
            "unit": "median cpu",
            "extra": "avg cpu: 11.18349534168653, max cpu: 37.907207, count: 57209"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 159.7109375,
            "unit": "median mem",
            "extra": "avg mem: 149.18621523711303, max mem: 167.15625, count: 57209"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753282982138,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.805092,
            "unit": "median cpu",
            "extra": "avg cpu: 20.970735859310633, max cpu: 49.760765, count: 57904"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 176.421875,
            "unit": "median mem",
            "extra": "avg mem: 174.99929807040533, max mem: 180.5, count: 57904"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18119,
            "unit": "median block_count",
            "extra": "avg block_count: 16778.715943630836, max block_count: 21996.0, count: 57904"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.095641061066594, max segment_count: 114.0, count: 57904"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 11.294118,
            "unit": "median cpu",
            "extra": "avg cpu: 11.905509724933237, max cpu: 37.982197, count: 57904"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 160.2578125,
            "unit": "median mem",
            "extra": "avg mem: 150.70848516510085, max mem: 167.22265625, count: 57904"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753289441705,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.338844378798772, max cpu: 43.373497, count: 57616"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 173.796875,
            "unit": "median mem",
            "extra": "avg mem: 172.53398585299655, max mem: 178.9296875, count: 57616"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18287,
            "unit": "median block_count",
            "extra": "avg block_count: 16935.253176201055, max block_count: 22279.0, count: 57616"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.73588933629547, max segment_count: 122.0, count: 57616"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.384164,
            "unit": "median cpu",
            "extra": "avg cpu: 11.5084081219152, max cpu: 32.65306, count: 57616"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 164.94921875,
            "unit": "median mem",
            "extra": "avg mem: 154.30285966571785, max mem: 174.18359375, count: 57616"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753291896488,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.72529959591255, max cpu: 46.466602, count: 57767"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 170.51953125,
            "unit": "median mem",
            "extra": "avg mem: 169.05558604501704, max mem: 174.6875, count: 57767"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17680,
            "unit": "median block_count",
            "extra": "avg block_count: 16526.22975054962, max block_count: 22100.0, count: 57767"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.44530614364603, max segment_count: 114.0, count: 57767"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.365853,
            "unit": "median cpu",
            "extra": "avg cpu: 11.552221186337043, max cpu: 33.03835, count: 57767"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 164.2265625,
            "unit": "median mem",
            "extra": "avg mem: 154.55939897833105, max mem: 174.98046875, count: 57767"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753303482302,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.536639050636737, max cpu: 60.523766, count: 57731"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 174.84765625,
            "unit": "median mem",
            "extra": "avg mem: 173.7470327088133, max mem: 180.7578125, count: 57731"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17863,
            "unit": "median block_count",
            "extra": "avg block_count: 16598.737212242988, max block_count: 21930.0, count: 57731"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.672948675754796, max segment_count: 118.0, count: 57731"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.338522,
            "unit": "median cpu",
            "extra": "avg cpu: 11.389914524955604, max cpu: 32.589718, count: 57731"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 163.57421875,
            "unit": "median mem",
            "extra": "avg mem: 153.93862868573643, max mem: 170.2109375, count: 57731"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753311179276,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.695229,
            "unit": "median cpu",
            "extra": "avg cpu: 20.782022344951965, max cpu: 62.46246, count: 56511"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 175.3359375,
            "unit": "median mem",
            "extra": "avg mem: 173.45462332554723, max mem: 178.18359375, count: 56511"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17877,
            "unit": "median block_count",
            "extra": "avg block_count: 16549.415653589567, max block_count: 21555.0, count: 56511"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.162552423421985, max segment_count: 117.0, count: 56511"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 11.984100780995147, max cpu: 38.63179, count: 56511"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 167.43359375,
            "unit": "median mem",
            "extra": "avg mem: 157.2935334907142, max mem: 176.13671875, count: 56511"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753374642488,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.767774916869097, max cpu: 42.814667, count: 57746"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 168.83984375,
            "unit": "median mem",
            "extra": "avg mem: 166.93987976439928, max mem: 170.26171875, count: 57746"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17869,
            "unit": "median block_count",
            "extra": "avg block_count: 16539.010061302946, max block_count: 21673.0, count: 57746"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.585373878710215, max segment_count: 114.0, count: 57746"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 12.020512492564812, max cpu: 32.8125, count: 57746"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.4453125,
            "unit": "median mem",
            "extra": "avg mem: 152.8450166597037, max mem: 174.3828125, count: 57746"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753388817652,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.760041057910367, max cpu: 60.523766, count: 56444"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 176.36328125,
            "unit": "median mem",
            "extra": "avg mem: 174.77996346489442, max mem: 179.7890625, count: 56444"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17554,
            "unit": "median block_count",
            "extra": "avg block_count: 16310.396463751684, max block_count: 21958.0, count: 56444"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 39,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.45287364467437, max segment_count: 115.0, count: 56444"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.832853,
            "unit": "median cpu",
            "extra": "avg cpu: 12.023360088416986, max cpu: 33.23442, count: 56444"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 158.03125,
            "unit": "median mem",
            "extra": "avg mem: 148.4590905366381, max mem: 165.90625, count: 56444"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753474248760,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.694950399624545, max cpu: 54.7651, count: 56448"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 179.078125,
            "unit": "median mem",
            "extra": "avg mem: 177.0861187370456, max mem: 182.0234375, count: 56448"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17727,
            "unit": "median block_count",
            "extra": "avg block_count: 16369.363360969388, max block_count: 21470.0, count: 56448"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.63658588435374, max segment_count: 113.0, count: 56448"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 12.231570842573081, max cpu: 37.2093, count: 56448"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.9296875,
            "unit": "median mem",
            "extra": "avg mem: 149.91009473043775, max mem: 172.11328125, count: 56448"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753475998594,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.640776,
            "unit": "median cpu",
            "extra": "avg cpu: 20.32369543606309, max cpu: 47.058823, count: 57784"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 178.66796875,
            "unit": "median mem",
            "extra": "avg mem: 177.70633719163177, max mem: 178.66796875, count: 57784"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 19111,
            "unit": "median block_count",
            "extra": "avg block_count: 17507.556538142046, max block_count: 22314.0, count: 57784"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 43.0749169320227, max segment_count: 120.0, count: 57784"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.338522,
            "unit": "median cpu",
            "extra": "avg cpu: 11.288288502709259, max cpu: 33.136093, count: 57784"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.7265625,
            "unit": "median mem",
            "extra": "avg mem: 153.15410461806036, max mem: 172.22265625, count: 57784"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753507159922,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.71482195445279, max cpu: 49.80048, count: 56469"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 172.1015625,
            "unit": "median mem",
            "extra": "avg mem: 170.70593053544866, max mem: 178.71875, count: 56469"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18054,
            "unit": "median block_count",
            "extra": "avg block_count: 16597.529104464396, max block_count: 21685.0, count: 56469"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 39,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.35894030352937, max segment_count: 112.0, count: 56469"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.806328,
            "unit": "median cpu",
            "extra": "avg cpu: 11.887717894913273, max cpu: 37.83251, count: 56469"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.44140625,
            "unit": "median mem",
            "extra": "avg mem: 152.53406805614586, max mem: 169.3984375, count: 56469"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753711543889,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.48976720746386, max cpu: 46.043167, count: 57168"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 170.0234375,
            "unit": "median mem",
            "extra": "avg mem: 168.64576363743703, max mem: 176.5234375, count: 57168"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18373,
            "unit": "median block_count",
            "extra": "avg block_count: 16963.257311782814, max block_count: 22283.0, count: 57168"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.669238035264485, max segment_count: 115.0, count: 57168"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.430255,
            "unit": "median cpu",
            "extra": "avg cpu: 11.56422270387879, max cpu: 38.057484, count: 57168"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.33984375,
            "unit": "median mem",
            "extra": "avg mem: 154.7834810886335, max mem: 175.1484375, count: 57168"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753729123320,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.677044,
            "unit": "median cpu",
            "extra": "avg cpu: 20.40075293558161, max cpu: 44.829887, count: 57484"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 175.80859375,
            "unit": "median mem",
            "extra": "avg mem: 174.78175659476986, max mem: 181.625, count: 57484"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18462,
            "unit": "median block_count",
            "extra": "avg block_count: 17026.227263238467, max block_count: 22159.0, count: 57484"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.7613422865493, max segment_count: 118.0, count: 57484"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.458128,
            "unit": "median cpu",
            "extra": "avg cpu: 11.587090228217372, max cpu: 37.869823, count: 57484"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 165.44140625,
            "unit": "median mem",
            "extra": "avg mem: 156.87906668866555, max mem: 175.9296875, count: 57484"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753806508099,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.60465,
            "unit": "median cpu",
            "extra": "avg cpu: 20.227663893067895, max cpu: 46.242775, count: 57616"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 176.08984375,
            "unit": "median mem",
            "extra": "avg mem: 174.8507052619932, max mem: 180.73046875, count: 57616"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18314,
            "unit": "median block_count",
            "extra": "avg block_count: 16920.26086503749, max block_count: 22194.0, count: 57616"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.91535337406276, max segment_count: 116.0, count: 57616"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.421001,
            "unit": "median cpu",
            "extra": "avg cpu: 11.640277203158458, max cpu: 37.907207, count: 57616"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.34375,
            "unit": "median mem",
            "extra": "avg mem: 152.19236301548182, max mem: 172.3203125, count: 57616"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753813742732,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.355936408065315, max cpu: 47.38401, count: 57601"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 175.2421875,
            "unit": "median mem",
            "extra": "avg mem: 173.87952947594226, max mem: 179.83984375, count: 57601"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18316,
            "unit": "median block_count",
            "extra": "avg block_count: 16866.414281002068, max block_count: 22463.0, count: 57601"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.20216662905158, max segment_count: 114.0, count: 57601"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 11.356467,
            "unit": "median cpu",
            "extra": "avg cpu: 11.90842514194138, max cpu: 33.07087, count: 57601"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 166.76953125,
            "unit": "median mem",
            "extra": "avg mem: 155.3598136317078, max mem: 175.94921875, count: 57601"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753831883053,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.658894,
            "unit": "median cpu",
            "extra": "avg cpu: 20.21335693389025, max cpu: 42.687748, count: 57641"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 170.32421875,
            "unit": "median mem",
            "extra": "avg mem: 168.51117761771135, max mem: 172.0234375, count: 57641"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18211,
            "unit": "median block_count",
            "extra": "avg block_count: 16808.827570652833, max block_count: 21959.0, count: 57641"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.21481237313718, max segment_count: 115.0, count: 57641"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.458128,
            "unit": "median cpu",
            "extra": "avg cpu: 11.691006037579871, max cpu: 33.20158, count: 57641"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.21875,
            "unit": "median mem",
            "extra": "avg mem: 152.33228172275378, max mem: 169.30859375, count: 57641"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753901060206,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.695229,
            "unit": "median cpu",
            "extra": "avg cpu: 20.79097770082099, max cpu: 49.602543, count: 56519"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 171.2265625,
            "unit": "median mem",
            "extra": "avg mem: 169.32973252081158, max mem: 173.14453125, count: 56519"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18290,
            "unit": "median block_count",
            "extra": "avg block_count: 16810.57086997293, max block_count: 21912.0, count: 56519"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.538951503034376, max segment_count: 120.0, count: 56519"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.458128,
            "unit": "median cpu",
            "extra": "avg cpu: 11.709821715796098, max cpu: 37.065636, count: 56519"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 160.3203125,
            "unit": "median mem",
            "extra": "avg mem: 150.10730158221128, max mem: 167.7421875, count: 56519"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753911254262,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.786694,
            "unit": "median cpu",
            "extra": "avg cpu: 20.9675587235636, max cpu: 47.38401, count: 57979"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 169.32421875,
            "unit": "median mem",
            "extra": "avg mem: 167.46256261696044, max mem: 171.05078125, count: 57979"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18355,
            "unit": "median block_count",
            "extra": "avg block_count: 16884.636972007105, max block_count: 22042.0, count: 57979"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.83388813190983, max segment_count: 125.0, count: 57979"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.793103,
            "unit": "median cpu",
            "extra": "avg cpu: 12.00423052979993, max cpu: 41.418983, count: 57979"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.859375,
            "unit": "median mem",
            "extra": "avg mem: 152.56604930502854, max mem: 168.90625, count: 57979"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753986792037,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.75,
            "unit": "median cpu",
            "extra": "avg cpu: 20.267469518774675, max cpu: 43.11377, count: 57716"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 168.703125,
            "unit": "median mem",
            "extra": "avg mem: 167.53662884317174, max mem: 174.31640625, count: 57716"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18450,
            "unit": "median block_count",
            "extra": "avg block_count: 17015.456233973247, max block_count: 22139.0, count: 57716"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 43.00951209370019, max segment_count: 118.0, count: 57716"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.542743,
            "unit": "median cpu",
            "extra": "avg cpu: 11.832730933659535, max cpu: 32.589718, count: 57716"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 160.24609375,
            "unit": "median mem",
            "extra": "avg mem: 151.3106940124922, max mem: 171.8984375, count: 57716"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753993980982,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.75,
            "unit": "median cpu",
            "extra": "avg cpu: 20.77203675770729, max cpu: 47.290638, count: 57831"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 171.609375,
            "unit": "median mem",
            "extra": "avg mem: 169.71295786699608, max mem: 173.33984375, count: 57831"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17627,
            "unit": "median block_count",
            "extra": "avg block_count: 16370.323373277308, max block_count: 21949.0, count: 57831"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 39,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.342532551745606, max segment_count: 114.0, count: 57831"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.88621,
            "unit": "median cpu",
            "extra": "avg cpu: 12.026332618407814, max cpu: 37.354088, count: 57831"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 166.1484375,
            "unit": "median mem",
            "extra": "avg mem: 156.87829914697568, max mem: 176.34375, count: 57831"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754064807005,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.75,
            "unit": "median cpu",
            "extra": "avg cpu: 20.76614376162781, max cpu: 47.524754, count: 56588"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 171.25390625,
            "unit": "median mem",
            "extra": "avg mem: 169.5996303600145, max mem: 173.39453125, count: 56588"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18252,
            "unit": "median block_count",
            "extra": "avg block_count: 16758.801424330246, max block_count: 22013.0, count: 56588"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.32063334982682, max segment_count: 123.0, count: 56588"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 13.872832,
            "unit": "median cpu",
            "extra": "avg cpu: 12.071017032847125, max cpu: 33.532936, count: 56588"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 160.75390625,
            "unit": "median mem",
            "extra": "avg mem: 150.84507930402648, max mem: 170.546875, count: 56588"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754414900386,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.713451,
            "unit": "median cpu",
            "extra": "avg cpu: 20.633944177800338, max cpu: 55.706, count: 57878"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 169.62109375,
            "unit": "median mem",
            "extra": "avg mem: 169.34474751848717, max mem: 176.80859375, count: 57878"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18582,
            "unit": "median block_count",
            "extra": "avg block_count: 17010.85711323819, max block_count: 22023.0, count: 57878"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 41.85298386260755, max segment_count: 127.0, count: 57878"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.384164,
            "unit": "median cpu",
            "extra": "avg cpu: 11.465903279751519, max cpu: 32.36994, count: 57878"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.64453125,
            "unit": "median mem",
            "extra": "avg mem: 151.05770138264973, max mem: 168.1640625, count: 57878"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754417294837,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.731707,
            "unit": "median cpu",
            "extra": "avg cpu: 20.645170327223834, max cpu: 57.88945, count: 57294"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 168.765625,
            "unit": "median mem",
            "extra": "avg mem: 167.00629790259453, max mem: 170.99609375, count: 57294"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 17765,
            "unit": "median block_count",
            "extra": "avg block_count: 16495.481306943137, max block_count: 21738.0, count: 57294"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 41,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.538695151324745, max segment_count: 114.0, count: 57294"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.476802,
            "unit": "median cpu",
            "extra": "avg cpu: 11.663411383547176, max cpu: 33.005894, count: 57294"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 163.71875,
            "unit": "median mem",
            "extra": "avg mem: 154.0183669565094, max mem: 170.68359375, count: 57294"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754423737041,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.695229,
            "unit": "median cpu",
            "extra": "avg cpu: 20.253951987920242, max cpu: 57.88945, count: 57531"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 177.49609375,
            "unit": "median mem",
            "extra": "avg mem: 175.9427394985964, max mem: 181.2890625, count: 57531"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18278,
            "unit": "median block_count",
            "extra": "avg block_count: 16852.71069510351, max block_count: 21960.0, count: 57531"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.20583685317481, max segment_count: 113.0, count: 57531"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.504951,
            "unit": "median cpu",
            "extra": "avg cpu: 11.71969805316488, max cpu: 33.768845, count: 57531"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 161.0078125,
            "unit": "median mem",
            "extra": "avg mem: 150.35850522435732, max mem: 167.8828125, count: 57531"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754539820411,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.695229,
            "unit": "median cpu",
            "extra": "avg cpu: 20.56682545263455, max cpu: 46.60194, count: 57309"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 178.19140625,
            "unit": "median mem",
            "extra": "avg mem: 176.94777659540821, max mem: 182.7265625, count: 57309"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18641,
            "unit": "median block_count",
            "extra": "avg block_count: 17097.423650735487, max block_count: 21923.0, count: 57309"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.37395522518278, max segment_count: 119.0, count: 57309"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.347614,
            "unit": "median cpu",
            "extra": "avg cpu: 11.24184090369421, max cpu: 33.267326, count: 57309"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.125,
            "unit": "median mem",
            "extra": "avg mem: 152.70392262231937, max mem: 172.0546875, count: 57309"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0e385c88549677dc0e47d2509ea746cb7170bd8d",
          "message": "perf: Use Arrow for fast field execution (#2924)\n\n## What\n\nSwitches `Mixed` fast fields execution to fetching data into Arrow\narrays. A followup change will remove `Numeric`.\n\n## Why\n\nThis change is necessary for `Mixed`'s performance to match `Numeric`\nexecution. The:\n1. creation and destruction of `TantivyValue` and `OwnedValue`\n2. allocation and encoding/decoding of Strings\n\n...represented the largest remaining bottlenecks in (`Mixed`) fast\nfields execution.\n\nArrow removes those overheads for data held in memory, similar to how\nour `FFType` wrapper allows us to avoid `OwnedValue` overheads when\nfetching individual rows. String overhead is reduced by directly copying\nfrom the term dictionary into a `StringViewArray`, which has a single\ncontiguous buffer for the string data, and then a separate series of\nviews into that buffer (similar to allocating strings in an arena).\n\nFuture work could:\n* Push arrow arrays further down into Tantivy (e.g. as a `first_vals`\nvariant), removing additional overheads involved in fetching batches of\nrows.\n* Feed the arrow outputs of `Mixed` execution direct directly into a\nvectorized join implementation (e.g. DataFusion).\n\n## Tests\n\nGives a 1.6x speedup for `bucket-string-nofilter` and\n`bucket-string-filter`, with other changes being ~ in the noise.",
          "timestamp": "2025-08-09T14:16:01-07:00",
          "tree_id": "1fcdcb6500bb2e854ecfc613581ee13bc002b050",
          "url": "https://github.com/paradedb/paradedb/commit/0e385c88549677dc0e47d2509ea746cb7170bd8d"
        },
        "date": 1754776505976,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Bulk Update - Primary - cpu",
            "value": 18.75,
            "unit": "median cpu",
            "extra": "avg cpu: 20.542931318591325, max cpu: 83.35036, count: 57274"
          },
          {
            "name": "Bulk Update - Primary - mem",
            "value": 169.5703125,
            "unit": "median mem",
            "extra": "avg mem: 167.86269654697156, max mem: 172.40234375, count: 57274"
          },
          {
            "name": "Monitor Index Size - Primary - block_count",
            "value": 18804,
            "unit": "median block_count",
            "extra": "avg block_count: 17145.021545552954, max block_count: 21818.0, count: 57274"
          },
          {
            "name": "Monitor Index Size - Primary - segment_count",
            "value": 40,
            "unit": "median segment_count",
            "extra": "avg segment_count: 42.183503858644414, max segment_count: 128.0, count: 57274"
          },
          {
            "name": "Single Update - Primary - cpu",
            "value": 9.402546,
            "unit": "median cpu",
            "extra": "avg cpu: 11.449033907129914, max cpu: 32.844578, count: 57274"
          },
          {
            "name": "Single Update - Primary - mem",
            "value": 162.671875,
            "unit": "median mem",
            "extra": "avg mem: 153.1759452096501, max mem: 174.65625, count: 57274"
          }
        ]
      }
    ],
    "pg_search background-merge.toml Performance - TPS": [
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753283608911,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 36.76488126750026,
            "unit": "median tps",
            "extra": "avg tps: 37.175937650243064, max tps: 39.120747245405454, count: 55371"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 250.53728920229037,
            "unit": "median tps",
            "extra": "avg tps: 285.05638061700535, max tps: 2564.6084796790014, count: 55371"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 140.75995583365787,
            "unit": "median tps",
            "extra": "avg tps: 141.1096455213053, max tps: 146.96560952660133, count: 55371"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 72.39408726599235,
            "unit": "median tps",
            "extra": "avg tps: 64.11955104369487, max tps: 112.87075964441861, count: 110742"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 17.685923715204176,
            "unit": "median tps",
            "extra": "avg tps: 17.867345026510524, max tps: 20.492187927134044, count: 55371"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753290070191,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.70637577411575,
            "unit": "median tps",
            "extra": "avg tps: 38.808695808918145, max tps: 41.998425353038236, count: 55235"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 257.63869378968076,
            "unit": "median tps",
            "extra": "avg tps: 289.79539185348455, max tps: 2566.752882875581, count: 55235"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 146.23645394462724,
            "unit": "median tps",
            "extra": "avg tps: 145.38540185213307, max tps: 146.71599878433742, count: 55235"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 74.87354312492917,
            "unit": "median tps",
            "extra": "avg tps: 72.28300931983173, max tps: 119.99009389211133, count: 110470"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.00802059987152,
            "unit": "median tps",
            "extra": "avg tps: 18.153006824696185, max tps: 19.502466872885492, count: 55235"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753292525162,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.72889793180519,
            "unit": "median tps",
            "extra": "avg tps: 38.89931385985902, max tps: 40.766486447426615, count: 55284"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 257.43870540520174,
            "unit": "median tps",
            "extra": "avg tps: 294.3657090265942, max tps: 2612.7795420687617, count: 55284"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 155.7670915721904,
            "unit": "median tps",
            "extra": "avg tps: 155.35967807212813, max tps: 161.27584994708846, count: 55284"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 83.21932936859552,
            "unit": "median tps",
            "extra": "avg tps: 78.48971362628333, max tps: 140.08865146889823, count: 110568"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.852728854317448,
            "unit": "median tps",
            "extra": "avg tps: 18.87700733747028, max tps: 19.98786949525579, count: 55284"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753304104916,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.299414139493884,
            "unit": "median tps",
            "extra": "avg tps: 38.482894633187755, max tps: 40.6225926765277, count: 55209"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 136.27987458590187,
            "unit": "median tps",
            "extra": "avg tps: 187.2461299050697, max tps: 2611.8399857683744, count: 55209"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 143.7630420587178,
            "unit": "median tps",
            "extra": "avg tps: 142.5960481201854, max tps: 146.76673826764372, count: 55209"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 78.25154138966455,
            "unit": "median tps",
            "extra": "avg tps: 67.59923484539823, max tps: 135.25952779498428, count: 110418"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.690782842413206,
            "unit": "median tps",
            "extra": "avg tps: 18.806581461634984, max tps: 20.810882206760645, count: 55209"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753311803429,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 37.89681568612897,
            "unit": "median tps",
            "extra": "avg tps: 38.1431734001745, max tps: 40.028036589876045, count: 55233"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 255.25000314670785,
            "unit": "median tps",
            "extra": "avg tps: 289.58538119469773, max tps: 2581.374627742979, count: 55233"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 145.72990369943753,
            "unit": "median tps",
            "extra": "avg tps: 144.16704828681765, max tps: 146.04024635711735, count: 55233"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 79.86075907776362,
            "unit": "median tps",
            "extra": "avg tps: 73.2769161742259, max tps: 117.33643091221036, count: 110466"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.17272126476682,
            "unit": "median tps",
            "extra": "avg tps: 18.30542234854975, max tps: 20.87206928491748, count: 55233"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753375270470,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 40.370068571907865,
            "unit": "median tps",
            "extra": "avg tps: 40.373617905325716, max tps: 40.788122907053285, count: 55316"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 256.48031605696076,
            "unit": "median tps",
            "extra": "avg tps: 287.23705817801584, max tps: 2528.4600647020743, count: 55316"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 138.0616054740419,
            "unit": "median tps",
            "extra": "avg tps: 137.72474945737662, max tps: 144.50664554156924, count: 55316"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 79.27508230171051,
            "unit": "median tps",
            "extra": "avg tps: 71.83232430437334, max tps: 102.29940804185931, count: 110632"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 17.991860519267295,
            "unit": "median tps",
            "extra": "avg tps: 18.185128356888878, max tps: 20.426147585057766, count: 55316"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753389443982,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.00139646790766,
            "unit": "median tps",
            "extra": "avg tps: 37.97710842027385, max tps: 38.85928632443999, count: 55339"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 139.98208601025507,
            "unit": "median tps",
            "extra": "avg tps: 189.9223215746846, max tps: 2560.4686868100243, count: 55339"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 142.7183393416866,
            "unit": "median tps",
            "extra": "avg tps: 142.3950118977607, max tps: 146.58873051108935, count: 55339"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 72.05065263464927,
            "unit": "median tps",
            "extra": "avg tps: 63.22594248155079, max tps: 118.23116099809789, count: 110678"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.65084559870704,
            "unit": "median tps",
            "extra": "avg tps: 18.842813390096016, max tps: 20.218723870111063, count: 55339"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753474873206,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.48015013784669,
            "unit": "median tps",
            "extra": "avg tps: 38.5098136954039, max tps: 39.27208907432403, count: 55216"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 139.34366481401142,
            "unit": "median tps",
            "extra": "avg tps: 186.32778484596625, max tps: 2505.507882178321, count: 55216"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 144.53930254269835,
            "unit": "median tps",
            "extra": "avg tps: 143.6522799646363, max tps: 144.84102736953034, count: 55216"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 78.09055678881671,
            "unit": "median tps",
            "extra": "avg tps: 67.12257822652353, max tps: 123.04568458777305, count: 110432"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.068235160214453,
            "unit": "median tps",
            "extra": "avg tps: 18.36639036323924, max tps: 19.644671934110924, count: 55216"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753476624983,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 36.23011759157381,
            "unit": "median tps",
            "extra": "avg tps: 36.30448163036281, max tps: 37.11244449667588, count: 55195"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 256.8947998612941,
            "unit": "median tps",
            "extra": "avg tps: 290.7275486206699, max tps: 2583.977700452424, count: 55195"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 143.52811100085006,
            "unit": "median tps",
            "extra": "avg tps: 142.72817922689086, max tps: 146.01623326712374, count: 55195"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 82.78188111579576,
            "unit": "median tps",
            "extra": "avg tps: 77.89974929734824, max tps: 134.9708649934407, count: 110390"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 17.591369172305836,
            "unit": "median tps",
            "extra": "avg tps: 17.82202790732451, max tps: 20.503039616629245, count: 55195"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753507788639,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 41.459447855159205,
            "unit": "median tps",
            "extra": "avg tps: 41.32658029602039, max tps: 42.115851940167026, count: 55450"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 254.0463030686094,
            "unit": "median tps",
            "extra": "avg tps: 289.214141373912, max tps: 2572.7919074883002, count: 55450"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 138.8089983698414,
            "unit": "median tps",
            "extra": "avg tps: 138.63722307573414, max tps: 139.65519055409587, count: 55450"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 71.12376281991328,
            "unit": "median tps",
            "extra": "avg tps: 68.20664607469683, max tps: 121.29808052492866, count: 110900"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.88921020789518,
            "unit": "median tps",
            "extra": "avg tps: 19.080625446121303, max tps: 22.924944099816308, count: 55450"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753712173722,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 37.34500996794433,
            "unit": "median tps",
            "extra": "avg tps: 37.457391622514336, max tps: 41.396228155350116, count: 55145"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 138.00275053707833,
            "unit": "median tps",
            "extra": "avg tps: 190.0954871994696, max tps: 2659.3423827538304, count: 55145"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 133.58720078426686,
            "unit": "median tps",
            "extra": "avg tps: 132.87537673836434, max tps: 144.41591226073393, count: 55145"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 69.1525602503636,
            "unit": "median tps",
            "extra": "avg tps: 59.40491097899171, max tps: 105.300880743056, count: 110290"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.76624231127919,
            "unit": "median tps",
            "extra": "avg tps: 18.82823753115316, max tps: 19.495576441299193, count: 55145"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753729753437,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.74464839152905,
            "unit": "median tps",
            "extra": "avg tps: 38.93013357155233, max tps: 39.790348957449545, count: 55167"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 254.90651675164702,
            "unit": "median tps",
            "extra": "avg tps: 288.14511929595443, max tps: 2529.064483240996, count: 55167"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 140.84094385655206,
            "unit": "median tps",
            "extra": "avg tps: 140.3561400474834, max tps: 141.39833218558226, count: 55167"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 77.6629920501143,
            "unit": "median tps",
            "extra": "avg tps: 69.60144888027658, max tps: 102.17365705119637, count: 110334"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.97837257050739,
            "unit": "median tps",
            "extra": "avg tps: 19.04308224224533, max tps: 20.931594048806627, count: 55167"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753807141528,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.67271681113993,
            "unit": "median tps",
            "extra": "avg tps: 38.75832170193536, max tps: 40.59101435091673, count: 55235"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 255.82790351445212,
            "unit": "median tps",
            "extra": "avg tps: 289.49806950679573, max tps: 2536.1151646357494, count: 55235"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 143.18204313568646,
            "unit": "median tps",
            "extra": "avg tps: 142.59249415721297, max tps: 150.2718674013064, count: 55235"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 77.69580514898577,
            "unit": "median tps",
            "extra": "avg tps: 70.24667477462431, max tps: 101.35536596588182, count: 110470"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.722875257448845,
            "unit": "median tps",
            "extra": "avg tps: 18.963209721442396, max tps: 20.69196999736772, count: 55235"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753814381873,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.30571251572249,
            "unit": "median tps",
            "extra": "avg tps: 38.4338967230203, max tps: 40.99623126838806, count: 55214"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 138.67880539707483,
            "unit": "median tps",
            "extra": "avg tps: 187.09703394025425, max tps: 2579.5178480357426, count: 55214"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 147.59120104202728,
            "unit": "median tps",
            "extra": "avg tps: 146.17572913598295, max tps: 150.15913916765734, count: 55214"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 77.03684199245691,
            "unit": "median tps",
            "extra": "avg tps: 66.0594564352885, max tps: 119.7807996056888, count: 110428"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.15156073751739,
            "unit": "median tps",
            "extra": "avg tps: 18.440699293121515, max tps: 22.465929294927776, count: 55214"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753832519506,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 40.063117770167985,
            "unit": "median tps",
            "extra": "avg tps: 40.03729878144777, max tps: 40.811455849637674, count: 55233"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 83.42918266436031,
            "unit": "median tps",
            "extra": "avg tps: 143.87242456550374, max tps: 2577.73739085265, count: 55233"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 143.66699215026816,
            "unit": "median tps",
            "extra": "avg tps: 142.92440407526064, max tps: 145.5134595475854, count: 55233"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 73.19347355063081,
            "unit": "median tps",
            "extra": "avg tps: 57.169890943039356, max tps: 99.40814929820925, count: 110466"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 19.07844036771542,
            "unit": "median tps",
            "extra": "avg tps: 18.930066114118834, max tps: 20.521182561464336, count: 55233"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753901697500,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 40.09558943909917,
            "unit": "median tps",
            "extra": "avg tps: 40.15072630243857, max tps: 40.84533917503487, count: 55315"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 257.8835906887987,
            "unit": "median tps",
            "extra": "avg tps: 291.8262394620155, max tps: 2660.7971095035327, count: 55315"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 133.30097550253578,
            "unit": "median tps",
            "extra": "avg tps: 133.89394737485384, max tps: 137.36050904106273, count: 55315"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 81.46121952764058,
            "unit": "median tps",
            "extra": "avg tps: 73.5372892240742, max tps: 138.8466461835206, count: 110630"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.14276545382213,
            "unit": "median tps",
            "extra": "avg tps: 18.418706180435265, max tps: 20.674555304201817, count: 55315"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753911893519,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 39.14525107807561,
            "unit": "median tps",
            "extra": "avg tps: 39.23171235186335, max tps: 39.695301386172574, count: 55276"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 253.72398319611847,
            "unit": "median tps",
            "extra": "avg tps: 286.08179767629036, max tps: 2506.4374487572786, count: 55276"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 143.67790212477993,
            "unit": "median tps",
            "extra": "avg tps: 142.97341985323942, max tps: 144.4912573774887, count: 55276"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 83.82144498394226,
            "unit": "median tps",
            "extra": "avg tps: 78.60315291740213, max tps: 123.65320728521542, count: 110552"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.5996604439916,
            "unit": "median tps",
            "extra": "avg tps: 18.6057874036888, max tps: 21.035188610090447, count: 55276"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753987431461,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.45599426113391,
            "unit": "median tps",
            "extra": "avg tps: 38.58026549384898, max tps: 41.21152344441212, count: 55377"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 139.78870872401416,
            "unit": "median tps",
            "extra": "avg tps: 192.20857092682053, max tps: 2703.61174648334, count: 55377"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 141.76167425911123,
            "unit": "median tps",
            "extra": "avg tps: 141.0444328097217, max tps: 144.16083667028428, count: 55377"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 74.00640763610112,
            "unit": "median tps",
            "extra": "avg tps: 64.45739961079626, max tps: 117.54359794498437, count: 110754"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.408160242940475,
            "unit": "median tps",
            "extra": "avg tps: 18.59402494034385, max tps: 21.416301662212547, count: 55377"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753994623444,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.90452958468523,
            "unit": "median tps",
            "extra": "avg tps: 39.09205741603785, max tps: 41.08093190637781, count: 55512"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 257.23724302300263,
            "unit": "median tps",
            "extra": "avg tps: 292.58357840748084, max tps: 2570.3896332914683, count: 55512"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 139.34896088225128,
            "unit": "median tps",
            "extra": "avg tps: 139.20797644202443, max tps: 143.1978656735643, count: 55512"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 77.94645978481852,
            "unit": "median tps",
            "extra": "avg tps: 70.38455748064803, max tps: 120.6024694383704, count: 111024"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.17212527230476,
            "unit": "median tps",
            "extra": "avg tps: 18.208510468729465, max tps: 20.812671770232097, count: 55512"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754065429128,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 38.55881011334105,
            "unit": "median tps",
            "extra": "avg tps: 38.74587709859141, max tps: 40.99186269881423, count: 55532"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 143.08119669991476,
            "unit": "median tps",
            "extra": "avg tps: 198.06261449802395, max tps: 2570.539040105357, count: 55532"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 138.63140640939991,
            "unit": "median tps",
            "extra": "avg tps: 138.14343654019564, max tps: 140.0241177992188, count: 55532"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 73.65086579913503,
            "unit": "median tps",
            "extra": "avg tps: 65.47086927310515, max tps: 123.2292430323705, count: 111064"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.124592926339798,
            "unit": "median tps",
            "extra": "avg tps: 18.463469248571062, max tps: 21.8760276434892, count: 55532"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754415527959,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 39.518326143944826,
            "unit": "median tps",
            "extra": "avg tps: 39.4813065772711, max tps: 40.99164545584716, count: 55517"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 259.41092090859814,
            "unit": "median tps",
            "extra": "avg tps: 296.08154817527105, max tps: 2511.4817919989396, count: 55517"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 138.82072693639486,
            "unit": "median tps",
            "extra": "avg tps: 138.65437133077498, max tps: 140.5742157770976, count: 55517"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 72.89871140171385,
            "unit": "median tps",
            "extra": "avg tps: 75.69200973646545, max tps: 117.19296765341869, count: 111034"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.79097964462658,
            "unit": "median tps",
            "extra": "avg tps: 18.976633959025005, max tps: 21.289399619929927, count: 55517"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754417926582,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 37.183551632670444,
            "unit": "median tps",
            "extra": "avg tps: 37.251574251635155, max tps: 39.446825061980554, count: 55525"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 258.5421775088838,
            "unit": "median tps",
            "extra": "avg tps: 294.61472297401224, max tps: 2607.9146672059783, count: 55525"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 150.84937339950687,
            "unit": "median tps",
            "extra": "avg tps: 149.21831398313225, max tps: 152.81177526882027, count: 55525"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 74.36195137100324,
            "unit": "median tps",
            "extra": "avg tps: 66.16776949346688, max tps: 101.41624137609338, count: 111050"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 17.57639831202997,
            "unit": "median tps",
            "extra": "avg tps: 17.844572479145995, max tps: 20.14743812800738, count: 55525"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754424369378,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 39.01776353718682,
            "unit": "median tps",
            "extra": "avg tps: 39.10823920056949, max tps: 40.321935266623576, count: 55488"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 263.0628794727849,
            "unit": "median tps",
            "extra": "avg tps: 297.0635812742295, max tps: 2438.7034362946233, count: 55488"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 146.8588905853107,
            "unit": "median tps",
            "extra": "avg tps: 145.95706853762093, max tps: 147.7589168054518, count: 55488"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 74.34871748782624,
            "unit": "median tps",
            "extra": "avg tps: 74.64930507336686, max tps: 127.24213105993834, count: 110976"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.157367100584057,
            "unit": "median tps",
            "extra": "avg tps: 18.231775732236013, max tps: 21.13687247294158, count: 55488"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754540453865,
        "tool": "customBiggerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - tps",
            "value": 39.75048866831844,
            "unit": "median tps",
            "extra": "avg tps: 39.698323542368286, max tps: 40.1525829067947, count: 55417"
          },
          {
            "name": "Delete value - Primary - tps",
            "value": 256.35931084501374,
            "unit": "median tps",
            "extra": "avg tps: 291.31978093774063, max tps: 2550.8951997899535, count: 55417"
          },
          {
            "name": "Insert value - Primary - tps",
            "value": 147.94430214440345,
            "unit": "median tps",
            "extra": "avg tps: 147.34910681167938, max tps: 148.7109425629027, count: 55417"
          },
          {
            "name": "Update random values - Primary - tps",
            "value": 81.99568709061481,
            "unit": "median tps",
            "extra": "avg tps: 75.08930002420024, max tps: 128.05849642768214, count: 110834"
          },
          {
            "name": "Vacuum - Primary - tps",
            "value": 18.119845855109595,
            "unit": "median tps",
            "extra": "avg tps: 18.260136097559037, max tps: 19.788078857108953, count: 55417"
          }
        ]
      }
    ],
    "pg_search background-merge.toml Performance - Other Metrics": [
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "cbd2e802901988c181281a9b7f772543e1df32d2",
          "message": "chore: add `background-merge.toml` to CI (#2895)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThis new stressgres file was instrumental in catching the bug fixed in\n#2845 and was used to test background merging, but has not been added to\nCI.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T10:26:09-04:00",
          "tree_id": "bb8e3ca51c2d0de5e56be65f478f11096b0d410e",
          "url": "https://github.com/paradedb/paradedb/commit/cbd2e802901988c181281a9b7f772543e1df32d2"
        },
        "date": 1753283611014,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 18.79644423088196, max cpu: 37.72102, count: 55371"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 153.453125,
            "unit": "median mem",
            "extra": "avg mem: 140.15833028570913, max mem: 153.453125, count: 55371"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 7.577871649422924, max cpu: 27.853, count: 55371"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.578125,
            "unit": "median mem",
            "extra": "avg mem: 141.51240326615016, max mem: 145.953125, count: 55371"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.284333,
            "unit": "median cpu",
            "extra": "avg cpu: 11.231000912344507, max cpu: 32.526623, count: 55371"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 145.84765625,
            "unit": "median mem",
            "extra": "avg mem: 121.37304959105398, max mem: 152.78125, count: 55371"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21456,
            "unit": "median block_count",
            "extra": "avg block_count: 21787.010637337233, max block_count: 43313.0, count: 55371"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.13359864126847, max cpu: 4.6421666, count: 55371"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 99.828125,
            "unit": "median mem",
            "extra": "avg mem: 89.79152472639107, max mem: 129.453125, count: 55371"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.265102671073304, max segment_count: 46.0, count: 55371"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.899614,
            "unit": "median cpu",
            "extra": "avg cpu: 15.139585857598687, max cpu: 32.684826, count: 110742"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 160.29296875,
            "unit": "median mem",
            "extra": "avg mem: 148.1737127103425, max mem: 178.375, count: 110742"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 13.514282810541026, max cpu: 27.87996, count: 55371"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 155.51171875,
            "unit": "median mem",
            "extra": "avg mem: 153.5563633405799, max mem: 157.19140625, count: 55371"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "53fa29a57e7daa2bdec9bf05f86d8db50088fd51",
          "message": "perf: Avoid a re-query when a top-n query is exhausted (#2888)\n\n## What\n\nSplit the iterators consumed by the `TopN` exec method and by the\n`Normal`/`FF` exec methods into two separate implementations.\n\nAfter splitting them, use the known exact size of the `TopN` iterator to\nexit early (as `exhausted: bool`) if we had fewer matches than were\nrequested. This avoids re-querying an iterator (and re-scanning its\ncolumns) that we know has no more results.\n\n## Why\n\nThe two types of consumers of these iterators have very different\nconsumption patterns and constraints:\n* TopN knows exactly how many results there will be, and already buffers\nthem all in memory. It would like to be able to know the precise count\nof results.\n* `Normal` and `FF` exec methods do not know the total number of results\nto expect, and in some cases would like to be able to consume in a\nsegment-aware fashion in order to be able to late-fetch fast field\ncolumns (see #2623).\n\n## Tests\n\nAdded a test to cement the change in query count.\n\nBenchmarks show a 1.5x speedup for `paging-string-max`, and no change\nfor other queries.",
          "timestamp": "2025-07-23T09:13:45-07:00",
          "tree_id": "c162e59fb9a6b4523c0ff39e10d9d54d92761460",
          "url": "https://github.com/paradedb/paradedb/commit/53fa29a57e7daa2bdec9bf05f86d8db50088fd51"
        },
        "date": 1753290072378,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 18.500734084223225, max cpu: 42.436146, count: 55235"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.1875,
            "unit": "median mem",
            "extra": "avg mem: 141.39015506189463, max mem: 154.94921875, count: 55235"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 7.592605944683425, max cpu: 27.826086, count: 55235"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 144.859375,
            "unit": "median mem",
            "extra": "avg mem: 140.23437075676654, max mem: 144.859375, count: 55235"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.266409,
            "unit": "median cpu",
            "extra": "avg cpu: 10.870756060089509, max cpu: 28.290766, count: 55235"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 143.953125,
            "unit": "median mem",
            "extra": "avg mem: 120.31137405800217, max mem: 150.96484375, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 22881,
            "unit": "median block_count",
            "extra": "avg block_count: 23186.18394134154, max block_count: 46585.0, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.161818477737078, max cpu: 4.6376815, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 97.609375,
            "unit": "median mem",
            "extra": "avg mem: 89.815045657192, max mem: 128.734375, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.347008237530552, max segment_count: 50.0, count: 55235"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 14.1240203008054, max cpu: 33.005894, count: 110470"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 153.34765625,
            "unit": "median mem",
            "extra": "avg mem: 140.89518410682766, max mem: 162.60546875, count: 110470"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.806328,
            "unit": "median cpu",
            "extra": "avg cpu: 13.033026123976722, max cpu: 27.639154, count: 55235"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 155.9140625,
            "unit": "median mem",
            "extra": "avg mem: 153.79799775957272, max mem: 157.50390625, count: 55235"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "880ee607618b7ffe12f2784d03be3110b4df6cdf",
          "message": "feat: text search operators (#2877)\n\n## What\n\nThis is the implementation of 4 new operators designed around common\n\"text search\" patterns: `===` (exact token), `&&&` (tokenized term\nconjunction) `|||` (tokenized term disjunction), and `###` (phrase).\n\nFirst, `@@@` still exists and still does what it's always done, which is\nrun the right-hand-side through tantivy's \"query parser\".\n\nThese new operators have specific meanings. The spelling of these\noperators is both to maintain some kind of consistency in that they're\nall 3 of the same symbol and also to try and confer their meaning.\n\nIn all cases, the left-hand-side of the operator is required to be a\nreference to a Postgres `TEXT`/`VARCHAR` field and the right-hand-side\nis text. The operator definition defines how the right-hand-side input\nis applied to the left-hand-side field. These are \"text search\"\noperators and would be nonsensical applied to non-text fields.\n\n- `field === 'TEXT'` - this is the exact term match operator. The\nright-hand-side value is used, unmodified, to perform the equivalent of\nthe `paradedb.term()` function.\n\n- `field === ARRAY['...', '...', '...']` - similar to the above, but\nrewrites to the `paradedb.term_set()` function.\n\n- `field &&& 'TEXT'` - this is the \"match conjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **all** of\nthe tokenized terms. Think, \"find all documents that contain all terms\ntokenized from this text input\". This is the equivalent of the\n`paradedb.match` function with the `conjunction_mode => true`.\n\n- `field ||| 'TEXT'` - this is the \"match disjunction\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain **any** of\nthe tokenized terms. Think, \"find all documents that contain one or more\nof the terms tokenized from this text input\". This is the equivalent of\nthe `paradedb.match` function with the `conjunction_mode => false`.\n\n- `field ### 'TEXT'` - this is the \"phrase search\" operator. It\ntokenizes the right-hand-side using the index tokenizer defined by the\nleft-hand-side field and searches for documents that contain all the\ntokenized terms in the order written. Think, \"find all documents that\ncontain this tokenized phrase\". This is akin to the `paradedb.phrase()`\nfunction, except the `###` is transparently handling the tokenization.\n\nIf you wanted to find all documents that talk about bbq and chicken and\nmaybe hotdogs and happen on July 4th, you might write a query like this:\n\n```sql\nSELECT * \nFROM events \nWHERE (\n       description &&& 'bbq chicken' OR description ||| 'hot dog hotdogs'\n) AND description ### 'July 4th';\n```\n\n## Why\n\nThese operators are in furtherance of our\n[roadmap](https://github.com/orgs/paradedb/discussions/2041) --\nspecifically the \"Database UX improvements\" line item.\n\nOur overall goal with that roadmap item is to start moving users and ORM\ntools away from needing to use our \"builder functions\" in the common\ntext-search cases. What we're striving for is for users, and ORM tools,\nto write standard SQL WHERE clauses. In order to do that we need to make\ncommon things more accessible using custom operators.\n\n## How\n\nLargely just adding new `#[pg_operator]` functions and ensuring they all\nhave a SUPPORT function that can rewrite the expression to what we need.\n\n@rebasedming said he was going to tackle documentation, which can come\nin a separate PR.\n\n## Tests\n\nThere's a new regression test named `operators.sql` that validates\nEXPLAIN output and search results against our standard \"mock_items\"\ntable.",
          "timestamp": "2025-07-23T12:54:32-04:00",
          "tree_id": "f4a0dd94cd1e423e30c42103a8a23d86905d32e7",
          "url": "https://github.com/paradedb/paradedb/commit/880ee607618b7ffe12f2784d03be3110b4df6cdf"
        },
        "date": 1753292527389,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.443804,
            "unit": "median cpu",
            "extra": "avg cpu: 18.443460860160638, max cpu: 41.618496, count: 55284"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 156.07421875,
            "unit": "median mem",
            "extra": "avg mem: 143.04293864974494, max mem: 156.4765625, count: 55284"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 7.591251817957412, max cpu: 37.065636, count: 55284"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.2265625,
            "unit": "median mem",
            "extra": "avg mem: 141.39445734186202, max mem: 145.2265625, count: 55284"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.248554,
            "unit": "median cpu",
            "extra": "avg cpu: 10.374913420985184, max cpu: 27.665707, count: 55284"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 147.015625,
            "unit": "median mem",
            "extra": "avg mem: 122.99665053406049, max mem: 154.2734375, count: 55284"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 22916,
            "unit": "median block_count",
            "extra": "avg block_count: 23205.58443672672, max block_count: 46607.0, count: 55284"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.597701,
            "unit": "median cpu",
            "extra": "avg cpu: 3.9622352305514674, max cpu: 4.6376815, count: 55284"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 98.7265625,
            "unit": "median mem",
            "extra": "avg mem: 89.43665493180667, max mem: 128.7265625, count: 55284"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.605799146226758, max segment_count: 47.0, count: 55284"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.819577,
            "unit": "median cpu",
            "extra": "avg cpu: 13.513093055042267, max cpu: 46.332047, count: 110568"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 167.0703125,
            "unit": "median mem",
            "extra": "avg mem: 154.04266852468618, max mem: 170.28125, count: 110568"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.819577,
            "unit": "median cpu",
            "extra": "avg cpu: 12.643333624321084, max cpu: 27.853, count: 55284"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 158.38671875,
            "unit": "median mem",
            "extra": "avg mem: 156.05717868472343, max mem: 160.4453125, count: 55284"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac",
          "message": "perf: Lazily load bitpacked columns (#2894)\n\n## What\n\nIncorporates https://github.com/paradedb/tantivy/pull/56.\n\n## Why\n\nAs mentioned there:\n> We would like to be able to lazily load `BitpackedCodec` columns\n(similar to what\nhttps://github.com/paradedb/tantivy/commit/020bdffd61365a140218643c49ba01c5043b2966\ndid for `BlockwiseLinearCodec`), because in the context of `pg_search`,\nimmediately constructing `OwnedBytes` means copying the entire content\nof the column into memory.\n\n## Tests\n\nThere are a few 2x speedups in the benchmark suite, as well as a 1.8x\nspeedup on a representative customer query.\n\nUnfortunately there are also some 13-19% slowdowns on aggregates with\n`solve_mvcc=false`: it looks like that is because aggregates use\n`get_vals`, for which the default implementation is to just call\n`get_val` in a loop. After discussion, we think that getting back that\nperformance might require wider API changes to make batching more\ninherent.",
          "timestamp": "2025-07-23T13:06:17-07:00",
          "tree_id": "f25d5227041b7df9d6e6841c1cdedccb09c977b9",
          "url": "https://github.com/paradedb/paradedb/commit/80e2a75d66c80e4d66557ef46e4402b9d0c1a3ac"
        },
        "date": 1753304107629,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 18.57822366296795, max cpu: 41.458733, count: 55209"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 151.9609375,
            "unit": "median mem",
            "extra": "avg mem: 137.73350019924288, max mem: 155.3359375, count: 55209"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 9.252072710584962, max cpu: 27.906979, count: 55209"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 144.8359375,
            "unit": "median mem",
            "extra": "avg mem: 141.03128452788494, max mem: 145.5859375, count: 55209"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.266409,
            "unit": "median cpu",
            "extra": "avg cpu: 10.96692971035003, max cpu: 23.575638, count: 55209"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 137.2890625,
            "unit": "median mem",
            "extra": "avg mem: 112.85245505997663, max mem: 152.453125, count: 55209"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21039,
            "unit": "median block_count",
            "extra": "avg block_count: 21677.388088898548, max block_count: 44794.0, count: 55209"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6021094,
            "unit": "median cpu",
            "extra": "avg cpu: 3.9880352484626376, max cpu: 4.624277, count: 55209"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 88.9609375,
            "unit": "median mem",
            "extra": "avg mem: 81.0659110437157, max mem: 124.5859375, count: 55209"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.337227625930556, max segment_count: 47.0, count: 55209"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 14.242017844997218, max cpu: 32.276657, count: 110418"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 164.71875,
            "unit": "median mem",
            "extra": "avg mem: 148.47299310913982, max mem: 170.265625, count: 110418"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.793103,
            "unit": "median cpu",
            "extra": "avg cpu: 12.17786968523549, max cpu: 23.188406, count: 55209"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 157.6875,
            "unit": "median mem",
            "extra": "avg mem: 155.3893536945969, max mem: 158.8359375, count: 55209"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9669e3ef733809d362c3f986470cabd1a906a1ac",
          "message": "fix: add #[pg_guard] to extern C-unwind functions (#2899)\n\n## What\n\nAll `extern \"C-unwind\"` functions require the `#[pg_guard]` attribute.\nWe had a few that were missing it, which _could_ lead to a crash.\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-23T18:16:06-04:00",
          "tree_id": "dd4603085f3a81690187be0cc23d854ea10d0f03",
          "url": "https://github.com/paradedb/paradedb/commit/9669e3ef733809d362c3f986470cabd1a906a1ac"
        },
        "date": 1753311805470,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.443804,
            "unit": "median cpu",
            "extra": "avg cpu: 18.622685413975905, max cpu: 37.795277, count: 55233"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.5390625,
            "unit": "median mem",
            "extra": "avg mem: 141.73477295898738, max mem: 155.32421875, count: 55233"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 7.576513604360176, max cpu: 27.853, count: 55233"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 144.828125,
            "unit": "median mem",
            "extra": "avg mem: 140.5027474517046, max mem: 145.203125, count: 55233"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.248554,
            "unit": "median cpu",
            "extra": "avg cpu: 10.702932640489776, max cpu: 23.552504, count: 55233"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 144.4765625,
            "unit": "median mem",
            "extra": "avg mem: 121.04109925508754, max mem: 152.13671875, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 22264,
            "unit": "median block_count",
            "extra": "avg block_count: 22598.187134502925, max block_count: 45484.0, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 3.697092087797109, max cpu: 4.6376815, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 98.328125,
            "unit": "median mem",
            "extra": "avg mem: 88.8422515185668, max mem: 127.953125, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.54787898538917, max segment_count: 48.0, count: 55233"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.819577,
            "unit": "median cpu",
            "extra": "avg cpu: 13.914111555749539, max cpu: 41.578438, count: 110466"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 153.146484375,
            "unit": "median mem",
            "extra": "avg mem: 145.62681083008573, max mem: 167.1328125, count: 110466"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.766731,
            "unit": "median cpu",
            "extra": "avg cpu: 12.308945837210722, max cpu: 27.826086, count: 55233"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 155.984375,
            "unit": "median mem",
            "extra": "avg mem: 153.50603515731083, max mem: 157.7421875, count: 55233"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "485cc173af493200c98474f48841973dd3b4d24b",
          "message": "chore: upgrade to `0.17.1` (#2902)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-24T11:52:00-04:00",
          "tree_id": "a4507e79b854e0a1da4b8a9318480c200a6b75e4",
          "url": "https://github.com/paradedb/paradedb/commit/485cc173af493200c98474f48841973dd3b4d24b"
        },
        "date": 1753375272659,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.426102,
            "unit": "median cpu",
            "extra": "avg cpu: 18.11072057377034, max cpu: 37.573387, count: 55316"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 155.31640625,
            "unit": "median mem",
            "extra": "avg mem: 141.8214962527795, max mem: 155.31640625, count: 55316"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 7.601388775061968, max cpu: 27.745665, count: 55316"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.31640625,
            "unit": "median mem",
            "extra": "avg mem: 141.95643764349376, max mem: 146.31640625, count: 55316"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.275363,
            "unit": "median cpu",
            "extra": "avg cpu: 11.309245356860297, max cpu: 28.180038, count: 55316"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 145.8828125,
            "unit": "median mem",
            "extra": "avg mem: 121.1753339619188, max mem: 153.296875, count: 55316"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21901,
            "unit": "median block_count",
            "extra": "avg block_count: 22214.996474799336, max block_count: 44531.0, count: 55316"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 4.569007838693064, max cpu: 4.628737, count: 55316"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 101.31640625,
            "unit": "median mem",
            "extra": "avg mem: 91.51208383989261, max mem: 130.94140625, count: 55316"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 31,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.78602935859426, max segment_count: 46.0, count: 55316"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.832853,
            "unit": "median cpu",
            "extra": "avg cpu: 14.204754730121932, max cpu: 32.36994, count: 110632"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 155.30078125,
            "unit": "median mem",
            "extra": "avg mem: 145.67121254191827, max mem: 170.41015625, count: 110632"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.806328,
            "unit": "median cpu",
            "extra": "avg cpu: 13.32461375196885, max cpu: 27.77242, count: 55316"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 157.42578125,
            "unit": "median mem",
            "extra": "avg mem: 155.03914159104056, max mem: 158.91796875, count: 55316"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f36ed9f1b8d7197e7779506260fc5a2a354d60b0",
          "message": "fix: Custom scan fails if partitioned table is empty (#2905)\n\n# Ticket(s) Closed\n\n- Closes #2904 \n\n## What\n\nBug fix for above GH issue.\n\n## Why\n\n## How\n\n## Tests\nAdded regression test.",
          "timestamp": "2025-07-24T15:50:00-04:00",
          "tree_id": "ddfade85873c38a4ad1a72f17b5b6be2065fb98f",
          "url": "https://github.com/paradedb/paradedb/commit/f36ed9f1b8d7197e7779506260fc5a2a354d60b0"
        },
        "date": 1753389446684,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 18.60889352254321, max cpu: 41.538464, count: 55339"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 150.46484375,
            "unit": "median mem",
            "extra": "avg mem: 135.5410361307125, max mem: 153.83984375, count: 55339"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 9.149155174532835, max cpu: 41.37931, count: 55339"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.21484375,
            "unit": "median mem",
            "extra": "avg mem: 141.0348230762889, max mem: 145.58984375, count: 55339"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.284333,
            "unit": "median cpu",
            "extra": "avg cpu: 11.03468633899371, max cpu: 28.514853, count: 55339"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 149.77734375,
            "unit": "median mem",
            "extra": "avg mem: 121.29651909706536, max mem: 162.125, count: 55339"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 20335,
            "unit": "median block_count",
            "extra": "avg block_count: 21103.358607853414, max block_count: 43109.0, count: 55339"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.5660220147782, max cpu: 4.655674, count: 55339"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 95.71484375,
            "unit": "median mem",
            "extra": "avg mem: 84.3357297605441, max mem: 127.21484375, count: 55339"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.29722257359186, max segment_count: 49.0, count: 55339"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.88621,
            "unit": "median cpu",
            "extra": "avg cpu: 14.719175603944176, max cpu: 45.977013, count: 110678"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 151.69921875,
            "unit": "median mem",
            "extra": "avg mem: 140.56512342533068, max mem: 166.48046875, count: 110678"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.819577,
            "unit": "median cpu",
            "extra": "avg cpu: 12.463893138335036, max cpu: 27.934044, count: 55339"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 155.03125,
            "unit": "median mem",
            "extra": "avg mem: 152.75205445357253, max mem: 157.8203125, count: 55339"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "793858646fca67360d59d9237575b658482f960d",
          "message": "feat: initial group-by aggregate implementation (for single group and COUNT(*) aggregation) (#2893)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nImplemented GROUP BY functionality for aggregate CustomScan, enabling\nefficient grouping aggregations using Tantivy's bucket aggregations.\nAdded proper rejection handling for unsupported scenarios like\nmulti-column GROUP BY and ORDER BY on aggregate columns.\n\n## Why\n\nParadeDB's aggregate CustomScan previously only supported simple\n`COUNT(*)` queries without grouping capabilities. This limited users\nfrom performing common analytical queries like:\n- `SELECT category, COUNT(*) FROM products WHERE description @@@\n'laptop' GROUP BY category`\n- Grouping by different data types (integers, floats, text, booleans)\n\n## How\n\n- **Grouping Column Extraction**: Added `extract_grouping_columns()`\nfunction to validate that grouping columns are fast fields\n- **Tantivy Integration**: Implemented bucket aggregations in\n`scan_state.rs` using Tantivy's terms aggregation\n- **Type Conversion**: Added proper type handling for INT2, INT4, INT8,\nFLOAT4, FLOAT8, TEXT, and BOOL grouping columns\n- **Result Processing**: Added tuple generation to include both grouping\ncolumn values and aggregate results\n\n## Tests\n\n### Regression Tests\n- **Data type coverage**: Tests for all supported grouping column types\n(numeric, text, boolean)\n\n### Property-based Tests\n- **Equivalence guarantee**: Existing property tests in `qgen.rs` ensure\naggregate CustomScan results match PostgreSQL exactly",
          "timestamp": "2025-07-25T12:34:00-07:00",
          "tree_id": "ea5243f744ac5666e4761efb502c582bae7eafb9",
          "url": "https://github.com/paradedb/paradedb/commit/793858646fca67360d59d9237575b658482f960d"
        },
        "date": 1753474875461,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 18.57094329412768, max cpu: 42.39451, count: 55216"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.9375,
            "unit": "median mem",
            "extra": "avg mem: 145.03253133149812, max mem: 154.9375, count: 55216"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 9.173659097594898, max cpu: 37.684006, count: 55216"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.5625,
            "unit": "median mem",
            "extra": "avg mem: 141.2603695034048, max mem: 145.5625, count: 55216"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.257474,
            "unit": "median cpu",
            "extra": "avg cpu: 10.869561083155055, max cpu: 27.639154, count: 55216"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 145.5390625,
            "unit": "median mem",
            "extra": "avg mem: 117.79761676020085, max mem: 155.8359375, count: 55216"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 20400,
            "unit": "median block_count",
            "extra": "avg block_count: 21203.823330194147, max block_count: 43497.0, count: 55216"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 4.239957522039455, max cpu: 4.6421666, count: 55216"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 92.6875,
            "unit": "median mem",
            "extra": "avg mem: 83.21169362141408, max mem: 126.8125, count: 55216"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.371395972181976, max segment_count: 47.0, count: 55216"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 14.409755014411305, max cpu: 37.684006, count: 110432"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 153.80859375,
            "unit": "median mem",
            "extra": "avg mem: 141.30463203600405, max mem: 163.43359375, count: 110432"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.779904,
            "unit": "median cpu",
            "extra": "avg cpu: 12.465734605129137, max cpu: 27.853, count: 55216"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 157.07421875,
            "unit": "median mem",
            "extra": "avg mem: 154.58706729593777, max mem: 158.46875, count: 55216"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "60fb473d6809455d176ee60995d82c3ee2e5aa13",
          "message": "chore: upgrade to `0.17.2` (#2911)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-25T16:01:26-04:00",
          "tree_id": "d91920cdff9bddfced243b20a51868f9cf3e0555",
          "url": "https://github.com/paradedb/paradedb/commit/60fb473d6809455d176ee60995d82c3ee2e5aa13"
        },
        "date": 1753476627251,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.479307,
            "unit": "median cpu",
            "extra": "avg cpu: 18.81044303692488, max cpu: 41.578438, count: 55195"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 156.06640625,
            "unit": "median mem",
            "extra": "avg mem: 143.61995835786757, max mem: 157.56640625, count: 55195"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 7.593819252014257, max cpu: 28.125, count: 55195"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.31640625,
            "unit": "median mem",
            "extra": "avg mem: 141.7561889947006, max mem: 146.31640625, count: 55195"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.266409,
            "unit": "median cpu",
            "extra": "avg cpu: 10.926348411427837, max cpu: 28.125, count: 55195"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 146.453125,
            "unit": "median mem",
            "extra": "avg mem: 122.45295252910137, max mem: 153.50390625, count: 55195"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 22545,
            "unit": "median block_count",
            "extra": "avg block_count: 23061.62962224839, max block_count: 46449.0, count: 55195"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.5801525,
            "unit": "median cpu",
            "extra": "avg cpu: 3.793484102398696, max cpu: 4.64666, count: 55195"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 100.19140625,
            "unit": "median mem",
            "extra": "avg mem: 91.18321894249932, max mem: 129.81640625, count: 55195"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 31,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.63752151462995, max segment_count: 46.0, count: 55195"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.832853,
            "unit": "median cpu",
            "extra": "avg cpu: 13.406045404635748, max cpu: 46.875, count: 110390"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 164.13671875,
            "unit": "median mem",
            "extra": "avg mem: 153.1861371472733, max mem: 171.0, count: 110390"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.806328,
            "unit": "median cpu",
            "extra": "avg cpu: 12.74665397832834, max cpu: 32.214767, count: 55195"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 157.609375,
            "unit": "median mem",
            "extra": "avg mem: 155.07365498176918, max mem: 159.875, count: 55195"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9b43d36b4239942ef7054b3bacdc82fb01f938e9",
          "message": "perf: Reduce buffering during mixed fast field scans (#2887)\n\n# Ticket(s) Closed\n\n- Closes #2715\n- Closes #2623\n\n## What\n\nAdjust the `MixedFastField` executor to stream results, and only buffer\nup to a hard coded batch size in memory.\n\nAdditionally, avoid creating the intermediate tuple-like `FieldValues`\nstructure, and directly consume the column values to produce a tuple in\na postgres `Slot`.\n\n## Why\n\nCurrently, the `MixedFastField` and `StringFastField` executors buffer\nentire columns in memory: that implementation will not scale to larger\ndatasets. Moving to streaming allows them to be used with arbitrarily\nlarge datasets.\n\nRemoving the intermediate `FieldValues` creation also makes\n`MixedFastField` ~equivalent to `StringFastField` in terms of overhead:\na followup change will remove `StringFastField`.\n\n#2623 discussed potentially continuing to buffer entire columns and then\ndeclaring them sorted: but doing so efficiently (i.e., without buffering\nthe entire column) would require a completely different implementation\nof the method which started by consuming the dictionary, and then\nexecuted a series of range queries for manageable chunks.\n\n## Tests\n\nPerformance improves by ~15% on some of our join queries for the `docs`\ndataset.",
          "timestamp": "2025-07-25T21:42:17-07:00",
          "tree_id": "a35ec65315a7cc9898747eef7c189bc3704a978f",
          "url": "https://github.com/paradedb/paradedb/commit/9b43d36b4239942ef7054b3bacdc82fb01f938e9"
        },
        "date": 1753507791278,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.408438,
            "unit": "median cpu",
            "extra": "avg cpu: 17.70282947717148, max cpu: 42.31146, count: 55450"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 155.32421875,
            "unit": "median mem",
            "extra": "avg mem: 142.38663625732642, max mem: 155.32421875, count: 55450"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 7.631538447607118, max cpu: 27.906979, count: 55450"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.19921875,
            "unit": "median mem",
            "extra": "avg mem: 140.78894689754284, max mem: 145.57421875, count: 55450"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.257474,
            "unit": "median cpu",
            "extra": "avg cpu: 11.329279954189639, max cpu: 27.692308, count: 55450"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 146.43359375,
            "unit": "median mem",
            "extra": "avg mem: 122.04265899740757, max mem: 154.4921875, count: 55450"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 22278,
            "unit": "median block_count",
            "extra": "avg block_count: 22688.48275924256, max block_count: 45674.0, count: 55450"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.58891,
            "unit": "median cpu",
            "extra": "avg cpu: 4.087363302240206, max cpu: 4.6511626, count: 55450"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 97.19921875,
            "unit": "median mem",
            "extra": "avg mem: 89.16753578674482, max mem: 129.44921875, count: 55450"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.242308385933274, max segment_count: 49.0, count: 55450"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.832853,
            "unit": "median cpu",
            "extra": "avg cpu: 14.757919898775974, max cpu: 32.941177, count: 110900"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 154.42578125,
            "unit": "median mem",
            "extra": "avg mem: 146.22456890357304, max mem: 172.80078125, count: 110900"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 9.302325,
            "unit": "median cpu",
            "extra": "avg cpu: 11.67512056290013, max cpu: 27.612656, count: 55450"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 155.015625,
            "unit": "median mem",
            "extra": "avg mem: 152.80161589833182, max mem: 157.12109375, count: 55450"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5e13f82a5144fb0c47657c94f396084b2dcf10c2",
          "message": "feat: new SQL builder functions (#2897)\n\n## What\n\nThis adds a new set of SQL query \"builder functions\" that are all\ndesigned to be used with the `@@@` operator such that the field to be\nqueried must be on the left-hand-side and one of these builder functions\non the right-hand-side.\n\nThese functions live in a new schema named `pdb`. We decided to put\nthese new functions into a new schema for both technical and practical\nreasons. The technical reason is to avoid ambiguities when calling them,\nas all the original `paradedb.*` builder functions _still_ exist too,\nand because `pdb` is easier to type and read than `paradedb` in large\nSQL queries.\n\nThey all parallel their (pre-existing) counterparts in the `paradedb`\nschema\n\n\nFor example, you may have previously written:\n\n```sql\nSELECT * FROM mock_items\nWHERE id @@@ paradedb.term('description', 'shoes');\n```\n\nNow, you can instead write this:\n\n```sql\nSELECT * FROM mock_items\nWHERE description @@@ pdb.term('shoes');\n```\n\nNot only do we hope that this will be easier for humans writing SQL by\nhand but for machines generating SQL (think ORM tools). Putting the\nfield reference to the left of the operator, as opposed to a quoted\nstring as a function argument is more in-line with typical SQL query\npatterns.\n\n---\n\nThe full set of new functions in the `pdb` schema encompasses 68\nfunctions (too many to list here) and none of them take a\n`paradedb.FieldName` as their first argument. That said, for each\nfunction, there is an existing `paradedb` function counterpart that\ndoes. Not only does this ensure backwards compatibility, but the new\nfunctions essentially rewrite to the old functions during query planning\nand/or execution.\n\nFor example, this means that the query plans for both the old style of\n`WHERE id @@@ paradedb.exists('rating')` and the new, preferred style of\n`WHERE rating @@@ pdb.exists()` will be identical, including the json\nrepresentation of the \"Tantivy Query\":\n\n```sql\n[v16.2][2212069] test=# explain select * from mock_items where id @@@ paradedb.exists('rating');\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n\n[v16.2][2212069] test=# explain select * from mock_items where rating @@@ pdb.exists();\n                                           QUERY PLAN                                            \n-------------------------------------------------------------------------------------------------\n Gather  (cost=1010.00..1014.20 rows=41 width=118)\n   Workers Planned: 1\n   ->  Parallel Custom Scan (ParadeDB Scan) on mock_items  (cost=10.00..10.10 rows=20 width=118)\n         Table: mock_items\n         Index: idxmock_items\n         Segment Count: 1\n         Exec Method: NormalScanExecState\n         Scores: false\n         Tantivy Query: {\"with_index\":{\"query\":{\"exists\":{\"field\":\"rating\"}}}}\n(9 rows)\n```\n\n### Unanticipated Change\n\nIt is no longer possible to search for a term \"across all text fields\".\nPreviously this was possible via `WHERE id @@@\nparadedb.term(value=>'shoes')`, but is no longer supported.\n\n## Why\n\nAs part of our development roadmap we're working on making our SQL UX\neasier for users (and machines!) in an effort to be more intuitive to\nthose already familiar with SQL.\n\n## How\n\nBy creating a lot of new functions. Technically, these new functions are\nthe old functions and the old functions are now generated via a custom\nproc-macro.\n\n## Tests\n\nAll existing unit and regression tests pass.  \n\nThere were 3 (?) instances where the \"search for a term across all text\nfields\" was being tested, and those have been commented out (I suspect\nwe'll have to bring that feature back at some point).\n\nI have yet to implement tests for these new functions. The fact they're\nprogrammatically created makes that a little challenging.\n\n## Docs\n\nI believe the plan is for @rebasedming to work on docs for this in\nparallel with docs on the recently added operators (&&&, |||, ###, ===)\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-28T09:27:02-04:00",
          "tree_id": "ee9422fced5bcd3cb8633b945ee6f6c6d0408498",
          "url": "https://github.com/paradedb/paradedb/commit/5e13f82a5144fb0c47657c94f396084b2dcf10c2"
        },
        "date": 1753712176779,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 18.854676648020828, max cpu: 42.39451, count: 55145"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 153.0546875,
            "unit": "median mem",
            "extra": "avg mem: 138.25030268213348, max mem: 156.375, count: 55145"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 9.334430456243728, max cpu: 27.87996, count: 55145"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.69921875,
            "unit": "median mem",
            "extra": "avg mem: 142.34643610028107, max mem: 147.44921875, count: 55145"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 13.753581,
            "unit": "median cpu",
            "extra": "avg cpu: 11.657553857611617, max cpu: 27.639154, count: 55145"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 143.625,
            "unit": "median mem",
            "extra": "avg mem: 121.1055458903799, max mem: 162.66015625, count: 55145"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 20128,
            "unit": "median block_count",
            "extra": "avg block_count: 20786.648327137547, max block_count: 42667.0, count: 55145"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.251727135515883, max cpu: 4.6421666, count: 55145"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 93.82421875,
            "unit": "median mem",
            "extra": "avg mem: 83.89866212088585, max mem: 127.94921875, count: 55145"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.14474567050503, max segment_count: 52.0, count: 55145"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.872832,
            "unit": "median cpu",
            "extra": "avg cpu: 15.154735696856658, max cpu: 37.065636, count: 110290"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 159.0234375,
            "unit": "median mem",
            "extra": "avg mem: 143.38523721552272, max mem: 178.796875, count: 110290"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.793103,
            "unit": "median cpu",
            "extra": "avg cpu: 12.399442632766835, max cpu: 27.745665, count: 55145"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 156.72265625,
            "unit": "median mem",
            "extra": "avg mem: 154.21928644086046, max mem: 157.9296875, count: 55145"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "de0dcfa05f9e3e756445ad18ad319de148bdd673",
          "message": "feat: improved `bool` type support (#2907)\n\n# Ticket(s) Closed\n\n- Related to #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-28T11:21:39-07:00",
          "tree_id": "e803dbcbfc2f4303b256138a6af87df088401ae8",
          "url": "https://github.com/paradedb/paradedb/commit/de0dcfa05f9e3e756445ad18ad319de148bdd673"
        },
        "date": 1753729755874,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.443804,
            "unit": "median cpu",
            "extra": "avg cpu: 18.51716996212672, max cpu: 42.1875, count: 55167"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.97265625,
            "unit": "median mem",
            "extra": "avg mem: 141.6630332388475, max mem: 154.97265625, count: 55167"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 7.589841127555005, max cpu: 27.826086, count: 55167"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.22265625,
            "unit": "median mem",
            "extra": "avg mem: 140.91423024351062, max mem: 145.97265625, count: 55167"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.257474,
            "unit": "median cpu",
            "extra": "avg cpu: 10.993856355458663, max cpu: 23.414635, count: 55167"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 151.08203125,
            "unit": "median mem",
            "extra": "avg mem: 127.28812465162598, max mem: 160.40234375, count: 55167"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21608,
            "unit": "median block_count",
            "extra": "avg block_count: 21958.928943027535, max block_count: 43696.0, count: 55167"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.2751390198634, max cpu: 9.213051, count: 55167"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 99.84765625,
            "unit": "median mem",
            "extra": "avg mem: 89.29476344270579, max mem: 128.72265625, count: 55167"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 31,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.553410553410554, max segment_count: 47.0, count: 55167"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.832853,
            "unit": "median cpu",
            "extra": "avg cpu: 14.35962599569911, max cpu: 36.923077, count: 110334"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 154.99609375,
            "unit": "median mem",
            "extra": "avg mem: 146.2330507538474, max mem: 171.1796875, count: 110334"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.793103,
            "unit": "median cpu",
            "extra": "avg cpu: 12.599565163631508, max cpu: 27.906979, count: 55167"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 154.44921875,
            "unit": "median mem",
            "extra": "avg mem: 152.38098771400928, max mem: 156.1171875, count: 55167"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "44ea60cecf12427f534d631547935f45f4e4968c",
          "message": "feat:  \"proximity search\" support (#2685)\n\n## What\n\nThis implements the concept of \"proximity search\" in pg_search. It has a\nlot of overlap in spirit with Lucene's \"span\" queries.\n\nWe support finding a token within some distance (in order, or not) of\nanother token a set of tokens within some distance of a token or a set\nof tokens, and finally one of these proximity clauses within some\ndistance of a token, a set of tokens, or another proximity clause\n\nIntroduces a new datatype named `pdb.proximityclause`, which represents\nthe complex structure of a proximity clause -- the \"left\", \"distance\",\nand \"right\" properties.\n\nAdds a set of new builder functions in the `pdb` schema:\n\n- `pdb.prox_term(term TEXT)`: generates a single term query to be used\nas part of a `pdb.proximityclause`\n- `pdb.prox_regex(pattern TEXT)`: generates a regular expression query\nto be used as part of a `pdb.proximityclause`\n- `pdb.prox_clause`, `pdb.prox_clause_in_order`: forms a\n`pdb.proximityclause`\n- `pdb.prox_array(VARIADIC terms pdb.proximityclause[])`: supports a\nvariadic array of the above, including itself\n\nAnd a new overloaded operator `##(pdb.proximityclause, integer)` and\n`##(pdb.proximityclause, pdb.proximityclause)` to make writing proximity\nclauses via SQL more fluid:\n\n```sql\n--\n-- find all rows where the body matches the term \"bbq\" within 3 tokens (in order) of \"chicken\"\n---\nSELECT *\nFROM t\nWHERE body @@@ 'bbq' ##3## 'chicken';\n```\n\n## Why\n\nIncredibly valuable text search capability. Essentially it's a form of\nfuzzy phrase searching, but with more flexibility.\n\n## How\n\nContinued expansion on our SQL query rewriting capabilities.\n\n## Tests\n\nRegression tests to assert search result correctness along with json\nrepresentation\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Ming <ming.ying.nyc@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-07-29T11:49:25-04:00",
          "tree_id": "486966d269b5eff1298e3e49a03eb852798fd300",
          "url": "https://github.com/paradedb/paradedb/commit/44ea60cecf12427f534d631547935f45f4e4968c"
        },
        "date": 1753807143948,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.426102,
            "unit": "median cpu",
            "extra": "avg cpu: 18.50711265945842, max cpu: 37.869823, count: 55235"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 155.70703125,
            "unit": "median mem",
            "extra": "avg mem: 142.61144046460578, max mem: 156.08203125, count: 55235"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.610951,
            "unit": "median cpu",
            "extra": "avg cpu: 7.598715385468451, max cpu: 36.923077, count: 55235"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.33203125,
            "unit": "median mem",
            "extra": "avg mem: 141.34541575201413, max mem: 146.33203125, count: 55235"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.248554,
            "unit": "median cpu",
            "extra": "avg cpu: 11.043837724223371, max cpu: 27.665707, count: 55235"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 155.5078125,
            "unit": "median mem",
            "extra": "avg mem: 130.8456521001177, max mem: 164.7734375, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21752,
            "unit": "median block_count",
            "extra": "avg block_count: 22149.23515886666, max block_count: 44264.0, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6065254,
            "unit": "median cpu",
            "extra": "avg cpu: 4.203677529230704, max cpu: 4.6153846, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 101.33203125,
            "unit": "median mem",
            "extra": "avg mem: 90.78107638103106, max mem: 129.45703125, count: 55235"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 31,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.614393047886303, max segment_count: 46.0, count: 55235"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.819577,
            "unit": "median cpu",
            "extra": "avg cpu: 14.341874200899301, max cpu: 36.923077, count: 110470"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 161.34765625,
            "unit": "median mem",
            "extra": "avg mem: 148.7048655390038, max mem: 178.484375, count: 110470"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.766731,
            "unit": "median cpu",
            "extra": "avg cpu: 12.123068110830589, max cpu: 32.24568, count: 55235"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 160.0703125,
            "unit": "median mem",
            "extra": "avg mem: 157.06904773354756, max mem: 161.80078125, count: 55235"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "stuhood@paradedb.com",
            "name": "Stu Hood",
            "username": "stuhood"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "f3ef675fe021d0dd8eca8fce9b661a1f06e57c08",
          "message": "perf: Remove StringFastField exec method (#2901)\n\n# Ticket(s) Closed\n\n- Closes #2620\n\n## What\n\nFollowing up on #2887: remove the `StringFastField` execution method,\nsince it is never faster than `Mixed`.\n\nAdditionally: resolve #2620 by removing the planning conditional around\nstring aggregate cardinality.\n\n## Why\n\nSimplified code, faster performance.\n\n## How\n\nThe string agg cardinality check was occasionally preventing parallelism\non smaller datasets, which turned out to be a good thing: you only\nreally need enough parallelism to search the segments that you estimate\nwill be sufficient to answer your query.\n\nThe replacement here is an addition to `compute_nworkers` to explicitly\nlimit the number of workers to the number of segments we think that\nwe'll need to search (when sorting is not in use but a limit is). See\nnew comments in that method.\n\nAdditionally: this fixes our computation of `nworkers` to account for\nthe fact that the leader also takes a segment: we were always requesting\nat least one worker if we had one segment... when in reality we need\n`segments - 1` workers due to the leader. This shifts a lot of explain\nplans in regression and unit tests.\n\n## Tests\n\nAs shown in\nhttps://github.com/paradedb/paradedb/pull/2887#issuecomment-3116181511,\nmicrobenchmarks are unaffected.\n\nThe `docs` dataset has a 1.6x speedup for `line_items-distinct` and ~15%\nfor a few other queries. The `logs` dataset has 1.35x speedups for\n`bucket-string-nofilter` and `bucket-string-filter`.",
          "timestamp": "2025-07-29T10:50:08-07:00",
          "tree_id": "143d724002fc9343b1ef56914f272d1dd7945f08",
          "url": "https://github.com/paradedb/paradedb/commit/f3ef675fe021d0dd8eca8fce9b661a1f06e57c08"
        },
        "date": 1753814384710,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.461538,
            "unit": "median cpu",
            "extra": "avg cpu: 18.524443000417662, max cpu: 41.65863, count: 55214"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 152.3125,
            "unit": "median mem",
            "extra": "avg mem: 139.39466701436683, max mem: 156.0625, count: 55214"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 9.254175800417897, max cpu: 41.578438, count: 55214"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.3125,
            "unit": "median mem",
            "extra": "avg mem: 141.93562660738218, max mem: 146.6875, count: 55214"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.257474,
            "unit": "median cpu",
            "extra": "avg cpu: 10.647702346300827, max cpu: 27.559809, count: 55214"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 140.25390625,
            "unit": "median mem",
            "extra": "avg mem: 114.44614979613414, max mem: 156.3515625, count: 55214"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 20765,
            "unit": "median block_count",
            "extra": "avg block_count: 21542.60823341906, max block_count: 44425.0, count: 55214"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6153846,
            "unit": "median cpu",
            "extra": "avg cpu: 3.7250645141995578, max cpu: 4.6421666, count: 55214"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 96.0625,
            "unit": "median mem",
            "extra": "avg mem: 84.49542914840438, max mem: 127.1875, count: 55214"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.261763320896875, max segment_count: 46.0, count: 55214"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 14.409615645967632, max cpu: 46.198265, count: 110428"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 152.484375,
            "unit": "median mem",
            "extra": "avg mem: 140.88355060820172, max mem: 164.18359375, count: 110428"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.806328,
            "unit": "median cpu",
            "extra": "avg cpu: 12.978377026485479, max cpu: 27.826086, count: 55214"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 157.328125,
            "unit": "median mem",
            "extra": "avg mem: 154.67594064401692, max mem: 159.18359375, count: 55214"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2",
          "message": "feat: added support for ORDER BY in GROUP BY aggregate queries  (pushed down to custom scan) (#2909)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-29T15:53:56-07:00",
          "tree_id": "0e6ff936d83322880b31b283500bf6a28bd57158",
          "url": "https://github.com/paradedb/paradedb/commit/4b51aa90ba2b8aca73bcf85cfccfc8c6574e4de2"
        },
        "date": 1753832522317,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.426102,
            "unit": "median cpu",
            "extra": "avg cpu: 18.347650298492603, max cpu: 42.477875, count: 55233"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 156.45703125,
            "unit": "median mem",
            "extra": "avg mem: 155.00554603622382, max mem: 157.20703125, count: 55233"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 10.837559172761669, max cpu: 27.853, count: 55233"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 144.83984375,
            "unit": "median mem",
            "extra": "avg mem: 140.61437229554795, max mem: 144.83984375, count: 55233"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.248554,
            "unit": "median cpu",
            "extra": "avg cpu: 10.769778135561298, max cpu: 23.529411, count: 55233"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 118.921875,
            "unit": "median mem",
            "extra": "avg mem: 117.78578533213839, max mem: 163.9609375, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 18428,
            "unit": "median block_count",
            "extra": "avg block_count: 19708.5430449188, max block_count: 40838.0, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6021094,
            "unit": "median cpu",
            "extra": "avg cpu: 4.199478169760088, max cpu: 4.7197638, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 75.08984375,
            "unit": "median mem",
            "extra": "avg mem: 78.63115849842939, max mem: 124.58984375, count: 55233"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.01401336157732, max segment_count: 49.0, count: 55233"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 15.513720669422074, max cpu: 46.242775, count: 110466"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 159.91796875,
            "unit": "median mem",
            "extra": "avg mem: 141.27411990736968, max mem: 180.28125, count: 110466"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.766731,
            "unit": "median cpu",
            "extra": "avg cpu: 12.34136582690742, max cpu: 32.307693, count: 55233"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 158.6875,
            "unit": "median mem",
            "extra": "avg mem: 156.19823301117538, max mem: 160.41796875, count: 55233"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "9fb79113eb844aec4f9309f9e4ef06a08cfa9692",
          "message": "feat: GROUP BY without an aggregation function (#2914)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\nThis PR adds support for GROUP BY queries that do not have an\naggregation function\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T11:06:20-07:00",
          "tree_id": "dedee0889774880d608ffdbc3a39be971568e4b0",
          "url": "https://github.com/paradedb/paradedb/commit/9fb79113eb844aec4f9309f9e4ef06a08cfa9692"
        },
        "date": 1753901699944,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 18.227259263873297, max cpu: 46.332047, count: 55315"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.203125,
            "unit": "median mem",
            "extra": "avg mem: 141.39782813488657, max mem: 154.58203125, count: 55315"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 7.6010925484843, max cpu: 27.906979, count: 55315"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.95703125,
            "unit": "median mem",
            "extra": "avg mem: 141.75711789862606, max mem: 146.33203125, count: 55315"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 13.766731,
            "unit": "median cpu",
            "extra": "avg cpu: 11.601576702529783, max cpu: 28.486649, count: 55315"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 152.8203125,
            "unit": "median mem",
            "extra": "avg mem: 129.26951380728553, max mem: 161.99609375, count: 55315"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21918,
            "unit": "median block_count",
            "extra": "avg block_count: 22250.213468317816, max block_count: 44421.0, count: 55315"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.503021972703547, max cpu: 4.660194, count: 55315"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 100.95703125,
            "unit": "median mem",
            "extra": "avg mem: 90.72330607938625, max mem: 128.70703125, count: 55315"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.5467594684986, max segment_count: 47.0, count: 55315"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.88621,
            "unit": "median cpu",
            "extra": "avg cpu: 14.135719593402772, max cpu: 33.23442, count: 110630"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 166,
            "unit": "median mem",
            "extra": "avg mem: 153.9343598876887, max mem: 171.3671875, count: 110630"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 13.417289885393533, max cpu: 27.906979, count: 55315"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 159.43359375,
            "unit": "median mem",
            "extra": "avg mem: 156.88156919461267, max mem: 161.51171875, count: 55315"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "mdashti@gmail.com",
            "name": "Moe",
            "username": "mdashti"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "5b90b4662fd56e52166933e55ea8ff54e1e8ea80",
          "message": "feat: added support for multiple group-by columns (to be pushed down to custom scan). (#2915)\n\n# Ticket(s) Closed\n\n- Closes #2885\n\n## What\n\n## Why\n\n## How\n\n## Tests",
          "timestamp": "2025-07-30T13:56:20-07:00",
          "tree_id": "0c7b710b348ed06638d233e3e03c8b03689f1f98",
          "url": "https://github.com/paradedb/paradedb/commit/5b90b4662fd56e52166933e55ea8ff54e1e8ea80"
        },
        "date": 1753911896064,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 18.35744895667168, max cpu: 41.618496, count: 55276"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.2109375,
            "unit": "median mem",
            "extra": "avg mem: 139.20085471655872, max mem: 154.5859375, count: 55276"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 7.655032095558991, max cpu: 27.906979, count: 55276"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.5859375,
            "unit": "median mem",
            "extra": "avg mem: 141.26114888242637, max mem: 145.9609375, count: 55276"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.284333,
            "unit": "median cpu",
            "extra": "avg cpu: 11.05721455996766, max cpu: 28.318584, count: 55276"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 146.2421875,
            "unit": "median mem",
            "extra": "avg mem: 122.78252350986413, max mem: 153.21484375, count: 55276"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 23189,
            "unit": "median block_count",
            "extra": "avg block_count: 23614.169223532816, max block_count: 47777.0, count: 55276"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.416525505928783, max cpu: 4.7151275, count: 55276"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 102.8359375,
            "unit": "median mem",
            "extra": "avg mem: 91.25296947364136, max mem: 129.0859375, count: 55276"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.540722917721975, max segment_count: 46.0, count: 55276"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 13.573770654165946, max cpu: 33.103447, count: 110552"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 151.71484375,
            "unit": "median mem",
            "extra": "avg mem: 144.582135980127, max mem: 166.58203125, count: 110552"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.793103,
            "unit": "median cpu",
            "extra": "avg cpu: 12.218428995047667, max cpu: 32.24568, count: 55276"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 158.7578125,
            "unit": "median mem",
            "extra": "avg mem: 156.16777307002587, max mem: 160.56640625, count: 55276"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4466d8f1b632c579615abda8dfee14bf5b69aed8",
          "message": "feat: ability to boost query predicate scores via `::boost(N)` (#2918)\n\n## What\n\nThis adds the ability to boost the score of a query clause using\nPostgres SQL syntax for operators and casting.\n\nFor example:\n\n```sql\nSELECT * \nFROM mock_items \nWHERE description @@@ 'shoes'::boost(3);\n\nSELECT * \nFROM mock_items \nWHERE description @@@ pdb.phrase('running shoes')::boost(0.5);\n```\n\nIt works with the right-hand-side of all our operators: `@@@`, `&&&`,\n`|||`, `###`, and `===`, along with the proximity search syntax of\n`field @@@ ('one' ##3## 'two')::boost(42)`.\n\nThe new `boost` type supports a typmod that gets converted to a `f16`\n(so that it can fit within the non-negative side of an i32, which\nPostgres requires) and is quietly clamped to the range\n`-2048.0..=2028.0`. Any `pdb.query` can be cast to a `boost(N)` where\n`N` is either an integer or a floating point.\n\n## Why\n\nContinuation of the SQL UX work to make writing queries easier for\nhumans and machines.\n\n## How\n\n## Tests\n\nExisting tests pass and a new `boost.sql` regression test has been added\nto assert expected outputs.\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>",
          "timestamp": "2025-07-31T13:04:27-04:00",
          "tree_id": "caf4fe7cac54cd5ff4785519bdb5d13567ea8849",
          "url": "https://github.com/paradedb/paradedb/commit/4466d8f1b632c579615abda8dfee14bf5b69aed8"
        },
        "date": 1753987434247,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 18.603359792196855, max cpu: 41.618496, count: 55377"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 152.59765625,
            "unit": "median mem",
            "extra": "avg mem: 137.44055724003195, max mem: 156.3984375, count: 55377"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 9.243711982714645, max cpu: 27.87996, count: 55377"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.59765625,
            "unit": "median mem",
            "extra": "avg mem: 141.60684511112464, max mem: 145.984375, count: 55377"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.284333,
            "unit": "median cpu",
            "extra": "avg cpu: 11.110275806435, max cpu: 27.77242, count: 55377"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 145.796875,
            "unit": "median mem",
            "extra": "avg mem: 117.39139676952976, max mem: 155.6796875, count: 55377"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 20499,
            "unit": "median block_count",
            "extra": "avg block_count: 21233.26552539863, max block_count: 43492.0, count: 55377"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.624277,
            "unit": "median cpu",
            "extra": "avg cpu: 4.356881633021872, max cpu: 4.64666, count: 55377"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 92.97265625,
            "unit": "median mem",
            "extra": "avg mem: 83.54787277716832, max mem: 126.0703125, count: 55377"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.223775213536307, max segment_count: 51.0, count: 55377"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.88621,
            "unit": "median cpu",
            "extra": "avg cpu: 14.779254847418091, max cpu: 32.43243, count: 110754"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 151.9921875,
            "unit": "median mem",
            "extra": "avg mem: 140.93730749848763, max mem: 171.26171875, count: 110754"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.832853,
            "unit": "median cpu",
            "extra": "avg cpu: 12.578112233673687, max cpu: 27.799229, count: 55377"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 157.65625,
            "unit": "median mem",
            "extra": "avg mem: 155.22734019482365, max mem: 159.8125, count: 55377"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ming.ying.nyc@gmail.com",
            "name": "Ming",
            "username": "rebasedming"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "bfe1bd8f5080995034831666f1f7690b7bfa3587",
          "message": "feat: JSON expressions can be used with text search operators and pushed down as filters (#2919)\n\n# Ticket(s) Closed\n\n- Partially Closes #2606 \n\n## What\n\nThe following is now supported:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' LIMIT 5;\n```\n\nJSON filters can also be pushed down:\n\n```sql\nSELECT * FROM benchmark_logs WHERE metadata->>'label' @@@ 'query' AND (metadata->>'label')::int > 5 LIMIT 5;\n```\n\n## Why\n\n## How\n\n## Tests\nProptests for correctness, regression test for explain output",
          "timestamp": "2025-07-31T15:54:56-04:00",
          "tree_id": "dccb60fee0b2cf3c3ba01a6292558ef09eb9e120",
          "url": "https://github.com/paradedb/paradedb/commit/bfe1bd8f5080995034831666f1f7690b7bfa3587"
        },
        "date": 1753994625876,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.550726,
            "unit": "median cpu",
            "extra": "avg cpu: 18.38808299280089, max cpu: 37.982197, count: 55512"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.75390625,
            "unit": "median mem",
            "extra": "avg mem: 141.80650615238596, max mem: 155.59375, count: 55512"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 7.583065957168862, max cpu: 30.04695, count: 55512"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.421875,
            "unit": "median mem",
            "extra": "avg mem: 142.65858121048151, max mem: 147.171875, count: 55512"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.338522,
            "unit": "median cpu",
            "extra": "avg cpu: 11.32764131151684, max cpu: 27.853, count: 55512"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 148.9765625,
            "unit": "median mem",
            "extra": "avg mem: 125.86169854040568, max mem: 159.74609375, count: 55512"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21849,
            "unit": "median block_count",
            "extra": "avg block_count: 22047.323443579768, max block_count: 43841.0, count: 55512"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 3.8810798720091935, max cpu: 4.6647234, count: 55512"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 100.78515625,
            "unit": "median mem",
            "extra": "avg mem: 91.11670161125072, max mem: 130.1484375, count: 55512"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.528894653408273, max segment_count: 49.0, count: 55512"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.9265,
            "unit": "median cpu",
            "extra": "avg cpu: 14.46613661200089, max cpu: 41.458733, count: 111024"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 151.1328125,
            "unit": "median mem",
            "extra": "avg mem: 143.58425567754495, max mem: 165.45703125, count: 111024"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.899614,
            "unit": "median cpu",
            "extra": "avg cpu: 12.928249350512479, max cpu: 27.87996, count: 55512"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 159.13671875,
            "unit": "median mem",
            "extra": "avg mem: 156.54907539698624, max mem: 161.0625, count: 55512"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "a804e67d948a850b6fa61989843185be207e91e5",
          "message": "fix: Node relabeling no longer defeats new operators (#2925)\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\nThe new &&&,|||,###,=== operators are all defined to take a value of\ntype TEXT on the left-hand-side.\n\nIf the lhs Var happens to be coercible to text, but not actually TEXT,\nsuch as VARCHAR, Postgres will wrap that Var node in a RelabelType,\nwhich we need to be able to see through in order to find the actual\nfield being referenced on the left-hand-side of the operator.\n\n## Why\n\n## How\n\n## Tests\n\nThe existing `operators.sql` regression test has been updated to also\ntest using a VARCHAR field. I can't think of any other types that\nPostgres will relabel to TEXT, especially among the set of data types we\nsupport.",
          "timestamp": "2025-08-01T11:35:41-04:00",
          "tree_id": "df4b710fdd729920e2e0273493cd186a9b8c60ca",
          "url": "https://github.com/paradedb/paradedb/commit/a804e67d948a850b6fa61989843185be207e91e5"
        },
        "date": 1754065432354,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.550726,
            "unit": "median cpu",
            "extra": "avg cpu: 18.52578453781421, max cpu: 42.477875, count: 55532"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 152.609375,
            "unit": "median mem",
            "extra": "avg mem: 138.23613271402075, max mem: 155.234375, count: 55532"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 9.167971386815797, max cpu: 28.042841, count: 55532"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.6171875,
            "unit": "median mem",
            "extra": "avg mem: 142.1092239750279, max mem: 146.6171875, count: 55532"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.430255,
            "unit": "median cpu",
            "extra": "avg cpu: 11.442633849168395, max cpu: 23.715414, count: 55532"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 147.82421875,
            "unit": "median mem",
            "extra": "avg mem: 121.50643801096665, max mem: 161.015625, count: 55532"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 20774,
            "unit": "median block_count",
            "extra": "avg block_count: 21610.786141323922, max block_count: 44363.0, count: 55532"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.029389621880633, max cpu: 4.7524753, count: 55532"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 94.94140625,
            "unit": "median mem",
            "extra": "avg mem: 83.82296257675755, max mem: 127.19921875, count: 55532"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.05164589786069, max segment_count: 48.0, count: 55532"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.9265,
            "unit": "median cpu",
            "extra": "avg cpu: 14.623677130221663, max cpu: 33.267326, count: 111064"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 157.34375,
            "unit": "median mem",
            "extra": "avg mem: 143.52239857902876, max mem: 169.59375, count: 111064"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.899614,
            "unit": "median cpu",
            "extra": "avg cpu: 13.350436609642914, max cpu: 27.934044, count: 55532"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 159.10546875,
            "unit": "median mem",
            "extra": "avg mem: 156.66784023457197, max mem: 160.96484375, count: 55532"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf",
          "message": "fix: relation extension cache invalidation (#2927) (#2934)\n\n(This ports the recent v0.16.5 changes\n(214c9c7dd37a0ddb934e1ce4cbb15f949e1f8a69) forward to `main`)\n\nWhen extending a relation the backend needs to clear the relation's\n`SMgrRelation`'s \"SIZE_CACHE\" so that it doesn't become confused about\nthe size of a relation relative to other concurrent relation extensions\nthat may have occurred.\n\nFailure to do this can cause errors like the below under high read/write\nconcurrency:\n\n```\nERROR:  XX001: could not read blocks 10..10 in file \"base/16384/16552\": read only 0 of 8192 bytes\n```\n\nPR #2716 introduced this bug as it changed our approach of always\ncalling `pg_sys::relation_open()` to the new `PgSearchRelation` which\nwraps an already-opened `pg_sys::Relation` pointer and is cheaply\nclone-able.\n\nEssentially, prior to #2716 we'd always get a new `SMgrRelation` and it\nwould ask the kernel about the size of the relation on disk, whereas\n\nFixing this necessitates calling the various\n`pg_sys::ExtendBufferedRel*()` functions with the\n`pg_sys::ExtendBufferedFlags::EB_CLEAR_SIZE_CACHE` flag set, which also\nmeans we need to use `pg_sys::ExtendedBufferedRel` directly when\nextending the relation by one block. So `BM25BufferCache` has been\nrefactored a bit to handle this.\n\nIt's also necessary, when extending the relation by a single buffer, to\nlock it using an `ExclusiveLock`, not an `AccessExclusiveLock`.\n\nAs a drive-by, this PR adjusts `SegmentComponentWriter`'s flush/drop\nbehavior to be less confusing and better aided by the Rust compiler.\nThis is related to the new `LInkedBytesListWriter::finalize_and_write()`\nfunction (see below).\n\nThe cleanup around flush & drop also ensures that we won't try to write\nany bit of a SegmentComponentWriter's buffers to disk if we're dropping\nduring a panic-induced stack unwind.\n\n`LinkedBytesListWriter` now has a `fn finalize_and_write(self)` which is\nwhere it records the `last_blockno` in the list's metadata and also\nwhere its `BlockList` is written to disk. The `last_blockno` was\npreviously being constantly updated by `LinkedBytesListWriter::write()`\nevery time it linked a new buffer to the end. This wasn't necessarily\nincorrect, but it was inefficient and made analyzing the issues this PR\naims to fix a bit more difficult.\n\nMoving the final assignment of `last_blockno` to `finalize_and_write()`\nis fine as if the writer is never finalized for whatever reason, the\n\"last block number\" won't matter anyways.\n\nThere's a new feature called `block_tracker` that when enabled will\ntransiently track all block numbers being opened/released and panic when\nit detects a block is about to be opened a second time in an\nincompatible manner with an already-open instance. This is for internal\ndebugging and clearly not meant for production use, which is why the\nfeature is not included in the default feature flag set.\n\n# Ticket(s) Closed\n\n- Closes #\n\n## What\n\n## Why\n\n## How\n\n## Tests\n\n---------\n\nSigned-off-by: Eric Ridge <eebbrr@gmail.com>\nCo-authored-by: Stu Hood <stuhood@paradedb.com>",
          "timestamp": "2025-08-05T12:51:08-04:00",
          "tree_id": "19a3c97d5000369c91d3727abf2ab77cc4573668",
          "url": "https://github.com/paradedb/paradedb/commit/c804e4b7155b9bcaceff3f6cec8d7e914b6d39bf"
        },
        "date": 1754415530646,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.568666,
            "unit": "median cpu",
            "extra": "avg cpu: 18.34550299481086, max cpu: 42.105263, count: 55517"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.82421875,
            "unit": "median mem",
            "extra": "avg mem: 142.5931764144316, max mem: 155.203125, count: 55517"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.64666,
            "unit": "median cpu",
            "extra": "avg cpu: 7.594992436326766, max cpu: 28.070175, count: 55517"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.55078125,
            "unit": "median mem",
            "extra": "avg mem: 141.86297834447106, max mem: 146.55078125, count: 55517"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.338522,
            "unit": "median cpu",
            "extra": "avg cpu: 11.288270477285097, max cpu: 27.87996, count: 55517"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 148.078125,
            "unit": "median mem",
            "extra": "avg mem: 124.1511418377479, max mem: 154.83984375, count: 55517"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 23084,
            "unit": "median block_count",
            "extra": "avg block_count: 23304.074841940306, max block_count: 46944.0, count: 55517"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6511626,
            "unit": "median cpu",
            "extra": "avg cpu: 4.429448199900971, max cpu: 4.678363, count: 55517"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 102.72265625,
            "unit": "median mem",
            "extra": "avg mem: 90.96791347413856, max mem: 130.4921875, count: 55517"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.330277212385397, max segment_count: 46.0, count: 55517"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.899614,
            "unit": "median cpu",
            "extra": "avg cpu: 13.635443222847755, max cpu: 36.994217, count: 111034"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 158.19140625,
            "unit": "median mem",
            "extra": "avg mem: 147.3746871031621, max mem: 170.88671875, count: 111034"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.88621,
            "unit": "median cpu",
            "extra": "avg cpu: 12.701364346908983, max cpu: 27.934044, count: 55517"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 155.6953125,
            "unit": "median mem",
            "extra": "avg mem: 153.24714157093774, max mem: 157.49609375, count: 55517"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "4a18fff766644d8f375182df55e5c87ca5e5f052",
          "message": "feat: ability to specify term \"fuzzy\"-ness via a cast to `::fuzzy(N)` (#2921)\n\n## What\n\nIntroduces a new SQL type named `fuzzy(N, b, b)` that can be used in\nvarious query contexts to indicate that the term(s) being searched for\nshould be \"fuzzy terms\".\n\nSome examples:\n\n```sql\nSELECT * FROM t WHERE f === 'beer'::fuzzy(2);   -- FuzzyTerm query\nSELECT * FROM t WHERE f @@@ 'beer wine cheese'::fuzzy(2); -- QueryParser query with fuzzy set for the field \"f\"\nSELECT * FROM t WHERE f &&& 'beer wine cheese'::fuzzy(2); -- Match conjunction query with fuzzy\nSELECT * FROM t WHERE f ||| 'beer wine cheese'::fuzzy(2); -- Match disjunction query with fuzzy\n```\n\nThe type modifier can take 3 arguments: a distance calculation in the\nrange `0..=2` and two booleans written as either `t`/`f` or (literally)\n`\"true\"`/`\"false\"` (this is a Postgres restriction -- `true` or `false`\non their own don't work). The first boolean, which defaults to `f`\ndenotes if the fuzzy term should be a prefix and the second boolean,\nwhich also defaults to `f` denotes if the transaction cost should be 1\n(true) or zero (false).\n\n## Why\n\nA continuation of improving our SQL UX. This feature is similar to the\nrecently committed `::boost(N)` feature in that the query rewriting\nhappens through an SQL type cast.\n\n## How\n\n## Tests\n\nNew regression test specifically for fuzzy, a proptest for the\nconversion to/from the typmod `i32` and all other tests pass.",
          "timestamp": "2025-08-05T13:30:40-04:00",
          "tree_id": "2a204df41a87b5a8f8048da5425c4f8ed2cd2306",
          "url": "https://github.com/paradedb/paradedb/commit/4a18fff766644d8f375182df55e5c87ca5e5f052"
        },
        "date": 1754417929102,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.568666,
            "unit": "median cpu",
            "extra": "avg cpu: 18.68848535949414, max cpu: 37.944664, count: 55525"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 156.4140625,
            "unit": "median mem",
            "extra": "avg mem: 142.92228690623594, max mem: 156.4140625, count: 55525"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6421666,
            "unit": "median cpu",
            "extra": "avg cpu: 7.629318295723575, max cpu: 28.015566, count: 55525"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 147.11328125,
            "unit": "median mem",
            "extra": "avg mem: 142.20882042154435, max mem: 147.11328125, count: 55525"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.311348,
            "unit": "median cpu",
            "extra": "avg cpu: 10.65654881060537, max cpu: 23.715414, count: 55525"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 151.578125,
            "unit": "median mem",
            "extra": "avg mem: 127.64490889520486, max mem: 162.015625, count: 55525"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 21909,
            "unit": "median block_count",
            "extra": "avg block_count: 22249.446951823502, max block_count: 44551.0, count: 55525"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.6376815,
            "unit": "median cpu",
            "extra": "avg cpu: 4.471176201706109, max cpu: 4.660194, count: 55525"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 100.5234375,
            "unit": "median mem",
            "extra": "avg mem: 89.11198137100405, max mem: 129.78125, count: 55525"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.479225574065737, max segment_count: 48.0, count: 55525"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.93998,
            "unit": "median cpu",
            "extra": "avg cpu: 14.914823573003252, max cpu: 37.354088, count: 111050"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 157.875,
            "unit": "median mem",
            "extra": "avg mem: 144.59811736689554, max mem: 176.64453125, count: 111050"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.913043,
            "unit": "median cpu",
            "extra": "avg cpu: 13.82725186005759, max cpu: 28.070175, count: 55525"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 158.0625,
            "unit": "median mem",
            "extra": "avg mem: 156.13195906967582, max mem: 162.1953125, count: 55525"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "e3bd2aeb4384019cfe6446bb8601df8652ae4fb0",
          "message": "chore: add missing tests from enterprise (#2937)\n\nThis adds a test file that only existed in our enterprise version that\nhad some failures and needed fixing.\n\nSeems better to have it on community -- it's not specific to enterprise.",
          "timestamp": "2025-08-05T15:18:10-04:00",
          "tree_id": "ffcda25958b5c15c189adc660e77aff92b42e999",
          "url": "https://github.com/paradedb/paradedb/commit/e3bd2aeb4384019cfe6446bb8601df8652ae4fb0"
        },
        "date": 1754424371933,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.497108,
            "unit": "median cpu",
            "extra": "avg cpu: 18.459584829292666, max cpu: 47.33728, count: 55488"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 154.56640625,
            "unit": "median mem",
            "extra": "avg mem: 152.99367803905798, max mem: 154.56640625, count: 55488"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 7.546008437546098, max cpu: 27.988338, count: 55488"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 145.48828125,
            "unit": "median mem",
            "extra": "avg mem: 141.09663245037214, max mem: 145.48828125, count: 55488"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.284333,
            "unit": "median cpu",
            "extra": "avg cpu: 10.845853960610667, max cpu: 23.645319, count: 55488"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 155.28125,
            "unit": "median mem",
            "extra": "avg mem: 131.13851460563546, max mem: 164.9453125, count: 55488"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 22992,
            "unit": "median block_count",
            "extra": "avg block_count: 23267.530096597464, max block_count: 46782.0, count: 55488"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.619827,
            "unit": "median cpu",
            "extra": "avg cpu: 4.082394728574783, max cpu: 4.6376815, count: 55488"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 100.41796875,
            "unit": "median mem",
            "extra": "avg mem: 90.27802048697465, max mem: 128.1796875, count: 55488"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.37027825836217, max segment_count: 46.0, count: 55488"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.872832,
            "unit": "median cpu",
            "extra": "avg cpu: 14.000369479658495, max cpu: 37.72102, count: 110976"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 168.5234375,
            "unit": "median mem",
            "extra": "avg mem: 154.5574848390643, max mem: 172.1328125, count: 110976"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.846154,
            "unit": "median cpu",
            "extra": "avg cpu: 12.712659947241123, max cpu: 27.961164, count: 55488"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 159.328125,
            "unit": "median mem",
            "extra": "avg mem: 156.89188294372207, max mem: 161.828125, count: 55488"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "eebbrr@gmail.com",
            "name": "Eric Ridge",
            "username": "eeeebbbbrrrr"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "0987f408db7c0c82ecf03091076979bf7a09aacf",
          "message": "chore: fix release information (#2949)\n\n## What\n\nThis fixes `main` to properly reflect the recent 0.17.3 and 0.16.5\nreleases in its changelog, docs, and schema ugprade.sql scripts.\n\nIt also goes ahead and bumps `main`'s version to 0.18.0, while still\notherwise mentioning 0.17.3 as our latest release in ugprading.mdx and\nextension.mdx",
          "timestamp": "2025-08-06T23:31:26-04:00",
          "tree_id": "4bdb3aba83145302c52bf2a31af352609dcc9d7e",
          "url": "https://github.com/paradedb/paradedb/commit/0987f408db7c0c82ecf03091076979bf7a09aacf"
        },
        "date": 1754540456277,
        "tool": "customSmallerIsBetter",
        "benches": [
          {
            "name": "Custom scan - Primary - cpu",
            "value": 18.514948,
            "unit": "median cpu",
            "extra": "avg cpu: 18.149640533381493, max cpu: 37.75811, count: 55417"
          },
          {
            "name": "Custom scan - Primary - mem",
            "value": 156.44921875,
            "unit": "median mem",
            "extra": "avg mem: 143.38509829452153, max mem: 156.82421875, count: 55417"
          },
          {
            "name": "Delete value - Primary - cpu",
            "value": 4.6332045,
            "unit": "median cpu",
            "extra": "avg cpu: 7.589245347541397, max cpu: 27.988338, count: 55417"
          },
          {
            "name": "Delete value - Primary - mem",
            "value": 146.578125,
            "unit": "median mem",
            "extra": "avg mem: 142.16191507400708, max mem: 146.96484375, count: 55417"
          },
          {
            "name": "Insert value - Primary - cpu",
            "value": 9.29332,
            "unit": "median cpu",
            "extra": "avg cpu: 10.918128699669964, max cpu: 27.692308, count: 55417"
          },
          {
            "name": "Insert value - Primary - mem",
            "value": 151.37890625,
            "unit": "median mem",
            "extra": "avg mem: 128.5554904322004, max mem: 161.515625, count: 55417"
          },
          {
            "name": "Monitor Segment Count - Primary - block_count",
            "value": 22585,
            "unit": "median block_count",
            "extra": "avg block_count: 22868.210440839455, max block_count: 45965.0, count: 55417"
          },
          {
            "name": "Monitor Segment Count - Primary - cpu",
            "value": 4.628737,
            "unit": "median cpu",
            "extra": "avg cpu: 4.585982267751518, max cpu: 4.6647234, count: 55417"
          },
          {
            "name": "Monitor Segment Count - Primary - mem",
            "value": 101.125,
            "unit": "median mem",
            "extra": "avg mem: 90.75101312830449, max mem: 130.390625, count: 55417"
          },
          {
            "name": "Monitor Segment Count - Primary - segment_count",
            "value": 30,
            "unit": "median segment_count",
            "extra": "avg segment_count: 30.499774437446995, max segment_count: 45.0, count: 55417"
          },
          {
            "name": "Update random values - Primary - cpu",
            "value": 13.88621,
            "unit": "median cpu",
            "extra": "avg cpu: 13.862013529045925, max cpu: 32.876713, count: 110834"
          },
          {
            "name": "Update random values - Primary - mem",
            "value": 151.03125,
            "unit": "median mem",
            "extra": "avg mem: 143.72899610848205, max mem: 170.20703125, count: 110834"
          },
          {
            "name": "Vacuum - Primary - cpu",
            "value": 13.859479,
            "unit": "median cpu",
            "extra": "avg cpu: 13.000141079773957, max cpu: 27.961164, count: 55417"
          },
          {
            "name": "Vacuum - Primary - mem",
            "value": 156.0390625,
            "unit": "median mem",
            "extra": "avg mem: 153.65985498301515, max mem: 157.0390625, count: 55417"
          }
        ]
      }
    ]
  }
}